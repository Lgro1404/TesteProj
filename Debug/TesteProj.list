
TesteProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080048b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080048b4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5c2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1b  00000000  00000000  0002a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100e4  00000000  00000000  0002d54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e754  00000000  00000000  0003d633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000626ad  00000000  00000000  0004bd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c50  00000000  00000000  000ae434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b1084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004818 	.word	0x08004818

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004818 	.word	0x08004818

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f9d9 	bl	80015e0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f943 	bl	80014c0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fdba 	bl	8000dbc <__aeabi_dsub>
 8000248:	f001 f93a 	bl	80014c0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	001f      	movs	r7, r3
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	4681      	mov	r9, r0
 8000270:	4692      	mov	sl, r2
 8000272:	0005      	movs	r5, r0
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2b00      	cmp	r3, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e152      	b.n	8000528 <__aeabi_ddiv+0x2cc>
 8000282:	4ad2      	ldr	r2, [pc, #840]	; (80005cc <__aeabi_ddiv+0x370>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e16e      	b.n	8000568 <__aeabi_ddiv+0x30c>
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4322      	orrs	r2, r4
 8000296:	4690      	mov	r8, r2
 8000298:	4acd      	ldr	r2, [pc, #820]	; (80005d0 <__aeabi_ddiv+0x374>)
 800029a:	00c5      	lsls	r5, r0, #3
 800029c:	4693      	mov	fp, r2
 800029e:	449b      	add	fp, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	4699      	mov	r9, r3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11a      	b.n	80004ee <__aeabi_ddiv+0x292>
 80002b8:	4ac4      	ldr	r2, [pc, #784]	; (80005cc <__aeabi_ddiv+0x370>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e15e      	b.n	800057e <__aeabi_ddiv+0x322>
 80002c0:	0f42      	lsrs	r2, r0, #29
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	4322      	orrs	r2, r4
 80002c6:	2480      	movs	r4, #128	; 0x80
 80002c8:	0424      	lsls	r4, r4, #16
 80002ca:	4314      	orrs	r4, r2
 80002cc:	4ac0      	ldr	r2, [pc, #768]	; (80005d0 <__aeabi_ddiv+0x374>)
 80002ce:	00c1      	lsls	r1, r0, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	465a      	mov	r2, fp
 80002d4:	4463      	add	r3, ip
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	469b      	mov	fp, r3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	4aba      	ldr	r2, [pc, #744]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58d3      	ldr	r3, [r2, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e287      	b.n	800080e <__aeabi_ddiv+0x5b2>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d5      	b.n	80004b0 <__aeabi_ddiv+0x254>
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	2500      	movs	r5, #0
 800030a:	051b      	lsls	r3, r3, #20
 800030c:	4313      	orrs	r3, r2
 800030e:	4652      	mov	r2, sl
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4ba8      	ldr	r3, [pc, #672]	; (80005cc <__aeabi_ddiv+0x370>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	000d      	movs	r5, r1
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c4      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1bf      	b.n	80006c2 <__aeabi_ddiv+0x466>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e0c      	lsrs	r4, r1, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	020a      	lsls	r2, r1, #8
 800035e:	0c1f      	lsrs	r7, r3, #16
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e201      	b.n	800078e <__aeabi_ddiv+0x532>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff41 	bl	8000214 <__aeabi_uidivmod>
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	0436      	lsls	r6, r6, #16
 8000396:	4342      	muls	r2, r0
 8000398:	0409      	lsls	r1, r1, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	0003      	movs	r3, r0
 800039e:	430e      	orrs	r6, r1
 80003a0:	42b2      	cmp	r2, r6
 80003a2:	d904      	bls.n	80003ae <__aeabi_ddiv+0x152>
 80003a4:	1936      	adds	r6, r6, r4
 80003a6:	3b01      	subs	r3, #1
 80003a8:	42b4      	cmp	r4, r6
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x152>
 80003ac:	e1e9      	b.n	8000782 <__aeabi_ddiv+0x526>
 80003ae:	1ab0      	subs	r0, r6, r2
 80003b0:	4642      	mov	r2, r8
 80003b2:	9e00      	ldr	r6, [sp, #0]
 80003b4:	0412      	lsls	r2, r2, #16
 80003b6:	431a      	orrs	r2, r3
 80003b8:	0c33      	lsrs	r3, r6, #16
 80003ba:	001f      	movs	r7, r3
 80003bc:	0c11      	lsrs	r1, r2, #16
 80003be:	4690      	mov	r8, r2
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	0413      	lsls	r3, r2, #16
 80003c4:	0432      	lsls	r2, r6, #16
 80003c6:	0c16      	lsrs	r6, r2, #16
 80003c8:	0032      	movs	r2, r6
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	435a      	muls	r2, r3
 80003ce:	9603      	str	r6, [sp, #12]
 80003d0:	437b      	muls	r3, r7
 80003d2:	434e      	muls	r6, r1
 80003d4:	4379      	muls	r1, r7
 80003d6:	0c17      	lsrs	r7, r2, #16
 80003d8:	46bc      	mov	ip, r7
 80003da:	199b      	adds	r3, r3, r6
 80003dc:	4463      	add	r3, ip
 80003de:	429e      	cmp	r6, r3
 80003e0:	d903      	bls.n	80003ea <__aeabi_ddiv+0x18e>
 80003e2:	2680      	movs	r6, #128	; 0x80
 80003e4:	0276      	lsls	r6, r6, #9
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4461      	add	r1, ip
 80003ea:	0c1e      	lsrs	r6, r3, #16
 80003ec:	1871      	adds	r1, r6, r1
 80003ee:	0416      	lsls	r6, r2, #16
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	0c36      	lsrs	r6, r6, #16
 80003f4:	199e      	adds	r6, r3, r6
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d302      	bcc.n	8000400 <__aeabi_ddiv+0x1a4>
 80003fa:	d112      	bne.n	8000422 <__aeabi_ddiv+0x1c6>
 80003fc:	42b5      	cmp	r5, r6
 80003fe:	d210      	bcs.n	8000422 <__aeabi_ddiv+0x1c6>
 8000400:	4643      	mov	r3, r8
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	469c      	mov	ip, r3
 8000408:	4465      	add	r5, ip
 800040a:	001f      	movs	r7, r3
 800040c:	429d      	cmp	r5, r3
 800040e:	419b      	sbcs	r3, r3
 8000410:	425b      	negs	r3, r3
 8000412:	191b      	adds	r3, r3, r4
 8000414:	18c0      	adds	r0, r0, r3
 8000416:	4284      	cmp	r4, r0
 8000418:	d200      	bcs.n	800041c <__aeabi_ddiv+0x1c0>
 800041a:	e19e      	b.n	800075a <__aeabi_ddiv+0x4fe>
 800041c:	d100      	bne.n	8000420 <__aeabi_ddiv+0x1c4>
 800041e:	e199      	b.n	8000754 <__aeabi_ddiv+0x4f8>
 8000420:	4690      	mov	r8, r2
 8000422:	1bae      	subs	r6, r5, r6
 8000424:	42b5      	cmp	r5, r6
 8000426:	41ad      	sbcs	r5, r5
 8000428:	1a40      	subs	r0, r0, r1
 800042a:	426d      	negs	r5, r5
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e1d2      	b.n	80007da <__aeabi_ddiv+0x57e>
 8000434:	4649      	mov	r1, r9
 8000436:	f7ff feed 	bl	8000214 <__aeabi_uidivmod>
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	040b      	lsls	r3, r1, #16
 800043e:	4342      	muls	r2, r0
 8000440:	0c31      	lsrs	r1, r6, #16
 8000442:	0005      	movs	r5, r0
 8000444:	4319      	orrs	r1, r3
 8000446:	428a      	cmp	r2, r1
 8000448:	d900      	bls.n	800044c <__aeabi_ddiv+0x1f0>
 800044a:	e16c      	b.n	8000726 <__aeabi_ddiv+0x4ca>
 800044c:	1a88      	subs	r0, r1, r2
 800044e:	4649      	mov	r1, r9
 8000450:	f7ff fee0 	bl	8000214 <__aeabi_uidivmod>
 8000454:	9a01      	ldr	r2, [sp, #4]
 8000456:	0436      	lsls	r6, r6, #16
 8000458:	4342      	muls	r2, r0
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	0c36      	lsrs	r6, r6, #16
 800045e:	0003      	movs	r3, r0
 8000460:	430e      	orrs	r6, r1
 8000462:	42b2      	cmp	r2, r6
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x20c>
 8000466:	e153      	b.n	8000710 <__aeabi_ddiv+0x4b4>
 8000468:	9803      	ldr	r0, [sp, #12]
 800046a:	1ab6      	subs	r6, r6, r2
 800046c:	0002      	movs	r2, r0
 800046e:	042d      	lsls	r5, r5, #16
 8000470:	431d      	orrs	r5, r3
 8000472:	9f02      	ldr	r7, [sp, #8]
 8000474:	042b      	lsls	r3, r5, #16
 8000476:	0c1b      	lsrs	r3, r3, #16
 8000478:	435a      	muls	r2, r3
 800047a:	437b      	muls	r3, r7
 800047c:	469c      	mov	ip, r3
 800047e:	0c29      	lsrs	r1, r5, #16
 8000480:	4348      	muls	r0, r1
 8000482:	0c13      	lsrs	r3, r2, #16
 8000484:	4484      	add	ip, r0
 8000486:	4463      	add	r3, ip
 8000488:	4379      	muls	r1, r7
 800048a:	4298      	cmp	r0, r3
 800048c:	d903      	bls.n	8000496 <__aeabi_ddiv+0x23a>
 800048e:	2080      	movs	r0, #128	; 0x80
 8000490:	0240      	lsls	r0, r0, #9
 8000492:	4684      	mov	ip, r0
 8000494:	4461      	add	r1, ip
 8000496:	0c18      	lsrs	r0, r3, #16
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	0c12      	lsrs	r2, r2, #16
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	189b      	adds	r3, r3, r2
 80004a2:	4286      	cmp	r6, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x24c>
 80004a6:	e100      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x250>
 80004aa:	e0fb      	b.n	80006a4 <__aeabi_ddiv+0x448>
 80004ac:	2301      	movs	r3, #1
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80004b2:	445b      	add	r3, fp
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_ddiv+0x25e>
 80004b8:	e0aa      	b.n	8000610 <__aeabi_ddiv+0x3b4>
 80004ba:	076a      	lsls	r2, r5, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e13d      	b.n	800073c <__aeabi_ddiv+0x4e0>
 80004c0:	08e9      	lsrs	r1, r5, #3
 80004c2:	4642      	mov	r2, r8
 80004c4:	01d2      	lsls	r2, r2, #7
 80004c6:	d506      	bpl.n	80004d6 <__aeabi_ddiv+0x27a>
 80004c8:	4642      	mov	r2, r8
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <__aeabi_ddiv+0x380>)
 80004cc:	401a      	ands	r2, r3
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	4690      	mov	r8, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	445b      	add	r3, fp
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	dd00      	ble.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e723      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004de:	4642      	mov	r2, r8
 80004e0:	055b      	lsls	r3, r3, #21
 80004e2:	0755      	lsls	r5, r2, #29
 80004e4:	0252      	lsls	r2, r2, #9
 80004e6:	430d      	orrs	r5, r1
 80004e8:	0b12      	lsrs	r2, r2, #12
 80004ea:	0d5b      	lsrs	r3, r3, #21
 80004ec:	e70d      	b.n	800030a <__aeabi_ddiv+0xae>
 80004ee:	4651      	mov	r1, sl
 80004f0:	4321      	orrs	r1, r4
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0x29a>
 80004f4:	e07c      	b.n	80005f0 <__aeabi_ddiv+0x394>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x2a0>
 80004fa:	e0fb      	b.n	80006f4 <__aeabi_ddiv+0x498>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 f879 	bl	80015f4 <__clzsi2>
 8000502:	0002      	movs	r2, r0
 8000504:	3a0b      	subs	r2, #11
 8000506:	231d      	movs	r3, #29
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	4652      	mov	r2, sl
 800050c:	0001      	movs	r1, r0
 800050e:	40da      	lsrs	r2, r3
 8000510:	4653      	mov	r3, sl
 8000512:	3908      	subs	r1, #8
 8000514:	408b      	lsls	r3, r1
 8000516:	408c      	lsls	r4, r1
 8000518:	0019      	movs	r1, r3
 800051a:	4314      	orrs	r4, r2
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <__aeabi_ddiv+0x388>)
 800051e:	4458      	add	r0, fp
 8000520:	469b      	mov	fp, r3
 8000522:	4483      	add	fp, r0
 8000524:	2000      	movs	r0, #0
 8000526:	e6d9      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000528:	0003      	movs	r3, r0
 800052a:	4323      	orrs	r3, r4
 800052c:	4698      	mov	r8, r3
 800052e:	d044      	beq.n	80005ba <__aeabi_ddiv+0x35e>
 8000530:	2c00      	cmp	r4, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x2da>
 8000534:	e0cf      	b.n	80006d6 <__aeabi_ddiv+0x47a>
 8000536:	0020      	movs	r0, r4
 8000538:	f001 f85c 	bl	80015f4 <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	0002      	movs	r2, r0
 8000540:	390b      	subs	r1, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	4649      	mov	r1, r9
 8000548:	0010      	movs	r0, r2
 800054a:	40d9      	lsrs	r1, r3
 800054c:	3808      	subs	r0, #8
 800054e:	4084      	lsls	r4, r0
 8000550:	000b      	movs	r3, r1
 8000552:	464d      	mov	r5, r9
 8000554:	4323      	orrs	r3, r4
 8000556:	4698      	mov	r8, r3
 8000558:	4085      	lsls	r5, r0
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <__aeabi_ddiv+0x38c>)
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	469b      	mov	fp, r3
 8000560:	2300      	movs	r3, #0
 8000562:	4699      	mov	r9, r3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e69e      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000568:	0002      	movs	r2, r0
 800056a:	4322      	orrs	r2, r4
 800056c:	4690      	mov	r8, r2
 800056e:	d11d      	bne.n	80005ac <__aeabi_ddiv+0x350>
 8000570:	2208      	movs	r2, #8
 8000572:	469b      	mov	fp, r3
 8000574:	2302      	movs	r3, #2
 8000576:	2500      	movs	r5, #0
 8000578:	4691      	mov	r9, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e693      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 800057e:	4651      	mov	r1, sl
 8000580:	4321      	orrs	r1, r4
 8000582:	d109      	bne.n	8000598 <__aeabi_ddiv+0x33c>
 8000584:	2302      	movs	r3, #2
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <__aeabi_ddiv+0x390>)
 800058c:	4691      	mov	r9, r2
 800058e:	469c      	mov	ip, r3
 8000590:	2400      	movs	r4, #0
 8000592:	2002      	movs	r0, #2
 8000594:	44e3      	add	fp, ip
 8000596:	e6a1      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000598:	2303      	movs	r3, #3
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <__aeabi_ddiv+0x390>)
 80005a0:	4691      	mov	r9, r2
 80005a2:	469c      	mov	ip, r3
 80005a4:	4651      	mov	r1, sl
 80005a6:	2003      	movs	r0, #3
 80005a8:	44e3      	add	fp, ip
 80005aa:	e697      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005ac:	220c      	movs	r2, #12
 80005ae:	469b      	mov	fp, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	46a0      	mov	r8, r4
 80005b4:	4691      	mov	r9, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e675      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e66d      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	08004830 	.word	0x08004830
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	000003f3 	.word	0x000003f3
 80005e8:	fffffc0d 	.word	0xfffffc0d
 80005ec:	fffff801 	.word	0xfffff801
 80005f0:	464a      	mov	r2, r9
 80005f2:	2301      	movs	r3, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2400      	movs	r4, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	e66e      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005fe:	2300      	movs	r3, #0
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	469a      	mov	sl, r3
 8000604:	2500      	movs	r5, #0
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <__aeabi_ddiv+0x5cc>)
 8000608:	0312      	lsls	r2, r2, #12
 800060a:	e67e      	b.n	800030a <__aeabi_ddiv+0xae>
 800060c:	2501      	movs	r5, #1
 800060e:	426d      	negs	r5, r5
 8000610:	2201      	movs	r2, #1
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	2a38      	cmp	r2, #56	; 0x38
 8000616:	dd00      	ble.n	800061a <__aeabi_ddiv+0x3be>
 8000618:	e674      	b.n	8000304 <__aeabi_ddiv+0xa8>
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_ddiv+0x3c4>
 800061e:	e0bd      	b.n	800079c <__aeabi_ddiv+0x540>
 8000620:	211f      	movs	r1, #31
 8000622:	4249      	negs	r1, r1
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	4641      	mov	r1, r8
 8000628:	40d9      	lsrs	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	2a20      	cmp	r2, #32
 800062e:	d004      	beq.n	800063a <__aeabi_ddiv+0x3de>
 8000630:	4641      	mov	r1, r8
 8000632:	4a7e      	ldr	r2, [pc, #504]	; (800082c <__aeabi_ddiv+0x5d0>)
 8000634:	445a      	add	r2, fp
 8000636:	4091      	lsls	r1, r2
 8000638:	430d      	orrs	r5, r1
 800063a:	0029      	movs	r1, r5
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	2307      	movs	r3, #7
 8000644:	001d      	movs	r5, r3
 8000646:	2200      	movs	r2, #0
 8000648:	400d      	ands	r5, r1
 800064a:	420b      	tst	r3, r1
 800064c:	d100      	bne.n	8000650 <__aeabi_ddiv+0x3f4>
 800064e:	e0d0      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000650:	220f      	movs	r2, #15
 8000652:	2300      	movs	r3, #0
 8000654:	400a      	ands	r2, r1
 8000656:	2a04      	cmp	r2, #4
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x400>
 800065a:	e0c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800065c:	1d0a      	adds	r2, r1, #4
 800065e:	428a      	cmp	r2, r1
 8000660:	4189      	sbcs	r1, r1
 8000662:	4249      	negs	r1, r1
 8000664:	185b      	adds	r3, r3, r1
 8000666:	0011      	movs	r1, r2
 8000668:	021a      	lsls	r2, r3, #8
 800066a:	d400      	bmi.n	800066e <__aeabi_ddiv+0x412>
 800066c:	e0be      	b.n	80007ec <__aeabi_ddiv+0x590>
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	2500      	movs	r5, #0
 8000674:	e649      	b.n	800030a <__aeabi_ddiv+0xae>
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	4643      	mov	r3, r8
 800067a:	0312      	lsls	r2, r2, #12
 800067c:	4213      	tst	r3, r2
 800067e:	d008      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000680:	4214      	tst	r4, r2
 8000682:	d106      	bne.n	8000692 <__aeabi_ddiv+0x436>
 8000684:	4322      	orrs	r2, r4
 8000686:	0312      	lsls	r2, r2, #12
 8000688:	46ba      	mov	sl, r7
 800068a:	000d      	movs	r5, r1
 800068c:	4b66      	ldr	r3, [pc, #408]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800068e:	0b12      	lsrs	r2, r2, #12
 8000690:	e63b      	b.n	800030a <__aeabi_ddiv+0xae>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4643      	mov	r3, r8
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	431a      	orrs	r2, r3
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	46b2      	mov	sl, r6
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <__aeabi_ddiv+0x5cc>)
 80006a0:	0b12      	lsrs	r2, r2, #12
 80006a2:	e632      	b.n	800030a <__aeabi_ddiv+0xae>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x44e>
 80006a8:	e702      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80006aa:	19a6      	adds	r6, r4, r6
 80006ac:	1e6a      	subs	r2, r5, #1
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d200      	bcs.n	80006b4 <__aeabi_ddiv+0x458>
 80006b2:	e089      	b.n	80007c8 <__aeabi_ddiv+0x56c>
 80006b4:	4286      	cmp	r6, r0
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e09f      	b.n	80007fa <__aeabi_ddiv+0x59e>
 80006ba:	d100      	bne.n	80006be <__aeabi_ddiv+0x462>
 80006bc:	e0af      	b.n	800081e <__aeabi_ddiv+0x5c2>
 80006be:	0015      	movs	r5, r2
 80006c0:	e6f4      	b.n	80004ac <__aeabi_ddiv+0x250>
 80006c2:	42a9      	cmp	r1, r5
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x46c>
 80006c6:	e63c      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006c8:	4643      	mov	r3, r8
 80006ca:	07de      	lsls	r6, r3, #31
 80006cc:	0858      	lsrs	r0, r3, #1
 80006ce:	086b      	lsrs	r3, r5, #1
 80006d0:	431e      	orrs	r6, r3
 80006d2:	07ed      	lsls	r5, r5, #31
 80006d4:	e63c      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006d6:	f000 ff8d 	bl	80015f4 <__clzsi2>
 80006da:	0001      	movs	r1, r0
 80006dc:	0002      	movs	r2, r0
 80006de:	3115      	adds	r1, #21
 80006e0:	3220      	adds	r2, #32
 80006e2:	291c      	cmp	r1, #28
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_ddiv+0x48c>
 80006e6:	e72c      	b.n	8000542 <__aeabi_ddiv+0x2e6>
 80006e8:	464b      	mov	r3, r9
 80006ea:	3808      	subs	r0, #8
 80006ec:	4083      	lsls	r3, r0
 80006ee:	2500      	movs	r5, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	e732      	b.n	800055a <__aeabi_ddiv+0x2fe>
 80006f4:	f000 ff7e 	bl	80015f4 <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	001a      	movs	r2, r3
 80006fc:	3215      	adds	r2, #21
 80006fe:	3020      	adds	r0, #32
 8000700:	2a1c      	cmp	r2, #28
 8000702:	dc00      	bgt.n	8000706 <__aeabi_ddiv+0x4aa>
 8000704:	e6ff      	b.n	8000506 <__aeabi_ddiv+0x2aa>
 8000706:	4654      	mov	r4, sl
 8000708:	3b08      	subs	r3, #8
 800070a:	2100      	movs	r1, #0
 800070c:	409c      	lsls	r4, r3
 800070e:	e705      	b.n	800051c <__aeabi_ddiv+0x2c0>
 8000710:	1936      	adds	r6, r6, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	42b4      	cmp	r4, r6
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4be>
 8000718:	e6a6      	b.n	8000468 <__aeabi_ddiv+0x20c>
 800071a:	42b2      	cmp	r2, r6
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x4c4>
 800071e:	e6a3      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000720:	1e83      	subs	r3, r0, #2
 8000722:	1936      	adds	r6, r6, r4
 8000724:	e6a0      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000726:	1909      	adds	r1, r1, r4
 8000728:	3d01      	subs	r5, #1
 800072a:	428c      	cmp	r4, r1
 800072c:	d900      	bls.n	8000730 <__aeabi_ddiv+0x4d4>
 800072e:	e68d      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000730:	428a      	cmp	r2, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x4da>
 8000734:	e68a      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000736:	1e85      	subs	r5, r0, #2
 8000738:	1909      	adds	r1, r1, r4
 800073a:	e687      	b.n	800044c <__aeabi_ddiv+0x1f0>
 800073c:	220f      	movs	r2, #15
 800073e:	402a      	ands	r2, r5
 8000740:	2a04      	cmp	r2, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 8000744:	e6bc      	b.n	80004c0 <__aeabi_ddiv+0x264>
 8000746:	1d29      	adds	r1, r5, #4
 8000748:	42a9      	cmp	r1, r5
 800074a:	41ad      	sbcs	r5, r5
 800074c:	426d      	negs	r5, r5
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	44a8      	add	r8, r5
 8000752:	e6b6      	b.n	80004c2 <__aeabi_ddiv+0x266>
 8000754:	42af      	cmp	r7, r5
 8000756:	d900      	bls.n	800075a <__aeabi_ddiv+0x4fe>
 8000758:	e662      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 800075a:	4281      	cmp	r1, r0
 800075c:	d804      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 800075e:	d000      	beq.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e65e      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000762:	42ae      	cmp	r6, r5
 8000764:	d800      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 8000766:	e65b      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000768:	2302      	movs	r3, #2
 800076a:	425b      	negs	r3, r3
 800076c:	469c      	mov	ip, r3
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	44e0      	add	r8, ip
 8000772:	469c      	mov	ip, r3
 8000774:	4465      	add	r5, ip
 8000776:	429d      	cmp	r5, r3
 8000778:	419b      	sbcs	r3, r3
 800077a:	425b      	negs	r3, r3
 800077c:	191b      	adds	r3, r3, r4
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	e64f      	b.n	8000422 <__aeabi_ddiv+0x1c6>
 8000782:	42b2      	cmp	r2, r6
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x52c>
 8000786:	e612      	b.n	80003ae <__aeabi_ddiv+0x152>
 8000788:	1e83      	subs	r3, r0, #2
 800078a:	1936      	adds	r6, r6, r4
 800078c:	e60f      	b.n	80003ae <__aeabi_ddiv+0x152>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e5fa      	b.n	800038a <__aeabi_ddiv+0x12e>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	4698      	mov	r8, r3
 8000798:	1909      	adds	r1, r1, r4
 800079a:	e5f6      	b.n	800038a <__aeabi_ddiv+0x12e>
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <__aeabi_ddiv+0x5d4>)
 800079e:	0028      	movs	r0, r5
 80007a0:	445b      	add	r3, fp
 80007a2:	4641      	mov	r1, r8
 80007a4:	409d      	lsls	r5, r3
 80007a6:	4099      	lsls	r1, r3
 80007a8:	40d0      	lsrs	r0, r2
 80007aa:	1e6b      	subs	r3, r5, #1
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	4301      	orrs	r1, r0
 80007b2:	4329      	orrs	r1, r5
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	074a      	lsls	r2, r1, #29
 80007b8:	d100      	bne.n	80007bc <__aeabi_ddiv+0x560>
 80007ba:	e755      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007bc:	220f      	movs	r2, #15
 80007be:	400a      	ands	r2, r1
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_ddiv+0x56a>
 80007c4:	e74a      	b.n	800065c <__aeabi_ddiv+0x400>
 80007c6:	e74f      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007c8:	0015      	movs	r5, r2
 80007ca:	4286      	cmp	r6, r0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_ddiv+0x574>
 80007ce:	e66d      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x57c>
 80007d6:	e669      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d8:	e66a      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <__aeabi_ddiv+0x5d8>)
 80007dc:	445b      	add	r3, fp
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_ddiv+0x588>
 80007e2:	e713      	b.n	800060c <__aeabi_ddiv+0x3b0>
 80007e4:	2501      	movs	r5, #1
 80007e6:	2100      	movs	r1, #0
 80007e8:	44a8      	add	r8, r5
 80007ea:	e66a      	b.n	80004c2 <__aeabi_ddiv+0x266>
 80007ec:	075d      	lsls	r5, r3, #29
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	0b1a      	lsrs	r2, r3, #12
 80007f2:	08c9      	lsrs	r1, r1, #3
 80007f4:	2300      	movs	r3, #0
 80007f6:	430d      	orrs	r5, r1
 80007f8:	e587      	b.n	800030a <__aeabi_ddiv+0xae>
 80007fa:	9900      	ldr	r1, [sp, #0]
 80007fc:	3d02      	subs	r5, #2
 80007fe:	004a      	lsls	r2, r1, #1
 8000800:	428a      	cmp	r2, r1
 8000802:	41bf      	sbcs	r7, r7
 8000804:	427f      	negs	r7, r7
 8000806:	193f      	adds	r7, r7, r4
 8000808:	19f6      	adds	r6, r6, r7
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	e7dd      	b.n	80007ca <__aeabi_ddiv+0x56e>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4643      	mov	r3, r8
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	431a      	orrs	r2, r3
 8000816:	0312      	lsls	r2, r2, #12
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800081a:	0b12      	lsrs	r2, r2, #12
 800081c:	e575      	b.n	800030a <__aeabi_ddiv+0xae>
 800081e:	9900      	ldr	r1, [sp, #0]
 8000820:	4299      	cmp	r1, r3
 8000822:	d3ea      	bcc.n	80007fa <__aeabi_ddiv+0x59e>
 8000824:	0015      	movs	r5, r2
 8000826:	e7d3      	b.n	80007d0 <__aeabi_ddiv+0x574>
 8000828:	000007ff 	.word	0x000007ff
 800082c:	0000043e 	.word	0x0000043e
 8000830:	0000041e 	.word	0x0000041e
 8000834:	000003ff 	.word	0x000003ff

08000838 <__aeabi_dmul>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	4645      	mov	r5, r8
 800083c:	46de      	mov	lr, fp
 800083e:	4657      	mov	r7, sl
 8000840:	464e      	mov	r6, r9
 8000842:	b5e0      	push	{r5, r6, r7, lr}
 8000844:	001f      	movs	r7, r3
 8000846:	030b      	lsls	r3, r1, #12
 8000848:	0b1b      	lsrs	r3, r3, #12
 800084a:	469b      	mov	fp, r3
 800084c:	004d      	lsls	r5, r1, #1
 800084e:	0fcb      	lsrs	r3, r1, #31
 8000850:	0004      	movs	r4, r0
 8000852:	4691      	mov	r9, r2
 8000854:	4698      	mov	r8, r3
 8000856:	b087      	sub	sp, #28
 8000858:	0d6d      	lsrs	r5, r5, #21
 800085a:	d100      	bne.n	800085e <__aeabi_dmul+0x26>
 800085c:	e1cd      	b.n	8000bfa <__aeabi_dmul+0x3c2>
 800085e:	4bce      	ldr	r3, [pc, #824]	; (8000b98 <__aeabi_dmul+0x360>)
 8000860:	429d      	cmp	r5, r3
 8000862:	d100      	bne.n	8000866 <__aeabi_dmul+0x2e>
 8000864:	e1e9      	b.n	8000c3a <__aeabi_dmul+0x402>
 8000866:	465a      	mov	r2, fp
 8000868:	0f43      	lsrs	r3, r0, #29
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	4313      	orrs	r3, r2
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0412      	lsls	r2, r2, #16
 8000872:	431a      	orrs	r2, r3
 8000874:	00c3      	lsls	r3, r0, #3
 8000876:	469a      	mov	sl, r3
 8000878:	4bc8      	ldr	r3, [pc, #800]	; (8000b9c <__aeabi_dmul+0x364>)
 800087a:	4693      	mov	fp, r2
 800087c:	469c      	mov	ip, r3
 800087e:	2300      	movs	r3, #0
 8000880:	2600      	movs	r6, #0
 8000882:	4465      	add	r5, ip
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	033c      	lsls	r4, r7, #12
 8000888:	007b      	lsls	r3, r7, #1
 800088a:	4648      	mov	r0, r9
 800088c:	0b24      	lsrs	r4, r4, #12
 800088e:	0d5b      	lsrs	r3, r3, #21
 8000890:	0fff      	lsrs	r7, r7, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_dmul+0x60>
 8000896:	e189      	b.n	8000bac <__aeabi_dmul+0x374>
 8000898:	4abf      	ldr	r2, [pc, #764]	; (8000b98 <__aeabi_dmul+0x360>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x9a>
 800089e:	0f42      	lsrs	r2, r0, #29
 80008a0:	00e4      	lsls	r4, r4, #3
 80008a2:	4322      	orrs	r2, r4
 80008a4:	2480      	movs	r4, #128	; 0x80
 80008a6:	0424      	lsls	r4, r4, #16
 80008a8:	4314      	orrs	r4, r2
 80008aa:	4abc      	ldr	r2, [pc, #752]	; (8000b9c <__aeabi_dmul+0x364>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4694      	mov	ip, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	4463      	add	r3, ip
 80008b4:	195b      	adds	r3, r3, r5
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	9b01      	ldr	r3, [sp, #4]
 80008ba:	407a      	eors	r2, r7
 80008bc:	3301      	adds	r3, #1
 80008be:	00c0      	lsls	r0, r0, #3
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2e0a      	cmp	r6, #10
 80008c6:	dd1c      	ble.n	8000902 <__aeabi_dmul+0xca>
 80008c8:	003a      	movs	r2, r7
 80008ca:	2e0b      	cmp	r6, #11
 80008cc:	d05e      	beq.n	800098c <__aeabi_dmul+0x154>
 80008ce:	4647      	mov	r7, r8
 80008d0:	e056      	b.n	8000980 <__aeabi_dmul+0x148>
 80008d2:	4649      	mov	r1, r9
 80008d4:	4bb0      	ldr	r3, [pc, #704]	; (8000b98 <__aeabi_dmul+0x360>)
 80008d6:	4321      	orrs	r1, r4
 80008d8:	18eb      	adds	r3, r5, r3
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	2900      	cmp	r1, #0
 80008de:	d12a      	bne.n	8000936 <__aeabi_dmul+0xfe>
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	2202      	movs	r2, #2
 80008e4:	0100      	lsls	r0, r0, #4
 80008e6:	002b      	movs	r3, r5
 80008e8:	4684      	mov	ip, r0
 80008ea:	4316      	orrs	r6, r2
 80008ec:	4642      	mov	r2, r8
 80008ee:	4463      	add	r3, ip
 80008f0:	407a      	eors	r2, r7
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2e0a      	cmp	r6, #10
 80008f8:	dd00      	ble.n	80008fc <__aeabi_dmul+0xc4>
 80008fa:	e231      	b.n	8000d60 <__aeabi_dmul+0x528>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	2102      	movs	r1, #2
 8000902:	2e02      	cmp	r6, #2
 8000904:	dc26      	bgt.n	8000954 <__aeabi_dmul+0x11c>
 8000906:	3e01      	subs	r6, #1
 8000908:	2e01      	cmp	r6, #1
 800090a:	d852      	bhi.n	80009b2 <__aeabi_dmul+0x17a>
 800090c:	2902      	cmp	r1, #2
 800090e:	d04c      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000910:	2901      	cmp	r1, #1
 8000912:	d000      	beq.n	8000916 <__aeabi_dmul+0xde>
 8000914:	e118      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000916:	2300      	movs	r3, #0
 8000918:	2400      	movs	r4, #0
 800091a:	2500      	movs	r5, #0
 800091c:	051b      	lsls	r3, r3, #20
 800091e:	4323      	orrs	r3, r4
 8000920:	07d2      	lsls	r2, r2, #31
 8000922:	4313      	orrs	r3, r2
 8000924:	0028      	movs	r0, r5
 8000926:	0019      	movs	r1, r3
 8000928:	b007      	add	sp, #28
 800092a:	bcf0      	pop	{r4, r5, r6, r7}
 800092c:	46bb      	mov	fp, r7
 800092e:	46b2      	mov	sl, r6
 8000930:	46a9      	mov	r9, r5
 8000932:	46a0      	mov	r8, r4
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	2203      	movs	r2, #3
 800093a:	0109      	lsls	r1, r1, #4
 800093c:	002b      	movs	r3, r5
 800093e:	468c      	mov	ip, r1
 8000940:	4316      	orrs	r6, r2
 8000942:	4642      	mov	r2, r8
 8000944:	4463      	add	r3, ip
 8000946:	407a      	eors	r2, r7
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2e0a      	cmp	r6, #10
 800094e:	dd00      	ble.n	8000952 <__aeabi_dmul+0x11a>
 8000950:	e228      	b.n	8000da4 <__aeabi_dmul+0x56c>
 8000952:	2103      	movs	r1, #3
 8000954:	2501      	movs	r5, #1
 8000956:	40b5      	lsls	r5, r6
 8000958:	46ac      	mov	ip, r5
 800095a:	26a6      	movs	r6, #166	; 0xa6
 800095c:	4663      	mov	r3, ip
 800095e:	00f6      	lsls	r6, r6, #3
 8000960:	4035      	ands	r5, r6
 8000962:	4233      	tst	r3, r6
 8000964:	d10b      	bne.n	800097e <__aeabi_dmul+0x146>
 8000966:	2690      	movs	r6, #144	; 0x90
 8000968:	00b6      	lsls	r6, r6, #2
 800096a:	4233      	tst	r3, r6
 800096c:	d118      	bne.n	80009a0 <__aeabi_dmul+0x168>
 800096e:	3eb9      	subs	r6, #185	; 0xb9
 8000970:	3eff      	subs	r6, #255	; 0xff
 8000972:	421e      	tst	r6, r3
 8000974:	d01d      	beq.n	80009b2 <__aeabi_dmul+0x17a>
 8000976:	46a3      	mov	fp, r4
 8000978:	4682      	mov	sl, r0
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	e000      	b.n	8000980 <__aeabi_dmul+0x148>
 800097e:	0017      	movs	r7, r2
 8000980:	9900      	ldr	r1, [sp, #0]
 8000982:	003a      	movs	r2, r7
 8000984:	2902      	cmp	r1, #2
 8000986:	d010      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000988:	465c      	mov	r4, fp
 800098a:	4650      	mov	r0, sl
 800098c:	2903      	cmp	r1, #3
 800098e:	d1bf      	bne.n	8000910 <__aeabi_dmul+0xd8>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	031b      	lsls	r3, r3, #12
 8000994:	431c      	orrs	r4, r3
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	0005      	movs	r5, r0
 800099a:	4b7f      	ldr	r3, [pc, #508]	; (8000b98 <__aeabi_dmul+0x360>)
 800099c:	0b24      	lsrs	r4, r4, #12
 800099e:	e7bd      	b.n	800091c <__aeabi_dmul+0xe4>
 80009a0:	2480      	movs	r4, #128	; 0x80
 80009a2:	2200      	movs	r2, #0
 80009a4:	4b7c      	ldr	r3, [pc, #496]	; (8000b98 <__aeabi_dmul+0x360>)
 80009a6:	0324      	lsls	r4, r4, #12
 80009a8:	e7b8      	b.n	800091c <__aeabi_dmul+0xe4>
 80009aa:	2400      	movs	r4, #0
 80009ac:	2500      	movs	r5, #0
 80009ae:	4b7a      	ldr	r3, [pc, #488]	; (8000b98 <__aeabi_dmul+0x360>)
 80009b0:	e7b4      	b.n	800091c <__aeabi_dmul+0xe4>
 80009b2:	4653      	mov	r3, sl
 80009b4:	041e      	lsls	r6, r3, #16
 80009b6:	0c36      	lsrs	r6, r6, #16
 80009b8:	0c1f      	lsrs	r7, r3, #16
 80009ba:	0033      	movs	r3, r6
 80009bc:	0c01      	lsrs	r1, r0, #16
 80009be:	0400      	lsls	r0, r0, #16
 80009c0:	0c00      	lsrs	r0, r0, #16
 80009c2:	4343      	muls	r3, r0
 80009c4:	4698      	mov	r8, r3
 80009c6:	0003      	movs	r3, r0
 80009c8:	437b      	muls	r3, r7
 80009ca:	4699      	mov	r9, r3
 80009cc:	0033      	movs	r3, r6
 80009ce:	434b      	muls	r3, r1
 80009d0:	469c      	mov	ip, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	000d      	movs	r5, r1
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	469a      	mov	sl, r3
 80009da:	437d      	muls	r5, r7
 80009dc:	44cc      	add	ip, r9
 80009de:	44d4      	add	ip, sl
 80009e0:	9500      	str	r5, [sp, #0]
 80009e2:	45e1      	cmp	r9, ip
 80009e4:	d904      	bls.n	80009f0 <__aeabi_dmul+0x1b8>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	4699      	mov	r9, r3
 80009ec:	444d      	add	r5, r9
 80009ee:	9500      	str	r5, [sp, #0]
 80009f0:	4663      	mov	r3, ip
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	001d      	movs	r5, r3
 80009f6:	4663      	mov	r3, ip
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	469c      	mov	ip, r3
 80009fc:	4643      	mov	r3, r8
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	4698      	mov	r8, r3
 8000a04:	4663      	mov	r3, ip
 8000a06:	4443      	add	r3, r8
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	0c23      	lsrs	r3, r4, #16
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	0424      	lsls	r4, r4, #16
 8000a12:	0c24      	lsrs	r4, r4, #16
 8000a14:	4363      	muls	r3, r4
 8000a16:	469c      	mov	ip, r3
 8000a18:	0023      	movs	r3, r4
 8000a1a:	437b      	muls	r3, r7
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	4643      	mov	r3, r8
 8000a20:	435e      	muls	r6, r3
 8000a22:	435f      	muls	r7, r3
 8000a24:	444e      	add	r6, r9
 8000a26:	4663      	mov	r3, ip
 8000a28:	46b2      	mov	sl, r6
 8000a2a:	0c1e      	lsrs	r6, r3, #16
 8000a2c:	4456      	add	r6, sl
 8000a2e:	45b1      	cmp	r9, r6
 8000a30:	d903      	bls.n	8000a3a <__aeabi_dmul+0x202>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	4699      	mov	r9, r3
 8000a38:	444f      	add	r7, r9
 8000a3a:	0c33      	lsrs	r3, r6, #16
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	003b      	movs	r3, r7
 8000a40:	444b      	add	r3, r9
 8000a42:	9305      	str	r3, [sp, #20]
 8000a44:	4663      	mov	r3, ip
 8000a46:	46ac      	mov	ip, r5
 8000a48:	041f      	lsls	r7, r3, #16
 8000a4a:	0c3f      	lsrs	r7, r7, #16
 8000a4c:	0436      	lsls	r6, r6, #16
 8000a4e:	19f6      	adds	r6, r6, r7
 8000a50:	44b4      	add	ip, r6
 8000a52:	4663      	mov	r3, ip
 8000a54:	9304      	str	r3, [sp, #16]
 8000a56:	465b      	mov	r3, fp
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	465b      	mov	r3, fp
 8000a5e:	041f      	lsls	r7, r3, #16
 8000a60:	0c3f      	lsrs	r7, r7, #16
 8000a62:	003b      	movs	r3, r7
 8000a64:	4343      	muls	r3, r0
 8000a66:	4699      	mov	r9, r3
 8000a68:	4663      	mov	r3, ip
 8000a6a:	4343      	muls	r3, r0
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	464b      	mov	r3, r9
 8000a70:	4660      	mov	r0, ip
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	469b      	mov	fp, r3
 8000a76:	4348      	muls	r0, r1
 8000a78:	4379      	muls	r1, r7
 8000a7a:	4451      	add	r1, sl
 8000a7c:	4459      	add	r1, fp
 8000a7e:	458a      	cmp	sl, r1
 8000a80:	d903      	bls.n	8000a8a <__aeabi_dmul+0x252>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	469a      	mov	sl, r3
 8000a88:	4450      	add	r0, sl
 8000a8a:	0c0b      	lsrs	r3, r1, #16
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	464b      	mov	r3, r9
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	4699      	mov	r9, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	4363      	muls	r3, r4
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	4645      	mov	r5, r8
 8000a9e:	4449      	add	r1, r9
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	435c      	muls	r4, r3
 8000aa6:	436b      	muls	r3, r5
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	4698      	mov	r8, r3
 8000ab0:	436f      	muls	r7, r5
 8000ab2:	193f      	adds	r7, r7, r4
 8000ab4:	4447      	add	r7, r8
 8000ab6:	4450      	add	r0, sl
 8000ab8:	42bc      	cmp	r4, r7
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_dmul+0x28c>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	44c4      	add	ip, r8
 8000ac4:	9b04      	ldr	r3, [sp, #16]
 8000ac6:	9d00      	ldr	r5, [sp, #0]
 8000ac8:	4698      	mov	r8, r3
 8000aca:	4445      	add	r5, r8
 8000acc:	42b5      	cmp	r5, r6
 8000ace:	41b6      	sbcs	r6, r6
 8000ad0:	4273      	negs	r3, r6
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	041e      	lsls	r6, r3, #16
 8000ad8:	9b05      	ldr	r3, [sp, #20]
 8000ada:	043c      	lsls	r4, r7, #16
 8000adc:	4699      	mov	r9, r3
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	19a4      	adds	r4, r4, r6
 8000ae2:	444c      	add	r4, r9
 8000ae4:	46a1      	mov	r9, r4
 8000ae6:	4683      	mov	fp, r0
 8000ae8:	186e      	adds	r6, r5, r1
 8000aea:	44c1      	add	r9, r8
 8000aec:	428e      	cmp	r6, r1
 8000aee:	4189      	sbcs	r1, r1
 8000af0:	44cb      	add	fp, r9
 8000af2:	465d      	mov	r5, fp
 8000af4:	4249      	negs	r1, r1
 8000af6:	186d      	adds	r5, r5, r1
 8000af8:	429c      	cmp	r4, r3
 8000afa:	41a4      	sbcs	r4, r4
 8000afc:	45c1      	cmp	r9, r8
 8000afe:	419b      	sbcs	r3, r3
 8000b00:	4583      	cmp	fp, r0
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	428d      	cmp	r5, r1
 8000b06:	4189      	sbcs	r1, r1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	4264      	negs	r4, r4
 8000b0c:	431c      	orrs	r4, r3
 8000b0e:	4240      	negs	r0, r0
 8000b10:	9b03      	ldr	r3, [sp, #12]
 8000b12:	4249      	negs	r1, r1
 8000b14:	4301      	orrs	r1, r0
 8000b16:	0270      	lsls	r0, r6, #9
 8000b18:	0c3f      	lsrs	r7, r7, #16
 8000b1a:	4318      	orrs	r0, r3
 8000b1c:	19e4      	adds	r4, r4, r7
 8000b1e:	1e47      	subs	r7, r0, #1
 8000b20:	41b8      	sbcs	r0, r7
 8000b22:	1864      	adds	r4, r4, r1
 8000b24:	4464      	add	r4, ip
 8000b26:	0df6      	lsrs	r6, r6, #23
 8000b28:	0261      	lsls	r1, r4, #9
 8000b2a:	4330      	orrs	r0, r6
 8000b2c:	0dec      	lsrs	r4, r5, #23
 8000b2e:	026e      	lsls	r6, r5, #9
 8000b30:	430c      	orrs	r4, r1
 8000b32:	4330      	orrs	r0, r6
 8000b34:	01c9      	lsls	r1, r1, #7
 8000b36:	d400      	bmi.n	8000b3a <__aeabi_dmul+0x302>
 8000b38:	e0f1      	b.n	8000d1e <__aeabi_dmul+0x4e6>
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	4001      	ands	r1, r0
 8000b40:	430b      	orrs	r3, r1
 8000b42:	07e0      	lsls	r0, r4, #31
 8000b44:	4318      	orrs	r0, r3
 8000b46:	0864      	lsrs	r4, r4, #1
 8000b48:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <__aeabi_dmul+0x368>)
 8000b4a:	9b02      	ldr	r3, [sp, #8]
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	4463      	add	r3, ip
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dmul+0x31e>
 8000b54:	e097      	b.n	8000c86 <__aeabi_dmul+0x44e>
 8000b56:	0741      	lsls	r1, r0, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	4001      	ands	r1, r0
 8000b5e:	2904      	cmp	r1, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b62:	1d01      	adds	r1, r0, #4
 8000b64:	4281      	cmp	r1, r0
 8000b66:	4180      	sbcs	r0, r0
 8000b68:	4240      	negs	r0, r0
 8000b6a:	1824      	adds	r4, r4, r0
 8000b6c:	0008      	movs	r0, r1
 8000b6e:	01e1      	lsls	r1, r4, #7
 8000b70:	d506      	bpl.n	8000b80 <__aeabi_dmul+0x348>
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	00c9      	lsls	r1, r1, #3
 8000b76:	468c      	mov	ip, r1
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <__aeabi_dmul+0x36c>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	9b02      	ldr	r3, [sp, #8]
 8000b7e:	4463      	add	r3, ip
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <__aeabi_dmul+0x370>)
 8000b82:	428b      	cmp	r3, r1
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dmul+0x350>
 8000b86:	e710      	b.n	80009aa <__aeabi_dmul+0x172>
 8000b88:	0761      	lsls	r1, r4, #29
 8000b8a:	08c5      	lsrs	r5, r0, #3
 8000b8c:	0264      	lsls	r4, r4, #9
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	430d      	orrs	r5, r1
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	e6c1      	b.n	800091c <__aeabi_dmul+0xe4>
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	fffffc01 	.word	0xfffffc01
 8000ba0:	000003ff 	.word	0x000003ff
 8000ba4:	feffffff 	.word	0xfeffffff
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	464b      	mov	r3, r9
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	d059      	beq.n	8000c66 <__aeabi_dmul+0x42e>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dmul+0x380>
 8000bb6:	e0a3      	b.n	8000d00 <__aeabi_dmul+0x4c8>
 8000bb8:	0020      	movs	r0, r4
 8000bba:	f000 fd1b 	bl	80015f4 <__clzsi2>
 8000bbe:	0001      	movs	r1, r0
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	390b      	subs	r1, #11
 8000bc4:	221d      	movs	r2, #29
 8000bc6:	1a52      	subs	r2, r2, r1
 8000bc8:	4649      	mov	r1, r9
 8000bca:	0018      	movs	r0, r3
 8000bcc:	40d1      	lsrs	r1, r2
 8000bce:	464a      	mov	r2, r9
 8000bd0:	3808      	subs	r0, #8
 8000bd2:	4082      	lsls	r2, r0
 8000bd4:	4084      	lsls	r4, r0
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	430c      	orrs	r4, r1
 8000bda:	4a74      	ldr	r2, [pc, #464]	; (8000dac <__aeabi_dmul+0x574>)
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	4694      	mov	ip, r2
 8000be0:	4642      	mov	r2, r8
 8000be2:	4463      	add	r3, ip
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	9b01      	ldr	r3, [sp, #4]
 8000be8:	407a      	eors	r2, r7
 8000bea:	3301      	adds	r3, #1
 8000bec:	2100      	movs	r1, #0
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	2e0a      	cmp	r6, #10
 8000bf4:	dd00      	ble.n	8000bf8 <__aeabi_dmul+0x3c0>
 8000bf6:	e667      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000bf8:	e683      	b.n	8000902 <__aeabi_dmul+0xca>
 8000bfa:	465b      	mov	r3, fp
 8000bfc:	4303      	orrs	r3, r0
 8000bfe:	469a      	mov	sl, r3
 8000c00:	d02a      	beq.n	8000c58 <__aeabi_dmul+0x420>
 8000c02:	465b      	mov	r3, fp
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d06d      	beq.n	8000ce4 <__aeabi_dmul+0x4ac>
 8000c08:	4658      	mov	r0, fp
 8000c0a:	f000 fcf3 	bl	80015f4 <__clzsi2>
 8000c0e:	0001      	movs	r1, r0
 8000c10:	0003      	movs	r3, r0
 8000c12:	390b      	subs	r1, #11
 8000c14:	221d      	movs	r2, #29
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	0021      	movs	r1, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	465d      	mov	r5, fp
 8000c1e:	40d1      	lsrs	r1, r2
 8000c20:	3808      	subs	r0, #8
 8000c22:	4085      	lsls	r5, r0
 8000c24:	000a      	movs	r2, r1
 8000c26:	4084      	lsls	r4, r0
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	4693      	mov	fp, r2
 8000c2c:	46a2      	mov	sl, r4
 8000c2e:	4d5f      	ldr	r5, [pc, #380]	; (8000dac <__aeabi_dmul+0x574>)
 8000c30:	2600      	movs	r6, #0
 8000c32:	1aed      	subs	r5, r5, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	e625      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c3a:	465b      	mov	r3, fp
 8000c3c:	4303      	orrs	r3, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	d105      	bne.n	8000c4e <__aeabi_dmul+0x416>
 8000c42:	2300      	movs	r3, #0
 8000c44:	469b      	mov	fp, r3
 8000c46:	3302      	adds	r3, #2
 8000c48:	2608      	movs	r6, #8
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	e61b      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	4682      	mov	sl, r0
 8000c52:	260c      	movs	r6, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	e616      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	2604      	movs	r6, #4
 8000c60:	2500      	movs	r5, #0
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e60f      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c66:	4642      	mov	r2, r8
 8000c68:	3301      	adds	r3, #1
 8000c6a:	9501      	str	r5, [sp, #4]
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	9b01      	ldr	r3, [sp, #4]
 8000c70:	407a      	eors	r2, r7
 8000c72:	3301      	adds	r3, #1
 8000c74:	2400      	movs	r4, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2e0a      	cmp	r6, #10
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dmul+0x44c>
 8000c82:	e621      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000c84:	e63d      	b.n	8000902 <__aeabi_dmul+0xca>
 8000c86:	2101      	movs	r1, #1
 8000c88:	1ac9      	subs	r1, r1, r3
 8000c8a:	2938      	cmp	r1, #56	; 0x38
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_dmul+0x458>
 8000c8e:	e642      	b.n	8000916 <__aeabi_dmul+0xde>
 8000c90:	291f      	cmp	r1, #31
 8000c92:	dd47      	ble.n	8000d24 <__aeabi_dmul+0x4ec>
 8000c94:	261f      	movs	r6, #31
 8000c96:	0025      	movs	r5, r4
 8000c98:	4276      	negs	r6, r6
 8000c9a:	1af3      	subs	r3, r6, r3
 8000c9c:	40dd      	lsrs	r5, r3
 8000c9e:	002b      	movs	r3, r5
 8000ca0:	2920      	cmp	r1, #32
 8000ca2:	d005      	beq.n	8000cb0 <__aeabi_dmul+0x478>
 8000ca4:	4942      	ldr	r1, [pc, #264]	; (8000db0 <__aeabi_dmul+0x578>)
 8000ca6:	9d02      	ldr	r5, [sp, #8]
 8000ca8:	468c      	mov	ip, r1
 8000caa:	4465      	add	r5, ip
 8000cac:	40ac      	lsls	r4, r5
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	1e41      	subs	r1, r0, #1
 8000cb2:	4188      	sbcs	r0, r1
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	001d      	movs	r5, r3
 8000cba:	2400      	movs	r4, #0
 8000cbc:	4005      	ands	r5, r0
 8000cbe:	4203      	tst	r3, r0
 8000cc0:	d04a      	beq.n	8000d58 <__aeabi_dmul+0x520>
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d042      	beq.n	8000d52 <__aeabi_dmul+0x51a>
 8000ccc:	1d03      	adds	r3, r0, #4
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	4180      	sbcs	r0, r0
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	1824      	adds	r4, r4, r0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	0223      	lsls	r3, r4, #8
 8000cda:	d53a      	bpl.n	8000d52 <__aeabi_dmul+0x51a>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e61b      	b.n	800091c <__aeabi_dmul+0xe4>
 8000ce4:	f000 fc86 	bl	80015f4 <__clzsi2>
 8000ce8:	0001      	movs	r1, r0
 8000cea:	0003      	movs	r3, r0
 8000cec:	3115      	adds	r1, #21
 8000cee:	3320      	adds	r3, #32
 8000cf0:	291c      	cmp	r1, #28
 8000cf2:	dd8f      	ble.n	8000c14 <__aeabi_dmul+0x3dc>
 8000cf4:	3808      	subs	r0, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4084      	lsls	r4, r0
 8000cfa:	4692      	mov	sl, r2
 8000cfc:	46a3      	mov	fp, r4
 8000cfe:	e796      	b.n	8000c2e <__aeabi_dmul+0x3f6>
 8000d00:	f000 fc78 	bl	80015f4 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0003      	movs	r3, r0
 8000d08:	3115      	adds	r1, #21
 8000d0a:	3320      	adds	r3, #32
 8000d0c:	291c      	cmp	r1, #28
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dmul+0x4da>
 8000d10:	e758      	b.n	8000bc4 <__aeabi_dmul+0x38c>
 8000d12:	0002      	movs	r2, r0
 8000d14:	464c      	mov	r4, r9
 8000d16:	3a08      	subs	r2, #8
 8000d18:	2000      	movs	r0, #0
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	e75d      	b.n	8000bda <__aeabi_dmul+0x3a2>
 8000d1e:	9b01      	ldr	r3, [sp, #4]
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	e711      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <__aeabi_dmul+0x57c>)
 8000d26:	0026      	movs	r6, r4
 8000d28:	469c      	mov	ip, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	9d02      	ldr	r5, [sp, #8]
 8000d2e:	40cb      	lsrs	r3, r1
 8000d30:	4465      	add	r5, ip
 8000d32:	40ae      	lsls	r6, r5
 8000d34:	431e      	orrs	r6, r3
 8000d36:	0003      	movs	r3, r0
 8000d38:	40ab      	lsls	r3, r5
 8000d3a:	1e58      	subs	r0, r3, #1
 8000d3c:	4183      	sbcs	r3, r0
 8000d3e:	0030      	movs	r0, r6
 8000d40:	4318      	orrs	r0, r3
 8000d42:	40cc      	lsrs	r4, r1
 8000d44:	0743      	lsls	r3, r0, #29
 8000d46:	d0c7      	beq.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d48:	230f      	movs	r3, #15
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d1bd      	bne.n	8000ccc <__aeabi_dmul+0x494>
 8000d50:	e7c2      	b.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d52:	0765      	lsls	r5, r4, #29
 8000d54:	0264      	lsls	r4, r4, #9
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	e5dd      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d60:	2500      	movs	r5, #0
 8000d62:	2302      	movs	r3, #2
 8000d64:	2e0f      	cmp	r6, #15
 8000d66:	d10c      	bne.n	8000d82 <__aeabi_dmul+0x54a>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	465b      	mov	r3, fp
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	4223      	tst	r3, r4
 8000d70:	d00e      	beq.n	8000d90 <__aeabi_dmul+0x558>
 8000d72:	4221      	tst	r1, r4
 8000d74:	d10c      	bne.n	8000d90 <__aeabi_dmul+0x558>
 8000d76:	430c      	orrs	r4, r1
 8000d78:	0324      	lsls	r4, r4, #12
 8000d7a:	003a      	movs	r2, r7
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <__aeabi_dmul+0x580>)
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	e5cc      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d82:	2e0b      	cmp	r6, #11
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dmul+0x550>
 8000d86:	e5a2      	b.n	80008ce <__aeabi_dmul+0x96>
 8000d88:	468b      	mov	fp, r1
 8000d8a:	46aa      	mov	sl, r5
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	e5f7      	b.n	8000980 <__aeabi_dmul+0x148>
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	465b      	mov	r3, fp
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	431c      	orrs	r4, r3
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	4655      	mov	r5, sl
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <__aeabi_dmul+0x580>)
 8000da0:	0b24      	lsrs	r4, r4, #12
 8000da2:	e5bb      	b.n	800091c <__aeabi_dmul+0xe4>
 8000da4:	464d      	mov	r5, r9
 8000da6:	0021      	movs	r1, r4
 8000da8:	2303      	movs	r3, #3
 8000daa:	e7db      	b.n	8000d64 <__aeabi_dmul+0x52c>
 8000dac:	fffffc0d 	.word	0xfffffc0d
 8000db0:	0000043e 	.word	0x0000043e
 8000db4:	0000041e 	.word	0x0000041e
 8000db8:	000007ff 	.word	0x000007ff

08000dbc <__aeabi_dsub>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	4657      	mov	r7, sl
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	46de      	mov	lr, fp
 8000dc6:	b5e0      	push	{r5, r6, r7, lr}
 8000dc8:	000d      	movs	r5, r1
 8000dca:	0004      	movs	r4, r0
 8000dcc:	0019      	movs	r1, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	032b      	lsls	r3, r5, #12
 8000dd2:	0a5b      	lsrs	r3, r3, #9
 8000dd4:	0f62      	lsrs	r2, r4, #29
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	00e3      	lsls	r3, r4, #3
 8000dda:	030c      	lsls	r4, r1, #12
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0f47      	lsrs	r7, r0, #29
 8000de0:	4327      	orrs	r7, r4
 8000de2:	4cd0      	ldr	r4, [pc, #832]	; (8001124 <__aeabi_dsub+0x368>)
 8000de4:	006e      	lsls	r6, r5, #1
 8000de6:	4691      	mov	r9, r2
 8000de8:	b083      	sub	sp, #12
 8000dea:	004a      	lsls	r2, r1, #1
 8000dec:	00c0      	lsls	r0, r0, #3
 8000dee:	4698      	mov	r8, r3
 8000df0:	46a2      	mov	sl, r4
 8000df2:	0d76      	lsrs	r6, r6, #21
 8000df4:	0fed      	lsrs	r5, r5, #31
 8000df6:	0d52      	lsrs	r2, r2, #21
 8000df8:	0fc9      	lsrs	r1, r1, #31
 8000dfa:	9001      	str	r0, [sp, #4]
 8000dfc:	42a2      	cmp	r2, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dsub+0x46>
 8000e00:	e0b9      	b.n	8000f76 <__aeabi_dsub+0x1ba>
 8000e02:	2401      	movs	r4, #1
 8000e04:	4061      	eors	r1, r4
 8000e06:	468b      	mov	fp, r1
 8000e08:	428d      	cmp	r5, r1
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dsub+0x52>
 8000e0c:	e08d      	b.n	8000f2a <__aeabi_dsub+0x16e>
 8000e0e:	1ab4      	subs	r4, r6, r2
 8000e10:	46a4      	mov	ip, r4
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	dc00      	bgt.n	8000e18 <__aeabi_dsub+0x5c>
 8000e16:	e0b7      	b.n	8000f88 <__aeabi_dsub+0x1cc>
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dsub+0x62>
 8000e1c:	e0cb      	b.n	8000fb6 <__aeabi_dsub+0x1fa>
 8000e1e:	4ac1      	ldr	r2, [pc, #772]	; (8001124 <__aeabi_dsub+0x368>)
 8000e20:	4296      	cmp	r6, r2
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dsub+0x6a>
 8000e24:	e186      	b.n	8001134 <__aeabi_dsub+0x378>
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0412      	lsls	r2, r2, #16
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	2a38      	cmp	r2, #56	; 0x38
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_dsub+0x78>
 8000e32:	e1a4      	b.n	800117e <__aeabi_dsub+0x3c2>
 8000e34:	2a1f      	cmp	r2, #31
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dsub+0x7e>
 8000e38:	e21d      	b.n	8001276 <__aeabi_dsub+0x4ba>
 8000e3a:	4661      	mov	r1, ip
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	003c      	movs	r4, r7
 8000e40:	1a52      	subs	r2, r2, r1
 8000e42:	0001      	movs	r1, r0
 8000e44:	4090      	lsls	r0, r2
 8000e46:	4094      	lsls	r4, r2
 8000e48:	1e42      	subs	r2, r0, #1
 8000e4a:	4190      	sbcs	r0, r2
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	46a0      	mov	r8, r4
 8000e50:	4664      	mov	r4, ip
 8000e52:	40d7      	lsrs	r7, r2
 8000e54:	464a      	mov	r2, r9
 8000e56:	40e1      	lsrs	r1, r4
 8000e58:	4644      	mov	r4, r8
 8000e5a:	1bd2      	subs	r2, r2, r7
 8000e5c:	4691      	mov	r9, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	4304      	orrs	r4, r0
 8000e62:	1b1c      	subs	r4, r3, r4
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	4192      	sbcs	r2, r2
 8000e68:	464b      	mov	r3, r9
 8000e6a:	4252      	negs	r2, r2
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	469a      	mov	sl, r3
 8000e70:	4653      	mov	r3, sl
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dsub+0xbc>
 8000e76:	e12b      	b.n	80010d0 <__aeabi_dsub+0x314>
 8000e78:	4653      	mov	r3, sl
 8000e7a:	025a      	lsls	r2, r3, #9
 8000e7c:	0a53      	lsrs	r3, r2, #9
 8000e7e:	469a      	mov	sl, r3
 8000e80:	4653      	mov	r3, sl
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dsub+0xcc>
 8000e86:	e166      	b.n	8001156 <__aeabi_dsub+0x39a>
 8000e88:	4650      	mov	r0, sl
 8000e8a:	f000 fbb3 	bl	80015f4 <__clzsi2>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	3b08      	subs	r3, #8
 8000e92:	2220      	movs	r2, #32
 8000e94:	0020      	movs	r0, r4
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4651      	mov	r1, sl
 8000e9a:	40d0      	lsrs	r0, r2
 8000e9c:	4099      	lsls	r1, r3
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	409c      	lsls	r4, r3
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dsub+0xee>
 8000ea8:	e164      	b.n	8001174 <__aeabi_dsub+0x3b8>
 8000eaa:	1b9b      	subs	r3, r3, r6
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	291f      	cmp	r1, #31
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dsub+0xf8>
 8000eb2:	e0fe      	b.n	80010b2 <__aeabi_dsub+0x2f6>
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	0026      	movs	r6, r4
 8000eba:	1a5b      	subs	r3, r3, r1
 8000ebc:	409c      	lsls	r4, r3
 8000ebe:	4098      	lsls	r0, r3
 8000ec0:	40ce      	lsrs	r6, r1
 8000ec2:	40ca      	lsrs	r2, r1
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4330      	orrs	r0, r6
 8000eca:	4692      	mov	sl, r2
 8000ecc:	2600      	movs	r6, #0
 8000ece:	4304      	orrs	r4, r0
 8000ed0:	0763      	lsls	r3, r4, #29
 8000ed2:	d009      	beq.n	8000ee8 <__aeabi_dsub+0x12c>
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	4023      	ands	r3, r4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dsub+0x12c>
 8000edc:	1d23      	adds	r3, r4, #4
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	41a4      	sbcs	r4, r4
 8000ee2:	4264      	negs	r4, r4
 8000ee4:	44a2      	add	sl, r4
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	4653      	mov	r3, sl
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	d400      	bmi.n	8000ef0 <__aeabi_dsub+0x134>
 8000eee:	e0f2      	b.n	80010d6 <__aeabi_dsub+0x31a>
 8000ef0:	4b8c      	ldr	r3, [pc, #560]	; (8001124 <__aeabi_dsub+0x368>)
 8000ef2:	3601      	adds	r6, #1
 8000ef4:	429e      	cmp	r6, r3
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x13e>
 8000ef8:	e10f      	b.n	800111a <__aeabi_dsub+0x35e>
 8000efa:	4653      	mov	r3, sl
 8000efc:	498a      	ldr	r1, [pc, #552]	; (8001128 <__aeabi_dsub+0x36c>)
 8000efe:	08e4      	lsrs	r4, r4, #3
 8000f00:	400b      	ands	r3, r1
 8000f02:	0019      	movs	r1, r3
 8000f04:	075b      	lsls	r3, r3, #29
 8000f06:	4323      	orrs	r3, r4
 8000f08:	0572      	lsls	r2, r6, #21
 8000f0a:	024c      	lsls	r4, r1, #9
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d52      	lsrs	r2, r2, #21
 8000f10:	0512      	lsls	r2, r2, #20
 8000f12:	4322      	orrs	r2, r4
 8000f14:	07ed      	lsls	r5, r5, #31
 8000f16:	432a      	orrs	r2, r5
 8000f18:	0018      	movs	r0, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f20:	46bb      	mov	fp, r7
 8000f22:	46b2      	mov	sl, r6
 8000f24:	46a9      	mov	r9, r5
 8000f26:	46a0      	mov	r8, r4
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2a:	1ab4      	subs	r4, r6, r2
 8000f2c:	46a4      	mov	ip, r4
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	dd59      	ble.n	8000fe6 <__aeabi_dsub+0x22a>
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x17c>
 8000f36:	e0b0      	b.n	800109a <__aeabi_dsub+0x2de>
 8000f38:	4556      	cmp	r6, sl
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dsub+0x182>
 8000f3c:	e0fa      	b.n	8001134 <__aeabi_dsub+0x378>
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	0412      	lsls	r2, r2, #16
 8000f42:	4317      	orrs	r7, r2
 8000f44:	4662      	mov	r2, ip
 8000f46:	2a38      	cmp	r2, #56	; 0x38
 8000f48:	dd00      	ble.n	8000f4c <__aeabi_dsub+0x190>
 8000f4a:	e0d4      	b.n	80010f6 <__aeabi_dsub+0x33a>
 8000f4c:	2a1f      	cmp	r2, #31
 8000f4e:	dc00      	bgt.n	8000f52 <__aeabi_dsub+0x196>
 8000f50:	e1c0      	b.n	80012d4 <__aeabi_dsub+0x518>
 8000f52:	0039      	movs	r1, r7
 8000f54:	3a20      	subs	r2, #32
 8000f56:	40d1      	lsrs	r1, r2
 8000f58:	4662      	mov	r2, ip
 8000f5a:	2a20      	cmp	r2, #32
 8000f5c:	d006      	beq.n	8000f6c <__aeabi_dsub+0x1b0>
 8000f5e:	4664      	mov	r4, ip
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	1b12      	subs	r2, r2, r4
 8000f64:	003c      	movs	r4, r7
 8000f66:	4094      	lsls	r4, r2
 8000f68:	4304      	orrs	r4, r0
 8000f6a:	9401      	str	r4, [sp, #4]
 8000f6c:	9c01      	ldr	r4, [sp, #4]
 8000f6e:	1e62      	subs	r2, r4, #1
 8000f70:	4194      	sbcs	r4, r2
 8000f72:	430c      	orrs	r4, r1
 8000f74:	e0c3      	b.n	80010fe <__aeabi_dsub+0x342>
 8000f76:	003c      	movs	r4, r7
 8000f78:	4304      	orrs	r4, r0
 8000f7a:	d02b      	beq.n	8000fd4 <__aeabi_dsub+0x218>
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	428d      	cmp	r5, r1
 8000f80:	d02e      	beq.n	8000fe0 <__aeabi_dsub+0x224>
 8000f82:	4c6a      	ldr	r4, [pc, #424]	; (800112c <__aeabi_dsub+0x370>)
 8000f84:	46a4      	mov	ip, r4
 8000f86:	44b4      	add	ip, r6
 8000f88:	4664      	mov	r4, ip
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d05f      	beq.n	800104e <__aeabi_dsub+0x292>
 8000f8e:	1b94      	subs	r4, r2, r6
 8000f90:	46a4      	mov	ip, r4
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_dsub+0x1dc>
 8000f96:	e120      	b.n	80011da <__aeabi_dsub+0x41e>
 8000f98:	464c      	mov	r4, r9
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dsub+0x1e4>
 8000f9e:	e1c7      	b.n	8001330 <__aeabi_dsub+0x574>
 8000fa0:	4661      	mov	r1, ip
 8000fa2:	1e4c      	subs	r4, r1, #1
 8000fa4:	2901      	cmp	r1, #1
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dsub+0x1ee>
 8000fa8:	e223      	b.n	80013f2 <__aeabi_dsub+0x636>
 8000faa:	4d5e      	ldr	r5, [pc, #376]	; (8001124 <__aeabi_dsub+0x368>)
 8000fac:	45ac      	cmp	ip, r5
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0x1f6>
 8000fb0:	e1d8      	b.n	8001364 <__aeabi_dsub+0x5a8>
 8000fb2:	46a4      	mov	ip, r4
 8000fb4:	e11a      	b.n	80011ec <__aeabi_dsub+0x430>
 8000fb6:	003a      	movs	r2, r7
 8000fb8:	4302      	orrs	r2, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dsub+0x202>
 8000fbc:	e0e4      	b.n	8001188 <__aeabi_dsub+0x3cc>
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	2c01      	cmp	r4, #1
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dsub+0x20c>
 8000fc6:	e1c3      	b.n	8001350 <__aeabi_dsub+0x594>
 8000fc8:	4956      	ldr	r1, [pc, #344]	; (8001124 <__aeabi_dsub+0x368>)
 8000fca:	428c      	cmp	r4, r1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x214>
 8000fce:	e0b1      	b.n	8001134 <__aeabi_dsub+0x378>
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	e72b      	b.n	8000e2c <__aeabi_dsub+0x70>
 8000fd4:	2401      	movs	r4, #1
 8000fd6:	4061      	eors	r1, r4
 8000fd8:	468b      	mov	fp, r1
 8000fda:	428d      	cmp	r5, r1
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dsub+0x224>
 8000fde:	e716      	b.n	8000e0e <__aeabi_dsub+0x52>
 8000fe0:	4952      	ldr	r1, [pc, #328]	; (800112c <__aeabi_dsub+0x370>)
 8000fe2:	468c      	mov	ip, r1
 8000fe4:	44b4      	add	ip, r6
 8000fe6:	4664      	mov	r4, ip
 8000fe8:	2c00      	cmp	r4, #0
 8000fea:	d100      	bne.n	8000fee <__aeabi_dsub+0x232>
 8000fec:	e0d3      	b.n	8001196 <__aeabi_dsub+0x3da>
 8000fee:	1b91      	subs	r1, r2, r6
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x23c>
 8000ff6:	e15e      	b.n	80012b6 <__aeabi_dsub+0x4fa>
 8000ff8:	494a      	ldr	r1, [pc, #296]	; (8001124 <__aeabi_dsub+0x368>)
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x244>
 8000ffe:	e1be      	b.n	800137e <__aeabi_dsub+0x5c2>
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	464c      	mov	r4, r9
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	430c      	orrs	r4, r1
 8001008:	46a1      	mov	r9, r4
 800100a:	4661      	mov	r1, ip
 800100c:	2938      	cmp	r1, #56	; 0x38
 800100e:	dd00      	ble.n	8001012 <__aeabi_dsub+0x256>
 8001010:	e1ba      	b.n	8001388 <__aeabi_dsub+0x5cc>
 8001012:	291f      	cmp	r1, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dsub+0x25c>
 8001016:	e227      	b.n	8001468 <__aeabi_dsub+0x6ac>
 8001018:	2420      	movs	r4, #32
 800101a:	1a64      	subs	r4, r4, r1
 800101c:	4649      	mov	r1, r9
 800101e:	40a1      	lsls	r1, r4
 8001020:	001e      	movs	r6, r3
 8001022:	4688      	mov	r8, r1
 8001024:	4661      	mov	r1, ip
 8001026:	40a3      	lsls	r3, r4
 8001028:	40ce      	lsrs	r6, r1
 800102a:	4641      	mov	r1, r8
 800102c:	1e5c      	subs	r4, r3, #1
 800102e:	41a3      	sbcs	r3, r4
 8001030:	4331      	orrs	r1, r6
 8001032:	4319      	orrs	r1, r3
 8001034:	000c      	movs	r4, r1
 8001036:	4663      	mov	r3, ip
 8001038:	4649      	mov	r1, r9
 800103a:	40d9      	lsrs	r1, r3
 800103c:	187f      	adds	r7, r7, r1
 800103e:	1824      	adds	r4, r4, r0
 8001040:	4284      	cmp	r4, r0
 8001042:	419b      	sbcs	r3, r3
 8001044:	425b      	negs	r3, r3
 8001046:	469a      	mov	sl, r3
 8001048:	0016      	movs	r6, r2
 800104a:	44ba      	add	sl, r7
 800104c:	e05d      	b.n	800110a <__aeabi_dsub+0x34e>
 800104e:	4c38      	ldr	r4, [pc, #224]	; (8001130 <__aeabi_dsub+0x374>)
 8001050:	1c72      	adds	r2, r6, #1
 8001052:	4222      	tst	r2, r4
 8001054:	d000      	beq.n	8001058 <__aeabi_dsub+0x29c>
 8001056:	e0df      	b.n	8001218 <__aeabi_dsub+0x45c>
 8001058:	464a      	mov	r2, r9
 800105a:	431a      	orrs	r2, r3
 800105c:	2e00      	cmp	r6, #0
 800105e:	d000      	beq.n	8001062 <__aeabi_dsub+0x2a6>
 8001060:	e15c      	b.n	800131c <__aeabi_dsub+0x560>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_dsub+0x2ac>
 8001066:	e1cf      	b.n	8001408 <__aeabi_dsub+0x64c>
 8001068:	003a      	movs	r2, r7
 800106a:	4302      	orrs	r2, r0
 800106c:	d100      	bne.n	8001070 <__aeabi_dsub+0x2b4>
 800106e:	e17f      	b.n	8001370 <__aeabi_dsub+0x5b4>
 8001070:	1a1c      	subs	r4, r3, r0
 8001072:	464a      	mov	r2, r9
 8001074:	42a3      	cmp	r3, r4
 8001076:	4189      	sbcs	r1, r1
 8001078:	1bd2      	subs	r2, r2, r7
 800107a:	4249      	negs	r1, r1
 800107c:	1a52      	subs	r2, r2, r1
 800107e:	4692      	mov	sl, r2
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	d400      	bmi.n	8001086 <__aeabi_dsub+0x2ca>
 8001084:	e20a      	b.n	800149c <__aeabi_dsub+0x6e0>
 8001086:	1ac4      	subs	r4, r0, r3
 8001088:	42a0      	cmp	r0, r4
 800108a:	4180      	sbcs	r0, r0
 800108c:	464b      	mov	r3, r9
 800108e:	4240      	negs	r0, r0
 8001090:	1aff      	subs	r7, r7, r3
 8001092:	1a3b      	subs	r3, r7, r0
 8001094:	469a      	mov	sl, r3
 8001096:	465d      	mov	r5, fp
 8001098:	e71a      	b.n	8000ed0 <__aeabi_dsub+0x114>
 800109a:	003a      	movs	r2, r7
 800109c:	4302      	orrs	r2, r0
 800109e:	d073      	beq.n	8001188 <__aeabi_dsub+0x3cc>
 80010a0:	0022      	movs	r2, r4
 80010a2:	3a01      	subs	r2, #1
 80010a4:	2c01      	cmp	r4, #1
 80010a6:	d100      	bne.n	80010aa <__aeabi_dsub+0x2ee>
 80010a8:	e0cb      	b.n	8001242 <__aeabi_dsub+0x486>
 80010aa:	4554      	cmp	r4, sl
 80010ac:	d042      	beq.n	8001134 <__aeabi_dsub+0x378>
 80010ae:	4694      	mov	ip, r2
 80010b0:	e748      	b.n	8000f44 <__aeabi_dsub+0x188>
 80010b2:	0010      	movs	r0, r2
 80010b4:	3b1f      	subs	r3, #31
 80010b6:	40d8      	lsrs	r0, r3
 80010b8:	2920      	cmp	r1, #32
 80010ba:	d003      	beq.n	80010c4 <__aeabi_dsub+0x308>
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	1a5b      	subs	r3, r3, r1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	4314      	orrs	r4, r2
 80010c4:	1e63      	subs	r3, r4, #1
 80010c6:	419c      	sbcs	r4, r3
 80010c8:	2300      	movs	r3, #0
 80010ca:	2600      	movs	r6, #0
 80010cc:	469a      	mov	sl, r3
 80010ce:	4304      	orrs	r4, r0
 80010d0:	0763      	lsls	r3, r4, #29
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dsub+0x31a>
 80010d4:	e6fe      	b.n	8000ed4 <__aeabi_dsub+0x118>
 80010d6:	4652      	mov	r2, sl
 80010d8:	08e3      	lsrs	r3, r4, #3
 80010da:	0752      	lsls	r2, r2, #29
 80010dc:	4313      	orrs	r3, r2
 80010de:	4652      	mov	r2, sl
 80010e0:	46b4      	mov	ip, r6
 80010e2:	08d2      	lsrs	r2, r2, #3
 80010e4:	490f      	ldr	r1, [pc, #60]	; (8001124 <__aeabi_dsub+0x368>)
 80010e6:	458c      	cmp	ip, r1
 80010e8:	d02a      	beq.n	8001140 <__aeabi_dsub+0x384>
 80010ea:	0312      	lsls	r2, r2, #12
 80010ec:	0b14      	lsrs	r4, r2, #12
 80010ee:	4662      	mov	r2, ip
 80010f0:	0552      	lsls	r2, r2, #21
 80010f2:	0d52      	lsrs	r2, r2, #21
 80010f4:	e70c      	b.n	8000f10 <__aeabi_dsub+0x154>
 80010f6:	003c      	movs	r4, r7
 80010f8:	4304      	orrs	r4, r0
 80010fa:	1e62      	subs	r2, r4, #1
 80010fc:	4194      	sbcs	r4, r2
 80010fe:	18e4      	adds	r4, r4, r3
 8001100:	429c      	cmp	r4, r3
 8001102:	4192      	sbcs	r2, r2
 8001104:	4252      	negs	r2, r2
 8001106:	444a      	add	r2, r9
 8001108:	4692      	mov	sl, r2
 800110a:	4653      	mov	r3, sl
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	d5df      	bpl.n	80010d0 <__aeabi_dsub+0x314>
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__aeabi_dsub+0x368>)
 8001112:	3601      	adds	r6, #1
 8001114:	429e      	cmp	r6, r3
 8001116:	d000      	beq.n	800111a <__aeabi_dsub+0x35e>
 8001118:	e0a0      	b.n	800125c <__aeabi_dsub+0x4a0>
 800111a:	0032      	movs	r2, r6
 800111c:	2400      	movs	r4, #0
 800111e:	2300      	movs	r3, #0
 8001120:	e6f6      	b.n	8000f10 <__aeabi_dsub+0x154>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	000007ff 	.word	0x000007ff
 8001128:	ff7fffff 	.word	0xff7fffff
 800112c:	fffff801 	.word	0xfffff801
 8001130:	000007fe 	.word	0x000007fe
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	464a      	mov	r2, r9
 8001138:	0752      	lsls	r2, r2, #29
 800113a:	4313      	orrs	r3, r2
 800113c:	464a      	mov	r2, r9
 800113e:	08d2      	lsrs	r2, r2, #3
 8001140:	0019      	movs	r1, r3
 8001142:	4311      	orrs	r1, r2
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x38c>
 8001146:	e1b5      	b.n	80014b4 <__aeabi_dsub+0x6f8>
 8001148:	2480      	movs	r4, #128	; 0x80
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	4314      	orrs	r4, r2
 800114e:	0324      	lsls	r4, r4, #12
 8001150:	4ad5      	ldr	r2, [pc, #852]	; (80014a8 <__aeabi_dsub+0x6ec>)
 8001152:	0b24      	lsrs	r4, r4, #12
 8001154:	e6dc      	b.n	8000f10 <__aeabi_dsub+0x154>
 8001156:	0020      	movs	r0, r4
 8001158:	f000 fa4c 	bl	80015f4 <__clzsi2>
 800115c:	0003      	movs	r3, r0
 800115e:	3318      	adds	r3, #24
 8001160:	2b1f      	cmp	r3, #31
 8001162:	dc00      	bgt.n	8001166 <__aeabi_dsub+0x3aa>
 8001164:	e695      	b.n	8000e92 <__aeabi_dsub+0xd6>
 8001166:	0022      	movs	r2, r4
 8001168:	3808      	subs	r0, #8
 800116a:	4082      	lsls	r2, r0
 800116c:	2400      	movs	r4, #0
 800116e:	429e      	cmp	r6, r3
 8001170:	dc00      	bgt.n	8001174 <__aeabi_dsub+0x3b8>
 8001172:	e69a      	b.n	8000eaa <__aeabi_dsub+0xee>
 8001174:	1af6      	subs	r6, r6, r3
 8001176:	4bcd      	ldr	r3, [pc, #820]	; (80014ac <__aeabi_dsub+0x6f0>)
 8001178:	401a      	ands	r2, r3
 800117a:	4692      	mov	sl, r2
 800117c:	e6a8      	b.n	8000ed0 <__aeabi_dsub+0x114>
 800117e:	003c      	movs	r4, r7
 8001180:	4304      	orrs	r4, r0
 8001182:	1e62      	subs	r2, r4, #1
 8001184:	4194      	sbcs	r4, r2
 8001186:	e66c      	b.n	8000e62 <__aeabi_dsub+0xa6>
 8001188:	464a      	mov	r2, r9
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	0752      	lsls	r2, r2, #29
 800118e:	4313      	orrs	r3, r2
 8001190:	464a      	mov	r2, r9
 8001192:	08d2      	lsrs	r2, r2, #3
 8001194:	e7a6      	b.n	80010e4 <__aeabi_dsub+0x328>
 8001196:	4cc6      	ldr	r4, [pc, #792]	; (80014b0 <__aeabi_dsub+0x6f4>)
 8001198:	1c72      	adds	r2, r6, #1
 800119a:	4222      	tst	r2, r4
 800119c:	d000      	beq.n	80011a0 <__aeabi_dsub+0x3e4>
 800119e:	e0ac      	b.n	80012fa <__aeabi_dsub+0x53e>
 80011a0:	464a      	mov	r2, r9
 80011a2:	431a      	orrs	r2, r3
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_dsub+0x3ee>
 80011a8:	e105      	b.n	80013b6 <__aeabi_dsub+0x5fa>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x3f4>
 80011ae:	e156      	b.n	800145e <__aeabi_dsub+0x6a2>
 80011b0:	003a      	movs	r2, r7
 80011b2:	4302      	orrs	r2, r0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x3fc>
 80011b6:	e0db      	b.n	8001370 <__aeabi_dsub+0x5b4>
 80011b8:	181c      	adds	r4, r3, r0
 80011ba:	429c      	cmp	r4, r3
 80011bc:	419b      	sbcs	r3, r3
 80011be:	444f      	add	r7, r9
 80011c0:	46ba      	mov	sl, r7
 80011c2:	425b      	negs	r3, r3
 80011c4:	449a      	add	sl, r3
 80011c6:	4653      	mov	r3, sl
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dsub+0x412>
 80011cc:	e780      	b.n	80010d0 <__aeabi_dsub+0x314>
 80011ce:	4652      	mov	r2, sl
 80011d0:	4bb6      	ldr	r3, [pc, #728]	; (80014ac <__aeabi_dsub+0x6f0>)
 80011d2:	2601      	movs	r6, #1
 80011d4:	401a      	ands	r2, r3
 80011d6:	4692      	mov	sl, r2
 80011d8:	e77a      	b.n	80010d0 <__aeabi_dsub+0x314>
 80011da:	4cb3      	ldr	r4, [pc, #716]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80011dc:	42a2      	cmp	r2, r4
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x426>
 80011e0:	e0c0      	b.n	8001364 <__aeabi_dsub+0x5a8>
 80011e2:	2480      	movs	r4, #128	; 0x80
 80011e4:	464d      	mov	r5, r9
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	4325      	orrs	r5, r4
 80011ea:	46a9      	mov	r9, r5
 80011ec:	4664      	mov	r4, ip
 80011ee:	2c38      	cmp	r4, #56	; 0x38
 80011f0:	dc53      	bgt.n	800129a <__aeabi_dsub+0x4de>
 80011f2:	4661      	mov	r1, ip
 80011f4:	2c1f      	cmp	r4, #31
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dsub+0x43e>
 80011f8:	e0cd      	b.n	8001396 <__aeabi_dsub+0x5da>
 80011fa:	2520      	movs	r5, #32
 80011fc:	001e      	movs	r6, r3
 80011fe:	1b2d      	subs	r5, r5, r4
 8001200:	464c      	mov	r4, r9
 8001202:	40ab      	lsls	r3, r5
 8001204:	40ac      	lsls	r4, r5
 8001206:	40ce      	lsrs	r6, r1
 8001208:	1e5d      	subs	r5, r3, #1
 800120a:	41ab      	sbcs	r3, r5
 800120c:	4334      	orrs	r4, r6
 800120e:	4323      	orrs	r3, r4
 8001210:	464c      	mov	r4, r9
 8001212:	40cc      	lsrs	r4, r1
 8001214:	1b3f      	subs	r7, r7, r4
 8001216:	e045      	b.n	80012a4 <__aeabi_dsub+0x4e8>
 8001218:	464a      	mov	r2, r9
 800121a:	1a1c      	subs	r4, r3, r0
 800121c:	1bd1      	subs	r1, r2, r7
 800121e:	42a3      	cmp	r3, r4
 8001220:	4192      	sbcs	r2, r2
 8001222:	4252      	negs	r2, r2
 8001224:	4692      	mov	sl, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4651      	mov	r1, sl
 800122a:	1a52      	subs	r2, r2, r1
 800122c:	4692      	mov	sl, r2
 800122e:	0212      	lsls	r2, r2, #8
 8001230:	d500      	bpl.n	8001234 <__aeabi_dsub+0x478>
 8001232:	e083      	b.n	800133c <__aeabi_dsub+0x580>
 8001234:	4653      	mov	r3, sl
 8001236:	4323      	orrs	r3, r4
 8001238:	d000      	beq.n	800123c <__aeabi_dsub+0x480>
 800123a:	e621      	b.n	8000e80 <__aeabi_dsub+0xc4>
 800123c:	2200      	movs	r2, #0
 800123e:	2500      	movs	r5, #0
 8001240:	e753      	b.n	80010ea <__aeabi_dsub+0x32e>
 8001242:	181c      	adds	r4, r3, r0
 8001244:	429c      	cmp	r4, r3
 8001246:	419b      	sbcs	r3, r3
 8001248:	444f      	add	r7, r9
 800124a:	46ba      	mov	sl, r7
 800124c:	425b      	negs	r3, r3
 800124e:	449a      	add	sl, r3
 8001250:	4653      	mov	r3, sl
 8001252:	2601      	movs	r6, #1
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dsub+0x49e>
 8001258:	e73a      	b.n	80010d0 <__aeabi_dsub+0x314>
 800125a:	2602      	movs	r6, #2
 800125c:	4652      	mov	r2, sl
 800125e:	4b93      	ldr	r3, [pc, #588]	; (80014ac <__aeabi_dsub+0x6f0>)
 8001260:	2101      	movs	r1, #1
 8001262:	401a      	ands	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	4021      	ands	r1, r4
 8001268:	0862      	lsrs	r2, r4, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	07dc      	lsls	r4, r3, #31
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	469a      	mov	sl, r3
 8001272:	4314      	orrs	r4, r2
 8001274:	e62c      	b.n	8000ed0 <__aeabi_dsub+0x114>
 8001276:	0039      	movs	r1, r7
 8001278:	3a20      	subs	r2, #32
 800127a:	40d1      	lsrs	r1, r2
 800127c:	4662      	mov	r2, ip
 800127e:	2a20      	cmp	r2, #32
 8001280:	d006      	beq.n	8001290 <__aeabi_dsub+0x4d4>
 8001282:	4664      	mov	r4, ip
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	1b12      	subs	r2, r2, r4
 8001288:	003c      	movs	r4, r7
 800128a:	4094      	lsls	r4, r2
 800128c:	4304      	orrs	r4, r0
 800128e:	9401      	str	r4, [sp, #4]
 8001290:	9c01      	ldr	r4, [sp, #4]
 8001292:	1e62      	subs	r2, r4, #1
 8001294:	4194      	sbcs	r4, r2
 8001296:	430c      	orrs	r4, r1
 8001298:	e5e3      	b.n	8000e62 <__aeabi_dsub+0xa6>
 800129a:	4649      	mov	r1, r9
 800129c:	4319      	orrs	r1, r3
 800129e:	000b      	movs	r3, r1
 80012a0:	1e5c      	subs	r4, r3, #1
 80012a2:	41a3      	sbcs	r3, r4
 80012a4:	1ac4      	subs	r4, r0, r3
 80012a6:	42a0      	cmp	r0, r4
 80012a8:	419b      	sbcs	r3, r3
 80012aa:	425b      	negs	r3, r3
 80012ac:	1afb      	subs	r3, r7, r3
 80012ae:	469a      	mov	sl, r3
 80012b0:	465d      	mov	r5, fp
 80012b2:	0016      	movs	r6, r2
 80012b4:	e5dc      	b.n	8000e70 <__aeabi_dsub+0xb4>
 80012b6:	4649      	mov	r1, r9
 80012b8:	4319      	orrs	r1, r3
 80012ba:	d100      	bne.n	80012be <__aeabi_dsub+0x502>
 80012bc:	e0ae      	b.n	800141c <__aeabi_dsub+0x660>
 80012be:	4661      	mov	r1, ip
 80012c0:	4664      	mov	r4, ip
 80012c2:	3901      	subs	r1, #1
 80012c4:	2c01      	cmp	r4, #1
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x50e>
 80012c8:	e0e0      	b.n	800148c <__aeabi_dsub+0x6d0>
 80012ca:	4c77      	ldr	r4, [pc, #476]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80012cc:	45a4      	cmp	ip, r4
 80012ce:	d056      	beq.n	800137e <__aeabi_dsub+0x5c2>
 80012d0:	468c      	mov	ip, r1
 80012d2:	e69a      	b.n	800100a <__aeabi_dsub+0x24e>
 80012d4:	4661      	mov	r1, ip
 80012d6:	2220      	movs	r2, #32
 80012d8:	003c      	movs	r4, r7
 80012da:	1a52      	subs	r2, r2, r1
 80012dc:	4094      	lsls	r4, r2
 80012de:	0001      	movs	r1, r0
 80012e0:	4090      	lsls	r0, r2
 80012e2:	46a0      	mov	r8, r4
 80012e4:	4664      	mov	r4, ip
 80012e6:	1e42      	subs	r2, r0, #1
 80012e8:	4190      	sbcs	r0, r2
 80012ea:	4662      	mov	r2, ip
 80012ec:	40e1      	lsrs	r1, r4
 80012ee:	4644      	mov	r4, r8
 80012f0:	40d7      	lsrs	r7, r2
 80012f2:	430c      	orrs	r4, r1
 80012f4:	4304      	orrs	r4, r0
 80012f6:	44b9      	add	r9, r7
 80012f8:	e701      	b.n	80010fe <__aeabi_dsub+0x342>
 80012fa:	496b      	ldr	r1, [pc, #428]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80012fc:	428a      	cmp	r2, r1
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x546>
 8001300:	e70c      	b.n	800111c <__aeabi_dsub+0x360>
 8001302:	1818      	adds	r0, r3, r0
 8001304:	4298      	cmp	r0, r3
 8001306:	419b      	sbcs	r3, r3
 8001308:	444f      	add	r7, r9
 800130a:	425b      	negs	r3, r3
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	07dc      	lsls	r4, r3, #31
 8001310:	0840      	lsrs	r0, r0, #1
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	469a      	mov	sl, r3
 8001316:	0016      	movs	r6, r2
 8001318:	4304      	orrs	r4, r0
 800131a:	e6d9      	b.n	80010d0 <__aeabi_dsub+0x314>
 800131c:	2a00      	cmp	r2, #0
 800131e:	d000      	beq.n	8001322 <__aeabi_dsub+0x566>
 8001320:	e081      	b.n	8001426 <__aeabi_dsub+0x66a>
 8001322:	003b      	movs	r3, r7
 8001324:	4303      	orrs	r3, r0
 8001326:	d11d      	bne.n	8001364 <__aeabi_dsub+0x5a8>
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	2500      	movs	r5, #0
 800132c:	0312      	lsls	r2, r2, #12
 800132e:	e70b      	b.n	8001148 <__aeabi_dsub+0x38c>
 8001330:	08c0      	lsrs	r0, r0, #3
 8001332:	077b      	lsls	r3, r7, #29
 8001334:	465d      	mov	r5, fp
 8001336:	4303      	orrs	r3, r0
 8001338:	08fa      	lsrs	r2, r7, #3
 800133a:	e6d3      	b.n	80010e4 <__aeabi_dsub+0x328>
 800133c:	1ac4      	subs	r4, r0, r3
 800133e:	42a0      	cmp	r0, r4
 8001340:	4180      	sbcs	r0, r0
 8001342:	464b      	mov	r3, r9
 8001344:	4240      	negs	r0, r0
 8001346:	1aff      	subs	r7, r7, r3
 8001348:	1a3b      	subs	r3, r7, r0
 800134a:	469a      	mov	sl, r3
 800134c:	465d      	mov	r5, fp
 800134e:	e597      	b.n	8000e80 <__aeabi_dsub+0xc4>
 8001350:	1a1c      	subs	r4, r3, r0
 8001352:	464a      	mov	r2, r9
 8001354:	42a3      	cmp	r3, r4
 8001356:	419b      	sbcs	r3, r3
 8001358:	1bd7      	subs	r7, r2, r7
 800135a:	425b      	negs	r3, r3
 800135c:	1afb      	subs	r3, r7, r3
 800135e:	469a      	mov	sl, r3
 8001360:	2601      	movs	r6, #1
 8001362:	e585      	b.n	8000e70 <__aeabi_dsub+0xb4>
 8001364:	08c0      	lsrs	r0, r0, #3
 8001366:	077b      	lsls	r3, r7, #29
 8001368:	465d      	mov	r5, fp
 800136a:	4303      	orrs	r3, r0
 800136c:	08fa      	lsrs	r2, r7, #3
 800136e:	e6e7      	b.n	8001140 <__aeabi_dsub+0x384>
 8001370:	464a      	mov	r2, r9
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	0752      	lsls	r2, r2, #29
 8001376:	4313      	orrs	r3, r2
 8001378:	464a      	mov	r2, r9
 800137a:	08d2      	lsrs	r2, r2, #3
 800137c:	e6b5      	b.n	80010ea <__aeabi_dsub+0x32e>
 800137e:	08c0      	lsrs	r0, r0, #3
 8001380:	077b      	lsls	r3, r7, #29
 8001382:	4303      	orrs	r3, r0
 8001384:	08fa      	lsrs	r2, r7, #3
 8001386:	e6db      	b.n	8001140 <__aeabi_dsub+0x384>
 8001388:	4649      	mov	r1, r9
 800138a:	4319      	orrs	r1, r3
 800138c:	000b      	movs	r3, r1
 800138e:	1e59      	subs	r1, r3, #1
 8001390:	418b      	sbcs	r3, r1
 8001392:	001c      	movs	r4, r3
 8001394:	e653      	b.n	800103e <__aeabi_dsub+0x282>
 8001396:	464d      	mov	r5, r9
 8001398:	3c20      	subs	r4, #32
 800139a:	40e5      	lsrs	r5, r4
 800139c:	2920      	cmp	r1, #32
 800139e:	d005      	beq.n	80013ac <__aeabi_dsub+0x5f0>
 80013a0:	2440      	movs	r4, #64	; 0x40
 80013a2:	1a64      	subs	r4, r4, r1
 80013a4:	4649      	mov	r1, r9
 80013a6:	40a1      	lsls	r1, r4
 80013a8:	430b      	orrs	r3, r1
 80013aa:	4698      	mov	r8, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	1e5c      	subs	r4, r3, #1
 80013b0:	41a3      	sbcs	r3, r4
 80013b2:	432b      	orrs	r3, r5
 80013b4:	e776      	b.n	80012a4 <__aeabi_dsub+0x4e8>
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0e1      	beq.n	800137e <__aeabi_dsub+0x5c2>
 80013ba:	003a      	movs	r2, r7
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	4302      	orrs	r2, r0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x608>
 80013c2:	e6b8      	b.n	8001136 <__aeabi_dsub+0x37a>
 80013c4:	464a      	mov	r2, r9
 80013c6:	0752      	lsls	r2, r2, #29
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	4313      	orrs	r3, r2
 80013cc:	464a      	mov	r2, r9
 80013ce:	0324      	lsls	r4, r4, #12
 80013d0:	08d2      	lsrs	r2, r2, #3
 80013d2:	4222      	tst	r2, r4
 80013d4:	d007      	beq.n	80013e6 <__aeabi_dsub+0x62a>
 80013d6:	08fe      	lsrs	r6, r7, #3
 80013d8:	4226      	tst	r6, r4
 80013da:	d104      	bne.n	80013e6 <__aeabi_dsub+0x62a>
 80013dc:	465d      	mov	r5, fp
 80013de:	0032      	movs	r2, r6
 80013e0:	08c3      	lsrs	r3, r0, #3
 80013e2:	077f      	lsls	r7, r7, #29
 80013e4:	433b      	orrs	r3, r7
 80013e6:	0f59      	lsrs	r1, r3, #29
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	0749      	lsls	r1, r1, #29
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	430b      	orrs	r3, r1
 80013f0:	e6a6      	b.n	8001140 <__aeabi_dsub+0x384>
 80013f2:	1ac4      	subs	r4, r0, r3
 80013f4:	42a0      	cmp	r0, r4
 80013f6:	4180      	sbcs	r0, r0
 80013f8:	464b      	mov	r3, r9
 80013fa:	4240      	negs	r0, r0
 80013fc:	1aff      	subs	r7, r7, r3
 80013fe:	1a3b      	subs	r3, r7, r0
 8001400:	469a      	mov	sl, r3
 8001402:	465d      	mov	r5, fp
 8001404:	2601      	movs	r6, #1
 8001406:	e533      	b.n	8000e70 <__aeabi_dsub+0xb4>
 8001408:	003b      	movs	r3, r7
 800140a:	4303      	orrs	r3, r0
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x654>
 800140e:	e715      	b.n	800123c <__aeabi_dsub+0x480>
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	077b      	lsls	r3, r7, #29
 8001414:	465d      	mov	r5, fp
 8001416:	4303      	orrs	r3, r0
 8001418:	08fa      	lsrs	r2, r7, #3
 800141a:	e666      	b.n	80010ea <__aeabi_dsub+0x32e>
 800141c:	08c0      	lsrs	r0, r0, #3
 800141e:	077b      	lsls	r3, r7, #29
 8001420:	4303      	orrs	r3, r0
 8001422:	08fa      	lsrs	r2, r7, #3
 8001424:	e65e      	b.n	80010e4 <__aeabi_dsub+0x328>
 8001426:	003a      	movs	r2, r7
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	4302      	orrs	r2, r0
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x674>
 800142e:	e682      	b.n	8001136 <__aeabi_dsub+0x37a>
 8001430:	464a      	mov	r2, r9
 8001432:	0752      	lsls	r2, r2, #29
 8001434:	2480      	movs	r4, #128	; 0x80
 8001436:	4313      	orrs	r3, r2
 8001438:	464a      	mov	r2, r9
 800143a:	0324      	lsls	r4, r4, #12
 800143c:	08d2      	lsrs	r2, r2, #3
 800143e:	4222      	tst	r2, r4
 8001440:	d007      	beq.n	8001452 <__aeabi_dsub+0x696>
 8001442:	08fe      	lsrs	r6, r7, #3
 8001444:	4226      	tst	r6, r4
 8001446:	d104      	bne.n	8001452 <__aeabi_dsub+0x696>
 8001448:	465d      	mov	r5, fp
 800144a:	0032      	movs	r2, r6
 800144c:	08c3      	lsrs	r3, r0, #3
 800144e:	077f      	lsls	r7, r7, #29
 8001450:	433b      	orrs	r3, r7
 8001452:	0f59      	lsrs	r1, r3, #29
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	0749      	lsls	r1, r1, #29
 800145a:	430b      	orrs	r3, r1
 800145c:	e670      	b.n	8001140 <__aeabi_dsub+0x384>
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	077b      	lsls	r3, r7, #29
 8001462:	4303      	orrs	r3, r0
 8001464:	08fa      	lsrs	r2, r7, #3
 8001466:	e640      	b.n	80010ea <__aeabi_dsub+0x32e>
 8001468:	464c      	mov	r4, r9
 800146a:	3920      	subs	r1, #32
 800146c:	40cc      	lsrs	r4, r1
 800146e:	4661      	mov	r1, ip
 8001470:	2920      	cmp	r1, #32
 8001472:	d006      	beq.n	8001482 <__aeabi_dsub+0x6c6>
 8001474:	4666      	mov	r6, ip
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	1b89      	subs	r1, r1, r6
 800147a:	464e      	mov	r6, r9
 800147c:	408e      	lsls	r6, r1
 800147e:	4333      	orrs	r3, r6
 8001480:	4698      	mov	r8, r3
 8001482:	4643      	mov	r3, r8
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	418b      	sbcs	r3, r1
 8001488:	431c      	orrs	r4, r3
 800148a:	e5d8      	b.n	800103e <__aeabi_dsub+0x282>
 800148c:	181c      	adds	r4, r3, r0
 800148e:	4284      	cmp	r4, r0
 8001490:	4180      	sbcs	r0, r0
 8001492:	444f      	add	r7, r9
 8001494:	46ba      	mov	sl, r7
 8001496:	4240      	negs	r0, r0
 8001498:	4482      	add	sl, r0
 800149a:	e6d9      	b.n	8001250 <__aeabi_dsub+0x494>
 800149c:	4653      	mov	r3, sl
 800149e:	4323      	orrs	r3, r4
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x6e8>
 80014a2:	e6cb      	b.n	800123c <__aeabi_dsub+0x480>
 80014a4:	e614      	b.n	80010d0 <__aeabi_dsub+0x314>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	000007ff 	.word	0x000007ff
 80014ac:	ff7fffff 	.word	0xff7fffff
 80014b0:	000007fe 	.word	0x000007fe
 80014b4:	2300      	movs	r3, #0
 80014b6:	4a01      	ldr	r2, [pc, #4]	; (80014bc <__aeabi_dsub+0x700>)
 80014b8:	001c      	movs	r4, r3
 80014ba:	e529      	b.n	8000f10 <__aeabi_dsub+0x154>
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__aeabi_d2iz>:
 80014c0:	000a      	movs	r2, r1
 80014c2:	b530      	push	{r4, r5, lr}
 80014c4:	4c13      	ldr	r4, [pc, #76]	; (8001514 <__aeabi_d2iz+0x54>)
 80014c6:	0053      	lsls	r3, r2, #1
 80014c8:	0309      	lsls	r1, r1, #12
 80014ca:	0005      	movs	r5, r0
 80014cc:	0b09      	lsrs	r1, r1, #12
 80014ce:	2000      	movs	r0, #0
 80014d0:	0d5b      	lsrs	r3, r3, #21
 80014d2:	0fd2      	lsrs	r2, r2, #31
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	dd04      	ble.n	80014e2 <__aeabi_d2iz+0x22>
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <__aeabi_d2iz+0x58>)
 80014da:	4283      	cmp	r3, r0
 80014dc:	dd02      	ble.n	80014e4 <__aeabi_d2iz+0x24>
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <__aeabi_d2iz+0x5c>)
 80014e0:	18d0      	adds	r0, r2, r3
 80014e2:	bd30      	pop	{r4, r5, pc}
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	0340      	lsls	r0, r0, #13
 80014e8:	4301      	orrs	r1, r0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <__aeabi_d2iz+0x60>)
 80014ec:	1ac0      	subs	r0, r0, r3
 80014ee:	281f      	cmp	r0, #31
 80014f0:	dd08      	ble.n	8001504 <__aeabi_d2iz+0x44>
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <__aeabi_d2iz+0x64>)
 80014f4:	1ac3      	subs	r3, r0, r3
 80014f6:	40d9      	lsrs	r1, r3
 80014f8:	000b      	movs	r3, r1
 80014fa:	4258      	negs	r0, r3
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d1f0      	bne.n	80014e2 <__aeabi_d2iz+0x22>
 8001500:	0018      	movs	r0, r3
 8001502:	e7ee      	b.n	80014e2 <__aeabi_d2iz+0x22>
 8001504:	4c08      	ldr	r4, [pc, #32]	; (8001528 <__aeabi_d2iz+0x68>)
 8001506:	40c5      	lsrs	r5, r0
 8001508:	46a4      	mov	ip, r4
 800150a:	4463      	add	r3, ip
 800150c:	4099      	lsls	r1, r3
 800150e:	000b      	movs	r3, r1
 8001510:	432b      	orrs	r3, r5
 8001512:	e7f2      	b.n	80014fa <__aeabi_d2iz+0x3a>
 8001514:	000003fe 	.word	0x000003fe
 8001518:	0000041d 	.word	0x0000041d
 800151c:	7fffffff 	.word	0x7fffffff
 8001520:	00000433 	.word	0x00000433
 8001524:	00000413 	.word	0x00000413
 8001528:	fffffbed 	.word	0xfffffbed

0800152c <__aeabi_ui2d>:
 800152c:	b510      	push	{r4, lr}
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d010      	beq.n	8001554 <__aeabi_ui2d+0x28>
 8001532:	f000 f85f 	bl	80015f4 <__clzsi2>
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <__aeabi_ui2d+0x48>)
 8001538:	1a1b      	subs	r3, r3, r0
 800153a:	280a      	cmp	r0, #10
 800153c:	dc11      	bgt.n	8001562 <__aeabi_ui2d+0x36>
 800153e:	220b      	movs	r2, #11
 8001540:	0021      	movs	r1, r4
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	40d1      	lsrs	r1, r2
 8001546:	3015      	adds	r0, #21
 8001548:	030a      	lsls	r2, r1, #12
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4084      	lsls	r4, r0
 800154e:	0b12      	lsrs	r2, r2, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	e001      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	4313      	orrs	r3, r2
 800155c:	0020      	movs	r0, r4
 800155e:	0019      	movs	r1, r3
 8001560:	bd10      	pop	{r4, pc}
 8001562:	0022      	movs	r2, r4
 8001564:	380b      	subs	r0, #11
 8001566:	4082      	lsls	r2, r0
 8001568:	055b      	lsls	r3, r3, #21
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	2400      	movs	r4, #0
 800156e:	0b12      	lsrs	r2, r2, #12
 8001570:	0d5b      	lsrs	r3, r3, #21
 8001572:	e7f1      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001574:	0000041e 	.word	0x0000041e

08001578 <__aeabi_cdrcmple>:
 8001578:	4684      	mov	ip, r0
 800157a:	0010      	movs	r0, r2
 800157c:	4662      	mov	r2, ip
 800157e:	468c      	mov	ip, r1
 8001580:	0019      	movs	r1, r3
 8001582:	4663      	mov	r3, ip
 8001584:	e000      	b.n	8001588 <__aeabi_cdcmpeq>
 8001586:	46c0      	nop			; (mov r8, r8)

08001588 <__aeabi_cdcmpeq>:
 8001588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800158a:	f000 f8f9 	bl	8001780 <__ledf2>
 800158e:	2800      	cmp	r0, #0
 8001590:	d401      	bmi.n	8001596 <__aeabi_cdcmpeq+0xe>
 8001592:	2100      	movs	r1, #0
 8001594:	42c8      	cmn	r0, r1
 8001596:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001598 <__aeabi_dcmpeq>:
 8001598:	b510      	push	{r4, lr}
 800159a:	f000 f849 	bl	8001630 <__eqdf2>
 800159e:	4240      	negs	r0, r0
 80015a0:	3001      	adds	r0, #1
 80015a2:	bd10      	pop	{r4, pc}

080015a4 <__aeabi_dcmplt>:
 80015a4:	b510      	push	{r4, lr}
 80015a6:	f000 f8eb 	bl	8001780 <__ledf2>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	db01      	blt.n	80015b2 <__aeabi_dcmplt+0xe>
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	2001      	movs	r0, #1
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)

080015b8 <__aeabi_dcmple>:
 80015b8:	b510      	push	{r4, lr}
 80015ba:	f000 f8e1 	bl	8001780 <__ledf2>
 80015be:	2800      	cmp	r0, #0
 80015c0:	dd01      	ble.n	80015c6 <__aeabi_dcmple+0xe>
 80015c2:	2000      	movs	r0, #0
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	2001      	movs	r0, #1
 80015c8:	bd10      	pop	{r4, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)

080015cc <__aeabi_dcmpgt>:
 80015cc:	b510      	push	{r4, lr}
 80015ce:	f000 f871 	bl	80016b4 <__gedf2>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	dc01      	bgt.n	80015da <__aeabi_dcmpgt+0xe>
 80015d6:	2000      	movs	r0, #0
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	2001      	movs	r0, #1
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	46c0      	nop			; (mov r8, r8)

080015e0 <__aeabi_dcmpge>:
 80015e0:	b510      	push	{r4, lr}
 80015e2:	f000 f867 	bl	80016b4 <__gedf2>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	da01      	bge.n	80015ee <__aeabi_dcmpge+0xe>
 80015ea:	2000      	movs	r0, #0
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)

080015f4 <__clzsi2>:
 80015f4:	211c      	movs	r1, #28
 80015f6:	2301      	movs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d301      	bcc.n	8001602 <__clzsi2+0xe>
 80015fe:	0c00      	lsrs	r0, r0, #16
 8001600:	3910      	subs	r1, #16
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	4298      	cmp	r0, r3
 8001606:	d301      	bcc.n	800160c <__clzsi2+0x18>
 8001608:	0a00      	lsrs	r0, r0, #8
 800160a:	3908      	subs	r1, #8
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	4298      	cmp	r0, r3
 8001610:	d301      	bcc.n	8001616 <__clzsi2+0x22>
 8001612:	0900      	lsrs	r0, r0, #4
 8001614:	3904      	subs	r1, #4
 8001616:	a202      	add	r2, pc, #8	; (adr r2, 8001620 <__clzsi2+0x2c>)
 8001618:	5c10      	ldrb	r0, [r2, r0]
 800161a:	1840      	adds	r0, r0, r1
 800161c:	4770      	bx	lr
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	02020304 	.word	0x02020304
 8001624:	01010101 	.word	0x01010101
	...

08001630 <__eqdf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	464e      	mov	r6, r9
 8001634:	4645      	mov	r5, r8
 8001636:	46de      	mov	lr, fp
 8001638:	4657      	mov	r7, sl
 800163a:	4690      	mov	r8, r2
 800163c:	b5e0      	push	{r5, r6, r7, lr}
 800163e:	0017      	movs	r7, r2
 8001640:	031a      	lsls	r2, r3, #12
 8001642:	0b12      	lsrs	r2, r2, #12
 8001644:	0005      	movs	r5, r0
 8001646:	4684      	mov	ip, r0
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <__eqdf2+0x80>)
 800164a:	030e      	lsls	r6, r1, #12
 800164c:	004c      	lsls	r4, r1, #1
 800164e:	4691      	mov	r9, r2
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	0fdb      	lsrs	r3, r3, #31
 8001654:	469b      	mov	fp, r3
 8001656:	0b36      	lsrs	r6, r6, #12
 8001658:	0d64      	lsrs	r4, r4, #21
 800165a:	0fc9      	lsrs	r1, r1, #31
 800165c:	0d52      	lsrs	r2, r2, #21
 800165e:	4284      	cmp	r4, r0
 8001660:	d019      	beq.n	8001696 <__eqdf2+0x66>
 8001662:	4282      	cmp	r2, r0
 8001664:	d010      	beq.n	8001688 <__eqdf2+0x58>
 8001666:	2001      	movs	r0, #1
 8001668:	4294      	cmp	r4, r2
 800166a:	d10e      	bne.n	800168a <__eqdf2+0x5a>
 800166c:	454e      	cmp	r6, r9
 800166e:	d10c      	bne.n	800168a <__eqdf2+0x5a>
 8001670:	2001      	movs	r0, #1
 8001672:	45c4      	cmp	ip, r8
 8001674:	d109      	bne.n	800168a <__eqdf2+0x5a>
 8001676:	4559      	cmp	r1, fp
 8001678:	d017      	beq.n	80016aa <__eqdf2+0x7a>
 800167a:	2c00      	cmp	r4, #0
 800167c:	d105      	bne.n	800168a <__eqdf2+0x5a>
 800167e:	0030      	movs	r0, r6
 8001680:	4328      	orrs	r0, r5
 8001682:	1e43      	subs	r3, r0, #1
 8001684:	4198      	sbcs	r0, r3
 8001686:	e000      	b.n	800168a <__eqdf2+0x5a>
 8001688:	2001      	movs	r0, #1
 800168a:	bcf0      	pop	{r4, r5, r6, r7}
 800168c:	46bb      	mov	fp, r7
 800168e:	46b2      	mov	sl, r6
 8001690:	46a9      	mov	r9, r5
 8001692:	46a0      	mov	r8, r4
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001696:	0033      	movs	r3, r6
 8001698:	2001      	movs	r0, #1
 800169a:	432b      	orrs	r3, r5
 800169c:	d1f5      	bne.n	800168a <__eqdf2+0x5a>
 800169e:	42a2      	cmp	r2, r4
 80016a0:	d1f3      	bne.n	800168a <__eqdf2+0x5a>
 80016a2:	464b      	mov	r3, r9
 80016a4:	433b      	orrs	r3, r7
 80016a6:	d1f0      	bne.n	800168a <__eqdf2+0x5a>
 80016a8:	e7e2      	b.n	8001670 <__eqdf2+0x40>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7ed      	b.n	800168a <__eqdf2+0x5a>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff

080016b4 <__gedf2>:
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	4647      	mov	r7, r8
 80016b8:	46ce      	mov	lr, r9
 80016ba:	0004      	movs	r4, r0
 80016bc:	0018      	movs	r0, r3
 80016be:	0016      	movs	r6, r2
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	0b1b      	lsrs	r3, r3, #12
 80016c4:	4d2d      	ldr	r5, [pc, #180]	; (800177c <__gedf2+0xc8>)
 80016c6:	004a      	lsls	r2, r1, #1
 80016c8:	4699      	mov	r9, r3
 80016ca:	b580      	push	{r7, lr}
 80016cc:	0043      	lsls	r3, r0, #1
 80016ce:	030f      	lsls	r7, r1, #12
 80016d0:	46a4      	mov	ip, r4
 80016d2:	46b0      	mov	r8, r6
 80016d4:	0b3f      	lsrs	r7, r7, #12
 80016d6:	0d52      	lsrs	r2, r2, #21
 80016d8:	0fc9      	lsrs	r1, r1, #31
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	0fc0      	lsrs	r0, r0, #31
 80016de:	42aa      	cmp	r2, r5
 80016e0:	d021      	beq.n	8001726 <__gedf2+0x72>
 80016e2:	42ab      	cmp	r3, r5
 80016e4:	d013      	beq.n	800170e <__gedf2+0x5a>
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d122      	bne.n	8001730 <__gedf2+0x7c>
 80016ea:	433c      	orrs	r4, r7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <__gedf2+0x42>
 80016f0:	464d      	mov	r5, r9
 80016f2:	432e      	orrs	r6, r5
 80016f4:	d022      	beq.n	800173c <__gedf2+0x88>
 80016f6:	2c00      	cmp	r4, #0
 80016f8:	d010      	beq.n	800171c <__gedf2+0x68>
 80016fa:	4281      	cmp	r1, r0
 80016fc:	d022      	beq.n	8001744 <__gedf2+0x90>
 80016fe:	2002      	movs	r0, #2
 8001700:	3901      	subs	r1, #1
 8001702:	4008      	ands	r0, r1
 8001704:	3801      	subs	r0, #1
 8001706:	bcc0      	pop	{r6, r7}
 8001708:	46b9      	mov	r9, r7
 800170a:	46b0      	mov	r8, r6
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	464d      	mov	r5, r9
 8001710:	432e      	orrs	r6, r5
 8001712:	d129      	bne.n	8001768 <__gedf2+0xb4>
 8001714:	2a00      	cmp	r2, #0
 8001716:	d1f0      	bne.n	80016fa <__gedf2+0x46>
 8001718:	433c      	orrs	r4, r7
 800171a:	d1ee      	bne.n	80016fa <__gedf2+0x46>
 800171c:	2800      	cmp	r0, #0
 800171e:	d1f2      	bne.n	8001706 <__gedf2+0x52>
 8001720:	2001      	movs	r0, #1
 8001722:	4240      	negs	r0, r0
 8001724:	e7ef      	b.n	8001706 <__gedf2+0x52>
 8001726:	003d      	movs	r5, r7
 8001728:	4325      	orrs	r5, r4
 800172a:	d11d      	bne.n	8001768 <__gedf2+0xb4>
 800172c:	4293      	cmp	r3, r2
 800172e:	d0ee      	beq.n	800170e <__gedf2+0x5a>
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e2      	bne.n	80016fa <__gedf2+0x46>
 8001734:	464c      	mov	r4, r9
 8001736:	4326      	orrs	r6, r4
 8001738:	d1df      	bne.n	80016fa <__gedf2+0x46>
 800173a:	e7e0      	b.n	80016fe <__gedf2+0x4a>
 800173c:	2000      	movs	r0, #0
 800173e:	2c00      	cmp	r4, #0
 8001740:	d0e1      	beq.n	8001706 <__gedf2+0x52>
 8001742:	e7dc      	b.n	80016fe <__gedf2+0x4a>
 8001744:	429a      	cmp	r2, r3
 8001746:	dc0a      	bgt.n	800175e <__gedf2+0xaa>
 8001748:	dbe8      	blt.n	800171c <__gedf2+0x68>
 800174a:	454f      	cmp	r7, r9
 800174c:	d8d7      	bhi.n	80016fe <__gedf2+0x4a>
 800174e:	d00e      	beq.n	800176e <__gedf2+0xba>
 8001750:	2000      	movs	r0, #0
 8001752:	454f      	cmp	r7, r9
 8001754:	d2d7      	bcs.n	8001706 <__gedf2+0x52>
 8001756:	2900      	cmp	r1, #0
 8001758:	d0e2      	beq.n	8001720 <__gedf2+0x6c>
 800175a:	0008      	movs	r0, r1
 800175c:	e7d3      	b.n	8001706 <__gedf2+0x52>
 800175e:	4243      	negs	r3, r0
 8001760:	4158      	adcs	r0, r3
 8001762:	0040      	lsls	r0, r0, #1
 8001764:	3801      	subs	r0, #1
 8001766:	e7ce      	b.n	8001706 <__gedf2+0x52>
 8001768:	2002      	movs	r0, #2
 800176a:	4240      	negs	r0, r0
 800176c:	e7cb      	b.n	8001706 <__gedf2+0x52>
 800176e:	45c4      	cmp	ip, r8
 8001770:	d8c5      	bhi.n	80016fe <__gedf2+0x4a>
 8001772:	2000      	movs	r0, #0
 8001774:	45c4      	cmp	ip, r8
 8001776:	d2c6      	bcs.n	8001706 <__gedf2+0x52>
 8001778:	e7ed      	b.n	8001756 <__gedf2+0xa2>
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff

08001780 <__ledf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	4647      	mov	r7, r8
 8001784:	46ce      	mov	lr, r9
 8001786:	0004      	movs	r4, r0
 8001788:	0018      	movs	r0, r3
 800178a:	0016      	movs	r6, r2
 800178c:	031b      	lsls	r3, r3, #12
 800178e:	0b1b      	lsrs	r3, r3, #12
 8001790:	4d2c      	ldr	r5, [pc, #176]	; (8001844 <__ledf2+0xc4>)
 8001792:	004a      	lsls	r2, r1, #1
 8001794:	4699      	mov	r9, r3
 8001796:	b580      	push	{r7, lr}
 8001798:	0043      	lsls	r3, r0, #1
 800179a:	030f      	lsls	r7, r1, #12
 800179c:	46a4      	mov	ip, r4
 800179e:	46b0      	mov	r8, r6
 80017a0:	0b3f      	lsrs	r7, r7, #12
 80017a2:	0d52      	lsrs	r2, r2, #21
 80017a4:	0fc9      	lsrs	r1, r1, #31
 80017a6:	0d5b      	lsrs	r3, r3, #21
 80017a8:	0fc0      	lsrs	r0, r0, #31
 80017aa:	42aa      	cmp	r2, r5
 80017ac:	d00d      	beq.n	80017ca <__ledf2+0x4a>
 80017ae:	42ab      	cmp	r3, r5
 80017b0:	d010      	beq.n	80017d4 <__ledf2+0x54>
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d127      	bne.n	8001806 <__ledf2+0x86>
 80017b6:	433c      	orrs	r4, r7
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <__ledf2+0x60>
 80017bc:	464d      	mov	r5, r9
 80017be:	432e      	orrs	r6, r5
 80017c0:	d10e      	bne.n	80017e0 <__ledf2+0x60>
 80017c2:	2000      	movs	r0, #0
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d015      	beq.n	80017f4 <__ledf2+0x74>
 80017c8:	e00e      	b.n	80017e8 <__ledf2+0x68>
 80017ca:	003d      	movs	r5, r7
 80017cc:	4325      	orrs	r5, r4
 80017ce:	d110      	bne.n	80017f2 <__ledf2+0x72>
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d118      	bne.n	8001806 <__ledf2+0x86>
 80017d4:	464d      	mov	r5, r9
 80017d6:	432e      	orrs	r6, r5
 80017d8:	d10b      	bne.n	80017f2 <__ledf2+0x72>
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d102      	bne.n	80017e4 <__ledf2+0x64>
 80017de:	433c      	orrs	r4, r7
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d00b      	beq.n	80017fc <__ledf2+0x7c>
 80017e4:	4281      	cmp	r1, r0
 80017e6:	d014      	beq.n	8001812 <__ledf2+0x92>
 80017e8:	2002      	movs	r0, #2
 80017ea:	3901      	subs	r1, #1
 80017ec:	4008      	ands	r0, r1
 80017ee:	3801      	subs	r0, #1
 80017f0:	e000      	b.n	80017f4 <__ledf2+0x74>
 80017f2:	2002      	movs	r0, #2
 80017f4:	bcc0      	pop	{r6, r7}
 80017f6:	46b9      	mov	r9, r7
 80017f8:	46b0      	mov	r8, r6
 80017fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d1f9      	bne.n	80017f4 <__ledf2+0x74>
 8001800:	2001      	movs	r0, #1
 8001802:	4240      	negs	r0, r0
 8001804:	e7f6      	b.n	80017f4 <__ledf2+0x74>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ec      	bne.n	80017e4 <__ledf2+0x64>
 800180a:	464c      	mov	r4, r9
 800180c:	4326      	orrs	r6, r4
 800180e:	d1e9      	bne.n	80017e4 <__ledf2+0x64>
 8001810:	e7ea      	b.n	80017e8 <__ledf2+0x68>
 8001812:	429a      	cmp	r2, r3
 8001814:	dd04      	ble.n	8001820 <__ledf2+0xa0>
 8001816:	4243      	negs	r3, r0
 8001818:	4158      	adcs	r0, r3
 800181a:	0040      	lsls	r0, r0, #1
 800181c:	3801      	subs	r0, #1
 800181e:	e7e9      	b.n	80017f4 <__ledf2+0x74>
 8001820:	429a      	cmp	r2, r3
 8001822:	dbeb      	blt.n	80017fc <__ledf2+0x7c>
 8001824:	454f      	cmp	r7, r9
 8001826:	d8df      	bhi.n	80017e8 <__ledf2+0x68>
 8001828:	d006      	beq.n	8001838 <__ledf2+0xb8>
 800182a:	2000      	movs	r0, #0
 800182c:	454f      	cmp	r7, r9
 800182e:	d2e1      	bcs.n	80017f4 <__ledf2+0x74>
 8001830:	2900      	cmp	r1, #0
 8001832:	d0e5      	beq.n	8001800 <__ledf2+0x80>
 8001834:	0008      	movs	r0, r1
 8001836:	e7dd      	b.n	80017f4 <__ledf2+0x74>
 8001838:	45c4      	cmp	ip, r8
 800183a:	d8d5      	bhi.n	80017e8 <__ledf2+0x68>
 800183c:	2000      	movs	r0, #0
 800183e:	45c4      	cmp	ip, r8
 8001840:	d2d8      	bcs.n	80017f4 <__ledf2+0x74>
 8001842:	e7f5      	b.n	8001830 <__ledf2+0xb0>
 8001844:	000007ff 	.word	0x000007ff

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 fb5f 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f8cd 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f000 f9ed 	bl	8001c34 <MX_GPIO_Init>
  MX_TIM1_Init();
 800185a:	f000 f96b 	bl	8001b34 <MX_TIM1_Init>
  MX_I2C1_Init();
 800185e:	f000 f929 	bl	8001ab4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001862:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <main+0x188>)
 8001864:	0018      	movs	r0, r3
 8001866:	f002 fb2b 	bl	8003ec0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	00d9      	lsls	r1, r3, #3
 800186e:	2390      	movs	r3, #144	; 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	2200      	movs	r2, #0
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fdf0 	bl	800245a <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0b11010001, 1, 100);
 800187a:	1dfc      	adds	r4, r7, #7
 800187c:	4855      	ldr	r0, [pc, #340]	; (80019d4 <main+0x18c>)
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2201      	movs	r2, #1
 8001882:	21d1      	movs	r1, #209	; 0xd1
 8001884:	f001 f8fe 	bl	8002a84 <HAL_I2C_IsDeviceReady>
 8001888:	0003      	movs	r3, r0
 800188a:	7023      	strb	r3, [r4, #0]
  ret = HAL_I2C_Mem_Write(&hi2c1, 0b11010000, 28, 1, 0, 1, 100);
 800188c:	1dfc      	adds	r4, r7, #7
 800188e:	4851      	ldr	r0, [pc, #324]	; (80019d4 <main+0x18c>)
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2300      	movs	r3, #0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	221c      	movs	r2, #28
 80018a0:	21d0      	movs	r1, #208	; 0xd0
 80018a2:	f000 fe8d 	bl	80025c0 <HAL_I2C_Mem_Write>
 80018a6:	0003      	movs	r3, r0
 80018a8:	7023      	strb	r3, [r4, #0]
  ret = HAL_I2C_Mem_Write(&hi2c1, 0b11010000, 107, 1, 0b00001000, 1, 100);
 80018aa:	1dfc      	adds	r4, r7, #7
 80018ac:	4849      	ldr	r0, [pc, #292]	; (80019d4 <main+0x18c>)
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	2301      	movs	r3, #1
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	2308      	movs	r3, #8
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	226b      	movs	r2, #107	; 0x6b
 80018be:	21d0      	movs	r1, #208	; 0xd0
 80018c0:	f000 fe7e 	bl	80025c0 <HAL_I2C_Mem_Write>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	00d9      	lsls	r1, r3, #3
 80018cc:	2390      	movs	r3, #144	; 0x90
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	2201      	movs	r2, #1
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fdc1 	bl	800245a <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <main+0x188>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <main+0x188>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d9fa      	bls.n	80018e2 <main+0x9a>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	2390      	movs	r3, #144	; 0x90
 80018f2:	05db      	lsls	r3, r3, #23
 80018f4:	2200      	movs	r2, #0
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fdaf 	bl	800245a <HAL_GPIO_WritePin>
	  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9)));
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	009a      	lsls	r2, r3, #2
 8001902:	2390      	movs	r3, #144	; 0x90
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	0011      	movs	r1, r2
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fd89 	bl	8002420 <HAL_GPIO_ReadPin>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d0f5      	beq.n	80018fe <main+0xb6>
	  valsubida = __HAL_TIM_GET_COUNTER (&htim1);
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <main+0x188>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <main+0x190>)
 800191a:	601a      	str	r2, [r3, #0]
	  while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)));
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	009a      	lsls	r2, r3, #2
 8001922:	2390      	movs	r3, #144	; 0x90
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f000 fd79 	bl	8002420 <HAL_GPIO_ReadPin>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d1f5      	bne.n	800191e <main+0xd6>
	  valdescida = __HAL_TIM_GET_COUNTER (&htim1);
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <main+0x188>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <main+0x194>)
 800193a:	601a      	str	r2, [r3, #0]
	  distance = (valdescida-valsubida)* 0.034/2;
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <main+0x194>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <main+0x190>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fdf0 	bl	800152c <__aeabi_ui2d>
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <main+0x198>)
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <main+0x19c>)
 8001950:	f7fe ff72 	bl	8000838 <__aeabi_dmul>
 8001954:	0002      	movs	r2, r0
 8001956:	000b      	movs	r3, r1
 8001958:	0010      	movs	r0, r2
 800195a:	0019      	movs	r1, r3
 800195c:	2200      	movs	r2, #0
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	f7fe fc7b 	bl	800025c <__aeabi_ddiv>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	f7fe fc57 	bl	8000220 <__aeabi_d2uiz>
 8001972:	0003      	movs	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <main+0x1a0>)
 8001978:	801a      	strh	r2, [r3, #0]
	  uint8_t xvect[2];
	  HAL_I2C_Mem_Read(&hi2c1, 0b11010001, 59, 1, xvect, 2, 100);
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <main+0x18c>)
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	2302      	movs	r3, #2
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	223b      	movs	r2, #59	; 0x3b
 800198c:	21d1      	movs	r1, #209	; 0xd1
 800198e:	f000 ff45 	bl	800281c <HAL_I2C_Mem_Read>
	  xacc = xvect[0] << 8 + xvect[1];
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	001a      	movs	r2, r3
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	3308      	adds	r3, #8
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <main+0x1a4>)
 80019a6:	801a      	strh	r2, [r3, #0]
	  if(distance <= 30){
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <main+0x1a0>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b1e      	cmp	r3, #30
 80019ae:	d807      	bhi.n	80019c0 <main+0x178>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80019b0:	2390      	movs	r3, #144	; 0x90
 80019b2:	05db      	lsls	r3, r3, #23
 80019b4:	2201      	movs	r2, #1
 80019b6:	2101      	movs	r1, #1
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 fd4e 	bl	800245a <HAL_GPIO_WritePin>
 80019be:	e783      	b.n	80018c8 <main+0x80>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80019c0:	2390      	movs	r3, #144	; 0x90
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	2200      	movs	r2, #0
 80019c6:	2101      	movs	r1, #1
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 fd46 	bl	800245a <HAL_GPIO_WritePin>
  {
 80019ce:	e77b      	b.n	80018c8 <main+0x80>
 80019d0:	2000007c 	.word	0x2000007c
 80019d4:	20000028 	.word	0x20000028
 80019d8:	200000c4 	.word	0x200000c4
 80019dc:	200000c8 	.word	0x200000c8
 80019e0:	b020c49c 	.word	0xb020c49c
 80019e4:	3fa16872 	.word	0x3fa16872
 80019e8:	200000cc 	.word	0x200000cc
 80019ec:	200000ce 	.word	0x200000ce

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b097      	sub	sp, #92	; 0x5c
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	2428      	movs	r4, #40	; 0x28
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	0018      	movs	r0, r3
 80019fc:	2330      	movs	r3, #48	; 0x30
 80019fe:	001a      	movs	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	f002 fedd 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a06:	2318      	movs	r3, #24
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	001a      	movs	r2, r3
 8001a10:	2100      	movs	r1, #0
 8001a12:	f002 fed5 	bl	80047c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2314      	movs	r3, #20
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f002 fece 	bl	80047c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a24:	0021      	movs	r1, r4
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2201      	movs	r2, #1
 8001a30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2210      	movs	r2, #16
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	0212      	lsls	r2, r2, #8
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	0352      	lsls	r2, r2, #13
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2200      	movs	r2, #0
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	0018      	movs	r0, r3
 8001a58:	f001 fcc0 	bl	80033dc <HAL_RCC_OscConfig>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a60:	f000 f932 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	2118      	movs	r1, #24
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2202      	movs	r2, #2
 8001a70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2101      	movs	r1, #1
 8001a82:	0018      	movs	r0, r3
 8001a84:	f001 ffc8 	bl	8003a18 <HAL_RCC_ClockConfig>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a8c:	f000 f91c 	bl	8001cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2220      	movs	r2, #32
 8001a94:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f002 f8e0 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	1e03      	subs	r3, r0, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001aa8:	f000 f90e 	bl	8001cc8 <Error_Handler>
  }
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b017      	add	sp, #92	; 0x5c
 8001ab2:	bd90      	pop	{r4, r7, pc}

08001ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <MX_I2C1_Init+0x78>)
 8001abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <MX_I2C1_Init+0x7c>)
 8001ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 fccf 	bl	8002494 <HAL_I2C_Init>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001afa:	f000 f8e5 	bl	8001cc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001b00:	2100      	movs	r1, #0
 8001b02:	0018      	movs	r0, r3
 8001b04:	f001 fbd2 	bl	80032ac <HAL_I2CEx_ConfigAnalogFilter>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f000 f8dc 	bl	8001cc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <MX_I2C1_Init+0x74>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f001 fc15 	bl	8003344 <HAL_I2CEx_ConfigDigitalFilter>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f8d3 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000028 	.word	0x20000028
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	2000090e 	.word	0x2000090e

08001b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	2318      	movs	r3, #24
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2310      	movs	r3, #16
 8001b42:	001a      	movs	r2, r3
 8001b44:	2100      	movs	r1, #0
 8001b46:	f002 fe3b 	bl	80047c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2308      	movs	r3, #8
 8001b52:	001a      	movs	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	f002 fe33 	bl	80047c0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b5a:	003b      	movs	r3, r7
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	2310      	movs	r3, #16
 8001b60:	001a      	movs	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f002 fe2c 	bl	80047c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b6a:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <MX_TIM1_Init+0xf8>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b70:	222f      	movs	r2, #47	; 0x2f
 8001b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b7c:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <MX_TIM1_Init+0xfc>)
 8001b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 f943 	bl	8003e20 <HAL_TIM_Base_Init>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f000 f893 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	2118      	movs	r1, #24
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	0152      	lsls	r2, r2, #5
 8001baa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bac:	187a      	adds	r2, r7, r1
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f002 fabe 	bl	8004134 <HAL_TIM_ConfigClockSource>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001bbc:	f000 f884 	bl	8001cc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f002 f9ba 	bl	8003f3c <HAL_TIM_IC_Init>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001bcc:	f000 f87c 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bde:	187a      	adds	r2, r7, r1
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001be2:	0011      	movs	r1, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f002 fd99 	bl	800471c <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001bee:	f000 f86b 	bl	8001cc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf2:	003b      	movs	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bfe:	003b      	movs	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001c04:	003b      	movs	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c0a:	0039      	movs	r1, r7
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_TIM1_Init+0xf4>)
 8001c0e:	2204      	movs	r2, #4
 8001c10:	0018      	movs	r0, r3
 8001c12:	f002 f9eb 	bl	8003fec <HAL_TIM_IC_ConfigChannel>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001c1a:	f000 f855 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b00a      	add	sp, #40	; 0x28
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	2000007c 	.word	0x2000007c
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	0000ffff 	.word	0x0000ffff

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	240c      	movs	r4, #12
 8001c3c:	193b      	adds	r3, r7, r4
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2314      	movs	r3, #20
 8001c42:	001a      	movs	r2, r3
 8001c44:	2100      	movs	r1, #0
 8001c46:	f002 fdbb 	bl	80047c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	03c9      	lsls	r1, r1, #15
 8001c54:	430a      	orrs	r2, r1
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	03db      	lsls	r3, r3, #15
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0289      	lsls	r1, r1, #10
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_GPIO_Init+0x8c>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c82:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <MX_GPIO_Init+0x90>)
 8001c84:	2390      	movs	r3, #144	; 0x90
 8001c86:	05db      	lsls	r3, r3, #23
 8001c88:	2200      	movs	r2, #0
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 fbe5 	bl	800245a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8001c90:	0021      	movs	r1, r4
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <MX_GPIO_Init+0x90>)
 8001c96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	187a      	adds	r2, r7, r1
 8001cac:	2390      	movs	r3, #144	; 0x90
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fa44 	bl	8002140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b009      	add	sp, #36	; 0x24
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00000407 	.word	0x00000407

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_MspInit+0x44>)
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_MspInit+0x44>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	619a      	str	r2, [r3, #24]
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_MspInit+0x44>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0549      	lsls	r1, r1, #21
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	61da      	str	r2, [r3, #28]
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_MspInit+0x44>)
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	055b      	lsls	r3, r3, #21
 8001d08:	4013      	ands	r3, r2
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	2414      	movs	r4, #20
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	0018      	movs	r0, r3
 8001d2a:	2314      	movs	r3, #20
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f002 fd46 	bl	80047c0 <memset>
  if(hi2c->Instance==I2C1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_I2C_MspInit+0x90>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d131      	bne.n	8001da2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	03c9      	lsls	r1, r1, #15
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	03db      	lsls	r3, r3, #15
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d5a:	0021      	movs	r1, r4
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2212      	movs	r2, #18
 8001d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2203      	movs	r2, #3
 8001d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2201      	movs	r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_I2C_MspInit+0x98>)
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f000 f9dd 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0389      	lsls	r1, r1, #14
 8001d90:	430a      	orrs	r2, r1
 8001d92:	61da      	str	r2, [r3, #28]
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_I2C_MspInit+0x94>)
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	039b      	lsls	r3, r3, #14
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b00b      	add	sp, #44	; 0x2c
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48001400 	.word	0x48001400

08001db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	2414      	movs	r4, #20
 8001dc2:	193b      	adds	r3, r7, r4
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	2314      	movs	r3, #20
 8001dc8:	001a      	movs	r2, r3
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f002 fcf8 	bl	80047c0 <memset>
  if(htim_base->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_TIM_Base_MspInit+0x94>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d133      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0109      	lsls	r1, r1, #4
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0289      	lsls	r1, r1, #10
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	2202      	movs	r2, #2
 8001e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	2202      	movs	r2, #2
 8001e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	187a      	adds	r2, r7, r1
 8001e36:	2390      	movs	r3, #144	; 0x90
 8001e38:	05db      	lsls	r3, r3, #23
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f97f 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b00b      	add	sp, #44	; 0x2c
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40021000 	.word	0x40021000

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f892 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e8c:	4813      	ldr	r0, [pc, #76]	; (8001edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e90:	f7ff fff7 	bl	8001e82 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001e94:	4812      	ldr	r0, [pc, #72]	; (8001ee0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001e96:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001e98:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <LoopForever+0xa>)
    CMP R1, R2
 8001e9c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001e9e:	d105      	bne.n	8001eac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001ea0:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ea2:	4912      	ldr	r1, [pc, #72]	; (8001eec <LoopForever+0x12>)
    STR R1, [R0]
 8001ea4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ea8:	4912      	ldr	r1, [pc, #72]	; (8001ef4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001eaa:	6001      	str	r1, [r0, #0]

08001eac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001eae:	4913      	ldr	r1, [pc, #76]	; (8001efc <LoopForever+0x22>)
  ldr r2, =_sidata
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <LoopForever+0x26>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001ec4:	4c10      	ldr	r4, [pc, #64]	; (8001f08 <LoopForever+0x2e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ed2:	f002 fc7d 	bl	80047d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7ff fcb7 	bl	8001848 <main>

08001eda <LoopForever>:

LoopForever:
    b LoopForever
 8001eda:	e7fe      	b.n	8001eda <LoopForever>
  ldr   r0, =_estack
 8001edc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001ee0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001ee4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001ee8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001eec:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001ef0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001ef4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f00:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8001f04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f08:	200000d4 	.word	0x200000d4

08001f0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_IRQHandler>
	...

08001f10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_Init+0x24>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_Init+0x24>)
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f809 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f26:	f7ff fed5 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f42:	681c      	ldr	r4, [r3, #0]
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_InitTick+0x60>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	0019      	movs	r1, r3
 8001f4a:	23fa      	movs	r3, #250	; 0xfa
 8001f4c:	0098      	lsls	r0, r3, #2
 8001f4e:	f7fe f8db 	bl	8000108 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	0019      	movs	r1, r3
 8001f56:	0020      	movs	r0, r4
 8001f58:	f7fe f8d6 	bl	8000108 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f8e1 	bl	8002126 <HAL_SYSTICK_Config>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00f      	b.n	8001f8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d80b      	bhi.n	8001f8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	2301      	movs	r3, #1
 8001f76:	425b      	negs	r3, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f8be 	bl	80020fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_InitTick+0x64>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b003      	add	sp, #12
 8001f92:	bd90      	pop	{r4, r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_IncTick+0x1c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	001a      	movs	r2, r3
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	18d2      	adds	r2, r2, r3
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200000d0 	.word	0x200000d0

08001fc4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_GetTick+0x10>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	200000d0 	.word	0x200000d0

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	0002      	movs	r2, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b7f      	cmp	r3, #127	; 0x7f
 8001fec:	d828      	bhi.n	8002040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <__NVIC_SetPriority+0xd4>)
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	33c0      	adds	r3, #192	; 0xc0
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	589b      	ldr	r3, [r3, r2]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	; 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	481f      	ldr	r0, [pc, #124]	; (80020ac <__NVIC_SetPriority+0xd4>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	430a      	orrs	r2, r1
 8002038:	33c0      	adds	r3, #192	; 0xc0
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800203e:	e031      	b.n	80020a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0019      	movs	r1, r3
 8002048:	230f      	movs	r3, #15
 800204a:	400b      	ands	r3, r1
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3306      	adds	r3, #6
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1dfa      	adds	r2, r7, #7
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	0011      	movs	r1, r2
 8002060:	2203      	movs	r2, #3
 8002062:	400a      	ands	r2, r1
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	401a      	ands	r2, r3
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0018      	movs	r0, r3
 8002080:	2303      	movs	r3, #3
 8002082:	4003      	ands	r3, r0
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	001c      	movs	r4, r3
 8002090:	230f      	movs	r3, #15
 8002092:	4023      	ands	r3, r4
 8002094:	3b08      	subs	r3, #8
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	430a      	orrs	r2, r1
 800209a:	3306      	adds	r3, #6
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	18c3      	adds	r3, r0, r3
 80020a0:	3304      	adds	r3, #4
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b003      	add	sp, #12
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	045b      	lsls	r3, r3, #17
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d301      	bcc.n	80020cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c8:	2301      	movs	r3, #1
 80020ca:	e010      	b.n	80020ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SysTick_Config+0x44>)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	3a01      	subs	r2, #1
 80020d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d4:	2301      	movs	r3, #1
 80020d6:	425b      	negs	r3, r3
 80020d8:	2103      	movs	r1, #3
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff ff7c 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x44>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x44>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	210f      	movs	r1, #15
 8002108:	187b      	adds	r3, r7, r1
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	187b      	adds	r3, r7, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ffbf 	bl	80020b4 <SysTick_Config>
 8002136:	0003      	movs	r3, r0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e14f      	b.n	80023f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4091      	lsls	r1, r2
 800215a:	000a      	movs	r2, r1
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d100      	bne.n	8002168 <HAL_GPIO_Init+0x28>
 8002166:	e140      	b.n	80023ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800217c:	2b02      	cmp	r3, #2
 800217e:	d130      	bne.n	80021e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b6:	2201      	movs	r2, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	2201      	movs	r2, #1
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d017      	beq.n	800221e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	409a      	lsls	r2, r3
 80021fc:	0013      	movs	r3, r2
 80021fe:	43da      	mvns	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d123      	bne.n	8002272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	58d3      	ldr	r3, [r2, r3]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	43da      	mvns	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2107      	movs	r1, #7
 8002256:	400b      	ands	r3, r1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	401a      	ands	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d100      	bne.n	80022b4 <HAL_GPIO_Init+0x174>
 80022b2:	e09a      	b.n	80023ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b4:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	430a      	orrs	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_GPIO_Init+0x2cc>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	589b      	ldr	r3, [r3, r2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2203      	movs	r2, #3
 80022de:	4013      	ands	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	409a      	lsls	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	43da      	mvns	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	2390      	movs	r3, #144	; 0x90
 80022f4:	05db      	lsls	r3, r3, #23
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x1e2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x1de>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a43      	ldr	r2, [pc, #268]	; (8002414 <HAL_GPIO_Init+0x2d4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x1da>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a42      	ldr	r2, [pc, #264]	; (8002418 <HAL_GPIO_Init+0x2d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x1d6>
 8002312:	2303      	movs	r3, #3
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x1e4>
 8002316:	2305      	movs	r3, #5
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x1e4>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x1e4>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x1e4>
 8002322:	2300      	movs	r3, #0
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	2103      	movs	r1, #3
 8002328:	400a      	ands	r2, r1
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x2cc>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_GPIO_Init+0x2dc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	035b      	lsls	r3, r3, #13
 800235a:	4013      	ands	r3, r2
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_GPIO_Init+0x2dc>)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_GPIO_Init+0x2dc>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	039b      	lsls	r3, r3, #14
 8002384:	4013      	ands	r3, r2
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_GPIO_Init+0x2dc>)
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_GPIO_Init+0x2dc>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43da      	mvns	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	4013      	ands	r3, r2
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43da      	mvns	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	4013      	ands	r3, r2
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	40da      	lsrs	r2, r3
 80023f8:	1e13      	subs	r3, r2, #0
 80023fa:	d000      	beq.n	80023fe <HAL_GPIO_Init+0x2be>
 80023fc:	e6a8      	b.n	8002150 <HAL_GPIO_Init+0x10>
  } 
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b006      	add	sp, #24
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	40010000 	.word	0x40010000
 8002410:	48000400 	.word	0x48000400
 8002414:	48000800 	.word	0x48000800
 8002418:	48000c00 	.word	0x48000c00
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	000a      	movs	r2, r1
 800242a:	1cbb      	adds	r3, r7, #2
 800242c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	1cba      	adds	r2, r7, #2
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	4013      	ands	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800243a:	230f      	movs	r3, #15
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e003      	b.n	800244c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002444:	230f      	movs	r3, #15
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800244c:	230f      	movs	r3, #15
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	781b      	ldrb	r3, [r3, #0]
  }
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	0008      	movs	r0, r1
 8002464:	0011      	movs	r1, r2
 8002466:	1cbb      	adds	r3, r7, #2
 8002468:	1c02      	adds	r2, r0, #0
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	1c7b      	adds	r3, r7, #1
 800246e:	1c0a      	adds	r2, r1, #0
 8002470:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002472:	1c7b      	adds	r3, r7, #1
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002482:	e003      	b.n	800248c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002484:	1cbb      	adds	r3, r7, #2
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e082      	b.n	80025ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2241      	movs	r2, #65	; 0x41
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff fc2d 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2241      	movs	r2, #65	; 0x41
 80024c6:	2124      	movs	r1, #36	; 0x24
 80024c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_I2C_Init+0x120>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4931      	ldr	r1, [pc, #196]	; (80025b8 <HAL_I2C_Init+0x124>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d108      	bne.n	8002512 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0209      	lsls	r1, r1, #8
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e007      	b.n	8002522 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2184      	movs	r1, #132	; 0x84
 800251c:	0209      	lsls	r1, r1, #8
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d104      	bne.n	8002534 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	491f      	ldr	r1, [pc, #124]	; (80025bc <HAL_I2C_Init+0x128>)
 8002540:	430a      	orrs	r2, r1
 8002542:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	491a      	ldr	r1, [pc, #104]	; (80025b8 <HAL_I2C_Init+0x124>)
 8002550:	400a      	ands	r2, r1
 8002552:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	431a      	orrs	r2, r3
 800255e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69d9      	ldr	r1, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2241      	movs	r2, #65	; 0x41
 8002598:	2120      	movs	r1, #32
 800259a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2242      	movs	r2, #66	; 0x42
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f0ffffff 	.word	0xf0ffffff
 80025b8:	ffff7fff 	.word	0xffff7fff
 80025bc:	02008000 	.word	0x02008000

080025c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	000c      	movs	r4, r1
 80025ca:	0010      	movs	r0, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	230a      	movs	r3, #10
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	1c22      	adds	r2, r4, #0
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	2308      	movs	r3, #8
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	1c02      	adds	r2, r0, #0
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	1dbb      	adds	r3, r7, #6
 80025e0:	1c0a      	adds	r2, r1, #0
 80025e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2241      	movs	r2, #65	; 0x41
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d000      	beq.n	80025f2 <HAL_I2C_Mem_Write+0x32>
 80025f0:	e10c      	b.n	800280c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_I2C_Mem_Write+0x42>
 80025f8:	232c      	movs	r3, #44	; 0x2c
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0ff      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_I2C_Mem_Write+0x5c>
 8002618:	2302      	movs	r3, #2
 800261a:	e0f8      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	2101      	movs	r1, #1
 8002622:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002624:	f7ff fcce 	bl	8001fc4 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	0219      	lsls	r1, r3, #8
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2319      	movs	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	f000 fc25 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e3      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2241      	movs	r2, #65	; 0x41
 800264a:	2121      	movs	r1, #33	; 0x21
 800264c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2242      	movs	r2, #66	; 0x42
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	222c      	movs	r2, #44	; 0x2c
 8002666:	18ba      	adds	r2, r7, r2
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002672:	1dbb      	adds	r3, r7, #6
 8002674:	881c      	ldrh	r4, [r3, #0]
 8002676:	2308      	movs	r3, #8
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	230a      	movs	r3, #10
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	8819      	ldrh	r1, [r3, #0]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	0023      	movs	r3, r4
 800268e:	f000 fb13 	bl	8002cb8 <I2C_RequestMemoryWrite>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d005      	beq.n	80026a2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0b5      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d911      	bls.n	80026d0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	045c      	lsls	r4, r3, #17
 80026bc:	230a      	movs	r3, #10
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	8819      	ldrh	r1, [r3, #0]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	0023      	movs	r3, r4
 80026ca:	f000 fdb5 	bl	8003238 <I2C_TransferConfig>
 80026ce:	e012      	b.n	80026f6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049c      	lsls	r4, r3, #18
 80026e4:	230a      	movs	r3, #10
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	8819      	ldrh	r1, [r3, #0]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	2300      	movs	r3, #0
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	0023      	movs	r3, r4
 80026f2:	f000 fda1 	bl	8003238 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fc11 	bl	8002f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e081      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d03a      	beq.n	80027ba <HAL_I2C_Mem_Write+0x1fa>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d136      	bne.n	80027ba <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800274c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	0013      	movs	r3, r2
 8002756:	2200      	movs	r2, #0
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	f000 fb95 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e053      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2bff      	cmp	r3, #255	; 0xff
 800276e:	d911      	bls.n	8002794 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	b2da      	uxtb	r2, r3
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	045c      	lsls	r4, r3, #17
 8002780:	230a      	movs	r3, #10
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	8819      	ldrh	r1, [r3, #0]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	0023      	movs	r3, r4
 800278e:	f000 fd53 	bl	8003238 <I2C_TransferConfig>
 8002792:	e012      	b.n	80027ba <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	049c      	lsls	r4, r3, #18
 80027a8:	230a      	movs	r3, #10
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	8819      	ldrh	r1, [r3, #0]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	0023      	movs	r3, r4
 80027b6:	f000 fd3f 	bl	8003238 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d198      	bne.n	80026f6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 fbf0 	bl	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01a      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	490b      	ldr	r1, [pc, #44]	; (8002818 <HAL_I2C_Mem_Write+0x258>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2241      	movs	r2, #65	; 0x41
 80027f4:	2120      	movs	r1, #32
 80027f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2242      	movs	r2, #66	; 0x42
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b007      	add	sp, #28
 8002814:	bd90      	pop	{r4, r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	fe00e800 	.word	0xfe00e800

0800281c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	000c      	movs	r4, r1
 8002826:	0010      	movs	r0, r2
 8002828:	0019      	movs	r1, r3
 800282a:	230a      	movs	r3, #10
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	1c22      	adds	r2, r4, #0
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	2308      	movs	r3, #8
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	1c02      	adds	r2, r0, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	1c0a      	adds	r2, r1, #0
 800283e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2241      	movs	r2, #65	; 0x41
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d000      	beq.n	800284e <HAL_I2C_Mem_Read+0x32>
 800284c:	e110      	b.n	8002a70 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_I2C_Mem_Read+0x42>
 8002854:	232c      	movs	r3, #44	; 0x2c
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e103      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_I2C_Mem_Read+0x5c>
 8002874:	2302      	movs	r3, #2
 8002876:	e0fc      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	2101      	movs	r1, #1
 800287e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002880:	f7ff fba0 	bl	8001fc4 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	0219      	lsls	r1, r3, #8
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2319      	movs	r3, #25
 8002894:	2201      	movs	r2, #1
 8002896:	f000 faf7 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0e7      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2241      	movs	r2, #65	; 0x41
 80028a6:	2122      	movs	r1, #34	; 0x22
 80028a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2242      	movs	r2, #66	; 0x42
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	222c      	movs	r2, #44	; 0x2c
 80028c2:	18ba      	adds	r2, r7, r2
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ce:	1dbb      	adds	r3, r7, #6
 80028d0:	881c      	ldrh	r4, [r3, #0]
 80028d2:	2308      	movs	r3, #8
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	230a      	movs	r3, #10
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	8819      	ldrh	r1, [r3, #0]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	0023      	movs	r3, r4
 80028ea:	f000 fa49 	bl	8002d80 <I2C_RequestMemoryRead>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d005      	beq.n	80028fe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0b9      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	2bff      	cmp	r3, #255	; 0xff
 8002906:	d911      	bls.n	800292c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	b2da      	uxtb	r2, r3
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	045c      	lsls	r4, r3, #17
 8002918:	230a      	movs	r3, #10
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	8819      	ldrh	r1, [r3, #0]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_I2C_Mem_Read+0x260>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	0023      	movs	r3, r4
 8002926:	f000 fc87 	bl	8003238 <I2C_TransferConfig>
 800292a:	e012      	b.n	8002952 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	b2da      	uxtb	r2, r3
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	049c      	lsls	r4, r3, #18
 8002940:	230a      	movs	r3, #10
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	8819      	ldrh	r1, [r3, #0]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_I2C_Mem_Read+0x260>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	0023      	movs	r3, r4
 800294e:	f000 fc73 	bl	8003238 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	0013      	movs	r3, r2
 800295c:	2200      	movs	r2, #0
 800295e:	2104      	movs	r1, #4
 8002960:	f000 fa92 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e082      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03a      	beq.n	8002a1e <HAL_I2C_Mem_Read+0x202>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d136      	bne.n	8002a1e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	0013      	movs	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	f000 fa63 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e053      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2bff      	cmp	r3, #255	; 0xff
 80029d2:	d911      	bls.n	80029f8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	045c      	lsls	r4, r3, #17
 80029e4:	230a      	movs	r3, #10
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	8819      	ldrh	r1, [r3, #0]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	0023      	movs	r3, r4
 80029f2:	f000 fc21 	bl	8003238 <I2C_TransferConfig>
 80029f6:	e012      	b.n	8002a1e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	049c      	lsls	r4, r3, #18
 8002a0c:	230a      	movs	r3, #10
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	8819      	ldrh	r1, [r3, #0]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	2300      	movs	r3, #0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	0023      	movs	r3, r4
 8002a1a:	f000 fc0d 	bl	8003238 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d194      	bne.n	8002952 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fabe 	bl	8002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01a      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2220      	movs	r2, #32
 8002a42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	490c      	ldr	r1, [pc, #48]	; (8002a80 <HAL_I2C_Mem_Read+0x264>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2241      	movs	r2, #65	; 0x41
 8002a58:	2120      	movs	r1, #32
 8002a5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2242      	movs	r2, #66	; 0x42
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b007      	add	sp, #28
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	80002400 	.word	0x80002400
 8002a80:	fe00e800 	.word	0xfe00e800

08002a84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	230a      	movs	r3, #10
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	1c0a      	adds	r2, r1, #0
 8002a96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2241      	movs	r2, #65	; 0x41
 8002aa0:	5c9b      	ldrb	r3, [r3, r2]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d000      	beq.n	8002aaa <HAL_I2C_IsDeviceReady+0x26>
 8002aa8:	e0fd      	b.n	8002ca6 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0f2      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2C_IsDeviceReady+0x4c>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0eb      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2240      	movs	r2, #64	; 0x40
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2241      	movs	r2, #65	; 0x41
 8002adc:	2124      	movs	r1, #36	; 0x24
 8002ade:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_IsDeviceReady+0x7a>
 8002aee:	230a      	movs	r3, #10
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	0d9b      	lsrs	r3, r3, #22
 8002af8:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_I2C_IsDeviceReady+0x22c>)
 8002afa:	431a      	orrs	r2, r3
 8002afc:	e006      	b.n	8002b0c <HAL_I2C_IsDeviceReady+0x88>
 8002afe:	230a      	movs	r3, #10
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	059b      	lsls	r3, r3, #22
 8002b06:	0d9b      	lsrs	r3, r3, #22
 8002b08:	4a6a      	ldr	r2, [pc, #424]	; (8002cb4 <HAL_I2C_IsDeviceReady+0x230>)
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b12:	f7ff fa57 	bl	8001fc4 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2220      	movs	r2, #32
 8002b22:	4013      	ands	r3, r2
 8002b24:	3b20      	subs	r3, #32
 8002b26:	425a      	negs	r2, r3
 8002b28:	4153      	adcs	r3, r2
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	3b10      	subs	r3, #16
 8002b3e:	425a      	negs	r2, r3
 8002b40:	4153      	adcs	r3, r2
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	231e      	movs	r3, #30
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b4a:	e035      	b.n	8002bb8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	d01a      	beq.n	8002b88 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7ff fa37 	bl	8001fc4 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <HAL_I2C_IsDeviceReady+0xe4>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2241      	movs	r2, #65	; 0x41
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2220      	movs	r2, #32
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e08f      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	3b20      	subs	r3, #32
 8002b94:	425a      	negs	r2, r3
 8002b96:	4153      	adcs	r3, r2
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	231f      	movs	r3, #31
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	4013      	ands	r3, r2
 8002baa:	3b10      	subs	r3, #16
 8002bac:	425a      	negs	r2, r3
 8002bae:	4153      	adcs	r3, r2
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	231e      	movs	r3, #30
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bb8:	231f      	movs	r3, #31
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <HAL_I2C_IsDeviceReady+0x148>
 8002bc2:	231e      	movs	r3, #30
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0bf      	beq.n	8002b4c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d01a      	beq.n	8002c10 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	0013      	movs	r3, r2
 8002be4:	2200      	movs	r2, #0
 8002be6:	2120      	movs	r1, #32
 8002be8:	f000 f94e 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e059      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2241      	movs	r2, #65	; 0x41
 8002c00:	2120      	movs	r1, #32
 8002c02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e04b      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	0013      	movs	r3, r2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	f000 f933 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e03e      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d119      	bne.n	8002c76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	01c9      	lsls	r1, r1, #7
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2120      	movs	r1, #32
 8002c62:	f000 f911 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e01c      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2220      	movs	r2, #32
 8002c74:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d900      	bls.n	8002c86 <HAL_I2C_IsDeviceReady+0x202>
 8002c84:	e72f      	b.n	8002ae6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2241      	movs	r2, #65	; 0x41
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	2220      	movs	r2, #32
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
  }
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b008      	add	sp, #32
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	02002000 	.word	0x02002000
 8002cb4:	02002800 	.word	0x02002800

08002cb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	000c      	movs	r4, r1
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	250a      	movs	r5, #10
 8002cc8:	197b      	adds	r3, r7, r5
 8002cca:	1c22      	adds	r2, r4, #0
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	2308      	movs	r3, #8
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	1dbb      	adds	r3, r7, #6
 8002cd8:	1c0a      	adds	r2, r1, #0
 8002cda:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	045c      	lsls	r4, r3, #17
 8002ce6:	197b      	adds	r3, r7, r5
 8002ce8:	8819      	ldrh	r1, [r3, #0]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <I2C_RequestMemoryWrite+0xc4>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	0023      	movs	r3, r4
 8002cf2:	f000 faa1 	bl	8003238 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f911 	bl	8002f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e033      	b.n	8002d72 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	1dbb      	adds	r3, r7, #6
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	2308      	movs	r3, #8
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d20:	e019      	b.n	8002d56 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d22:	2308      	movs	r3, #8
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f8f2 	bl	8002f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e014      	b.n	8002d72 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d48:	2308      	movs	r3, #8
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	0013      	movs	r3, r2
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	f000 f890 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	80002000 	.word	0x80002000

08002d80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	000c      	movs	r4, r1
 8002d8a:	0010      	movs	r0, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	250a      	movs	r5, #10
 8002d90:	197b      	adds	r3, r7, r5
 8002d92:	1c22      	adds	r2, r4, #0
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	2308      	movs	r3, #8
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	1c02      	adds	r2, r0, #0
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	1dbb      	adds	r3, r7, #6
 8002da0:	1c0a      	adds	r2, r1, #0
 8002da2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	197b      	adds	r3, r7, r5
 8002dac:	8819      	ldrh	r1, [r3, #0]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <I2C_RequestMemoryRead+0xc0>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	f000 fa3f 	bl	8003238 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 f8af 	bl	8002f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e033      	b.n	8002e36 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
 8002de4:	e019      	b.n	8002e1a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de6:	2308      	movs	r3, #8
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	6a39      	ldr	r1, [r7, #32]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f890 	bl	8002f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e04:	1e03      	subs	r3, r0, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e014      	b.n	8002e36 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	0013      	movs	r3, r2
 8002e24:	2200      	movs	r2, #0
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	f000 f82e 	bl	8002e88 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b004      	add	sp, #16
 8002e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	80002000 	.word	0x80002000

08002e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d103      	bne.n	8002e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d007      	beq.n	8002e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]
  }
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	1dfb      	adds	r3, r7, #7
 8002e96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e98:	e030      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	d02d      	beq.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7ff f890 	bl	8001fc4 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d122      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	425a      	negs	r2, r3
 8002ec6:	4153      	adcs	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d113      	bne.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	2220      	movs	r2, #32
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2241      	movs	r2, #65	; 0x41
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2242      	movs	r2, #66	; 0x42
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e00f      	b.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	425a      	negs	r2, r3
 8002f0c:	4153      	adcs	r3, r2
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	001a      	movs	r2, r3
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d0bf      	beq.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f30:	e032      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f87d 	bl	8003038 <I2C_IsErrorOccurred>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e030      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	d025      	beq.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7ff f83a 	bl	8001fc4 <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11a      	bne.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d013      	beq.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	2220      	movs	r2, #32
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2241      	movs	r2, #65	; 0x41
 8002f80:	2120      	movs	r1, #32
 8002f82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2242      	movs	r2, #66	; 0x42
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d1c5      	bne.n	8002f32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fbc:	e02f      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f837 	bl	8003038 <I2C_IsErrorOccurred>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02d      	b.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fe fff7 	bl	8001fc4 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11a      	bne.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d013      	beq.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2241      	movs	r2, #65	; 0x41
 8003006:	2120      	movs	r1, #32
 8003008:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2242      	movs	r2, #66	; 0x42
 800300e:	2100      	movs	r1, #0
 8003010:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e007      	b.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2220      	movs	r2, #32
 8003026:	4013      	ands	r3, r2
 8003028:	2b20      	cmp	r3, #32
 800302a:	d1c8      	bne.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b08b      	sub	sp, #44	; 0x2c
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2327      	movs	r3, #39	; 0x27
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2210      	movs	r2, #16
 8003060:	4013      	ands	r3, r2
 8003062:	d100      	bne.n	8003066 <I2C_IsErrorOccurred+0x2e>
 8003064:	e082      	b.n	800316c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2210      	movs	r2, #16
 800306c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306e:	e060      	b.n	8003132 <I2C_IsErrorOccurred+0xfa>
 8003070:	2427      	movs	r4, #39	; 0x27
 8003072:	193b      	adds	r3, r7, r4
 8003074:	193a      	adds	r2, r7, r4
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3301      	adds	r3, #1
 800307e:	d058      	beq.n	8003132 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003080:	f7fe ffa0 	bl	8001fc4 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d306      	bcc.n	800309e <I2C_IsErrorOccurred+0x66>
 8003090:	193b      	adds	r3, r7, r4
 8003092:	193a      	adds	r2, r7, r4
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d149      	bne.n	8003132 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	01db      	lsls	r3, r3, #7
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030ac:	2013      	movs	r0, #19
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	2142      	movs	r1, #66	; 0x42
 80030b4:	5c52      	ldrb	r2, [r2, r1]
 80030b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	401a      	ands	r2, r3
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d126      	bne.n	800311a <I2C_IsErrorOccurred+0xe2>
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	01db      	lsls	r3, r3, #7
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d021      	beq.n	800311a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80030d6:	183b      	adds	r3, r7, r0
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d01d      	beq.n	800311a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	01c9      	lsls	r1, r1, #7
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030f0:	f7fe ff68 	bl	8001fc4 <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f8:	e00f      	b.n	800311a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030fa:	f7fe ff63 	bl	8001fc4 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b19      	cmp	r3, #25
 8003106:	d908      	bls.n	800311a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2220      	movs	r2, #32
 800310c:	4313      	orrs	r3, r2
 800310e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003110:	2327      	movs	r3, #39	; 0x27
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]

              break;
 8003118:	e00b      	b.n	8003132 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	2127      	movs	r1, #39	; 0x27
 8003126:	187a      	adds	r2, r7, r1
 8003128:	1879      	adds	r1, r7, r1
 800312a:	7809      	ldrb	r1, [r1, #0]
 800312c:	7011      	strb	r1, [r2, #0]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d1e3      	bne.n	80030fa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	2b20      	cmp	r3, #32
 800313e:	d004      	beq.n	800314a <I2C_IsErrorOccurred+0x112>
 8003140:	2327      	movs	r3, #39	; 0x27
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d092      	beq.n	8003070 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800314a:	2327      	movs	r3, #39	; 0x27
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2204      	movs	r2, #4
 8003160:	4313      	orrs	r3, r2
 8003162:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003164:	2327      	movs	r3, #39	; 0x27
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d00c      	beq.n	8003198 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2201      	movs	r2, #1
 8003182:	4313      	orrs	r3, r2
 8003184:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	0052      	lsls	r2, r2, #1
 800318e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003190:	2327      	movs	r3, #39	; 0x27
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4013      	ands	r3, r2
 80031a0:	d00c      	beq.n	80031bc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2208      	movs	r2, #8
 80031a6:	4313      	orrs	r3, r2
 80031a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	00d2      	lsls	r2, r2, #3
 80031b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b4:	2327      	movs	r3, #39	; 0x27
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00c      	beq.n	80031e0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2202      	movs	r2, #2
 80031ca:	4313      	orrs	r3, r2
 80031cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d8:	2327      	movs	r3, #39	; 0x27
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80031e0:	2327      	movs	r3, #39	; 0x27
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01d      	beq.n	8003226 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fe29 	bl	8002e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	490d      	ldr	r1, [pc, #52]	; (8003234 <I2C_IsErrorOccurred+0x1fc>)
 80031fe:	400a      	ands	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2241      	movs	r2, #65	; 0x41
 8003212:	2120      	movs	r1, #32
 8003214:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2242      	movs	r2, #66	; 0x42
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003226:	2327      	movs	r3, #39	; 0x27
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	781b      	ldrb	r3, [r3, #0]
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b00b      	add	sp, #44	; 0x2c
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	fe00e800 	.word	0xfe00e800

08003238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	0008      	movs	r0, r1
 8003242:	0011      	movs	r1, r2
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	240a      	movs	r4, #10
 8003248:	193b      	adds	r3, r7, r4
 800324a:	1c02      	adds	r2, r0, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	2009      	movs	r0, #9
 8003250:	183b      	adds	r3, r7, r0
 8003252:	1c0a      	adds	r2, r1, #0
 8003254:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003256:	193b      	adds	r3, r7, r4
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	059b      	lsls	r3, r3, #22
 800325c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800325e:	183b      	adds	r3, r7, r0
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	0419      	lsls	r1, r3, #16
 8003264:	23ff      	movs	r3, #255	; 0xff
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	4313      	orrs	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003282:	0d51      	lsrs	r1, r2, #21
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	00d2      	lsls	r2, r2, #3
 8003288:	400a      	ands	r2, r1
 800328a:	4907      	ldr	r1, [pc, #28]	; (80032a8 <I2C_TransferConfig+0x70>)
 800328c:	430a      	orrs	r2, r1
 800328e:	43d2      	mvns	r2, r2
 8003290:	401a      	ands	r2, r3
 8003292:	0011      	movs	r1, r2
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b007      	add	sp, #28
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	03ff63ff 	.word	0x03ff63ff

080032ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2241      	movs	r2, #65	; 0x41
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d138      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	5c9b      	ldrb	r3, [r3, r2]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e032      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	2101      	movs	r1, #1
 80032d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2241      	movs	r2, #65	; 0x41
 80032dc:	2124      	movs	r1, #36	; 0x24
 80032de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	438a      	bics	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4911      	ldr	r1, [pc, #68]	; (8003340 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2101      	movs	r1, #1
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2241      	movs	r2, #65	; 0x41
 8003324:	2120      	movs	r1, #32
 8003326:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	ffffefff 	.word	0xffffefff

08003344 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2241      	movs	r2, #65	; 0x41
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b20      	cmp	r3, #32
 8003358:	d139      	bne.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003364:	2302      	movs	r3, #2
 8003366:	e033      	b.n	80033d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2241      	movs	r2, #65	; 0x41
 8003374:	2124      	movs	r1, #36	; 0x24
 8003376:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	; 0x41
 80033be:	2120      	movs	r1, #32
 80033c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	2100      	movs	r1, #0
 80033c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b004      	add	sp, #16
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fffff0ff 	.word	0xfffff0ff

080033dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e305      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x1e>
 80033f8:	e08d      	b.n	8003516 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033fa:	4bc5      	ldr	r3, [pc, #788]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	220c      	movs	r2, #12
 8003400:	4013      	ands	r3, r2
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00e      	beq.n	8003424 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003406:	4bc2      	ldr	r3, [pc, #776]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	220c      	movs	r2, #12
 800340c:	4013      	ands	r3, r2
 800340e:	2b08      	cmp	r3, #8
 8003410:	d116      	bne.n	8003440 <HAL_RCC_OscConfig+0x64>
 8003412:	4bbf      	ldr	r3, [pc, #764]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	23c0      	movs	r3, #192	; 0xc0
 8003418:	025b      	lsls	r3, r3, #9
 800341a:	401a      	ands	r2, r3
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	025b      	lsls	r3, r3, #9
 8003420:	429a      	cmp	r2, r3
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4bba      	ldr	r3, [pc, #744]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	4013      	ands	r3, r2
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x56>
 8003430:	e070      	b.n	8003514 <HAL_RCC_OscConfig+0x138>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d000      	beq.n	800343c <HAL_RCC_OscConfig+0x60>
 800343a:	e06b      	b.n	8003514 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e2dc      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_RCC_OscConfig+0x7c>
 8003448:	4bb1      	ldr	r3, [pc, #708]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4bb0      	ldr	r3, [pc, #704]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0249      	lsls	r1, r1, #9
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e02f      	b.n	80034b8 <HAL_RCC_OscConfig+0xdc>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10c      	bne.n	800347a <HAL_RCC_OscConfig+0x9e>
 8003460:	4bab      	ldr	r3, [pc, #684]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4baa      	ldr	r3, [pc, #680]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003466:	49ab      	ldr	r1, [pc, #684]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	4ba8      	ldr	r3, [pc, #672]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4ba7      	ldr	r3, [pc, #668]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003472:	49a9      	ldr	r1, [pc, #676]	; (8003718 <HAL_RCC_OscConfig+0x33c>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e01e      	b.n	80034b8 <HAL_RCC_OscConfig+0xdc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d10e      	bne.n	80034a0 <HAL_RCC_OscConfig+0xc4>
 8003482:	4ba3      	ldr	r3, [pc, #652]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4ba2      	ldr	r3, [pc, #648]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	02c9      	lsls	r1, r1, #11
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	4b9f      	ldr	r3, [pc, #636]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b9e      	ldr	r3, [pc, #632]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	0249      	lsls	r1, r1, #9
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0xdc>
 80034a0:	4b9b      	ldr	r3, [pc, #620]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b9a      	ldr	r3, [pc, #616]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80034a6:	499b      	ldr	r1, [pc, #620]	; (8003714 <HAL_RCC_OscConfig+0x338>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	4b98      	ldr	r3, [pc, #608]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b97      	ldr	r3, [pc, #604]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80034b2:	4999      	ldr	r1, [pc, #612]	; (8003718 <HAL_RCC_OscConfig+0x33c>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d014      	beq.n	80034ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fd80 	bl	8001fc4 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ca:	f7fe fd7b 	bl	8001fc4 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e28e      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0xee>
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fd6b 	bl	8001fc4 <HAL_GetTick>
 80034ee:	0003      	movs	r3, r0
 80034f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe fd66 	bl	8001fc4 <HAL_GetTick>
 80034f8:	0002      	movs	r2, r0
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e279      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	4b82      	ldr	r3, [pc, #520]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	4013      	ands	r3, r2
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x118>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCC_OscConfig+0x146>
 8003520:	e06c      	b.n	80035fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003522:	4b7b      	ldr	r3, [pc, #492]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	220c      	movs	r2, #12
 8003528:	4013      	ands	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800352c:	4b78      	ldr	r3, [pc, #480]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	220c      	movs	r2, #12
 8003532:	4013      	ands	r3, r2
 8003534:	2b08      	cmp	r3, #8
 8003536:	d11f      	bne.n	8003578 <HAL_RCC_OscConfig+0x19c>
 8003538:	4b75      	ldr	r3, [pc, #468]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	23c0      	movs	r3, #192	; 0xc0
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	401a      	ands	r2, r3
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	429a      	cmp	r2, r3
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b71      	ldr	r3, [pc, #452]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	4013      	ands	r3, r2
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x184>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e24c      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b6b      	ldr	r3, [pc, #428]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	22f8      	movs	r2, #248	; 0xf8
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00da      	lsls	r2, r3, #3
 8003570:	4b67      	ldr	r3, [pc, #412]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e041      	b.n	80035fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d024      	beq.n	80035ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b62      	ldr	r3, [pc, #392]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003586:	2101      	movs	r1, #1
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fd1a 	bl	8001fc4 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003596:	f7fe fd15 	bl	8001fc4 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e228      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2202      	movs	r2, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d0f1      	beq.n	8003596 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b57      	ldr	r3, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22f8      	movs	r2, #248	; 0xf8
 80035b8:	4393      	bics	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	00da      	lsls	r2, r3, #3
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e018      	b.n	80035fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	438a      	bics	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe fcf5 	bl	8001fc4 <HAL_GetTick>
 80035da:	0003      	movs	r3, r0
 80035dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fe fcf0 	bl	8001fc4 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e203      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	d1f1      	bne.n	80035e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	4013      	ands	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d019      	beq.n	8003642 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003614:	2101      	movs	r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fcd3 	bl	8001fc4 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fcce 	bl	8001fc4 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1e1      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d0f1      	beq.n	8003624 <HAL_RCC_OscConfig+0x248>
 8003640:	e018      	b.n	8003674 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003646:	4b32      	ldr	r3, [pc, #200]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003648:	2101      	movs	r1, #1
 800364a:	438a      	bics	r2, r1
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fcb9 	bl	8001fc4 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003658:	f7fe fcb4 	bl	8001fc4 <HAL_GetTick>
 800365c:	0002      	movs	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1c7      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2202      	movs	r2, #2
 8003670:	4013      	ands	r3, r2
 8003672:	d1f1      	bne.n	8003658 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_RCC_OscConfig+0x2a4>
 800367e:	e0b5      	b.n	80037ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003680:	201f      	movs	r0, #31
 8003682:	183b      	adds	r3, r7, r0
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	055b      	lsls	r3, r3, #21
 8003690:	4013      	ands	r3, r2
 8003692:	d110      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	0549      	lsls	r1, r1, #21
 800369e:	430a      	orrs	r2, r1
 80036a0:	61da      	str	r2, [r3, #28]
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	055b      	lsls	r3, r3, #21
 80036aa:	4013      	ands	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036b0:	183b      	adds	r3, r7, r0
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_OscConfig+0x340>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d11a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCC_OscConfig+0x340>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x340>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0049      	lsls	r1, r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fc78 	bl	8001fc4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe fc73 	bl	8001fc4 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e186      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x340>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x344>
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_RCC_OscConfig+0x334>)
 8003706:	2101      	movs	r1, #1
 8003708:	430a      	orrs	r2, r1
 800370a:	621a      	str	r2, [r3, #32]
 800370c:	e036      	b.n	800377c <HAL_RCC_OscConfig+0x3a0>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40021000 	.word	0x40021000
 8003714:	fffeffff 	.word	0xfffeffff
 8003718:	fffbffff 	.word	0xfffbffff
 800371c:	40007000 	.word	0x40007000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x366>
 8003728:	4bb6      	ldr	r3, [pc, #728]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4bb5      	ldr	r3, [pc, #724]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	621a      	str	r2, [r3, #32]
 8003734:	4bb3      	ldr	r3, [pc, #716]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4bb2      	ldr	r3, [pc, #712]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
 8003740:	e01c      	b.n	800377c <HAL_RCC_OscConfig+0x3a0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x388>
 800374a:	4bae      	ldr	r3, [pc, #696]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	4bad      	ldr	r3, [pc, #692]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003750:	2104      	movs	r1, #4
 8003752:	430a      	orrs	r2, r1
 8003754:	621a      	str	r2, [r3, #32]
 8003756:	4bab      	ldr	r3, [pc, #684]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	4baa      	ldr	r3, [pc, #680]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800375c:	2101      	movs	r1, #1
 800375e:	430a      	orrs	r2, r1
 8003760:	621a      	str	r2, [r3, #32]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0x3a0>
 8003764:	4ba7      	ldr	r3, [pc, #668]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	4ba6      	ldr	r3, [pc, #664]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800376a:	2101      	movs	r1, #1
 800376c:	438a      	bics	r2, r1
 800376e:	621a      	str	r2, [r3, #32]
 8003770:	4ba4      	ldr	r3, [pc, #656]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	4ba3      	ldr	r3, [pc, #652]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003776:	2104      	movs	r1, #4
 8003778:	438a      	bics	r2, r1
 800377a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d014      	beq.n	80037ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003784:	f7fe fc1e 	bl	8001fc4 <HAL_GetTick>
 8003788:	0003      	movs	r3, r0
 800378a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	e009      	b.n	80037a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe fc19 	bl	8001fc4 <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	4a9b      	ldr	r2, [pc, #620]	; (8003a08 <HAL_RCC_OscConfig+0x62c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e12b      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	4b98      	ldr	r3, [pc, #608]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	2202      	movs	r2, #2
 80037a8:	4013      	ands	r3, r2
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x3b2>
 80037ac:	e013      	b.n	80037d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fe fc09 	bl	8001fc4 <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b6:	e009      	b.n	80037cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe fc04 	bl	8001fc4 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	4a91      	ldr	r2, [pc, #580]	; (8003a08 <HAL_RCC_OscConfig+0x62c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e116      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	4b8d      	ldr	r3, [pc, #564]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	2202      	movs	r2, #2
 80037d2:	4013      	ands	r3, r2
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037d6:	231f      	movs	r3, #31
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	4b87      	ldr	r3, [pc, #540]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80037e6:	4989      	ldr	r1, [pc, #548]	; (8003a0c <HAL_RCC_OscConfig+0x630>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2210      	movs	r2, #16
 80037f2:	4013      	ands	r3, r2
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d12a      	bne.n	8003854 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037fe:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003802:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003804:	2104      	movs	r1, #4
 8003806:	430a      	orrs	r2, r1
 8003808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800380a:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	4b7d      	ldr	r3, [pc, #500]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003810:	2101      	movs	r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe fbd5 	bl	8001fc4 <HAL_GetTick>
 800381a:	0003      	movs	r3, r0
 800381c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003820:	f7fe fbd0 	bl	8001fc4 <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0e3      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003832:	4b74      	ldr	r3, [pc, #464]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d0f1      	beq.n	8003820 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800383c:	4b71      	ldr	r3, [pc, #452]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	22f8      	movs	r2, #248	; 0xf8
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	00da      	lsls	r2, r3, #3
 800384c:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800384e:	430a      	orrs	r2, r1
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
 8003852:	e034      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	3305      	adds	r3, #5
 800385a:	d111      	bne.n	8003880 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800385e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003860:	4b68      	ldr	r3, [pc, #416]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003862:	2104      	movs	r1, #4
 8003864:	438a      	bics	r2, r1
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003868:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	22f8      	movs	r2, #248	; 0xf8
 800386e:	4393      	bics	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	00da      	lsls	r2, r3, #3
 8003878:	4b62      	ldr	r3, [pc, #392]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800387a:	430a      	orrs	r2, r1
 800387c:	635a      	str	r2, [r3, #52]	; 0x34
 800387e:	e01e      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003880:	4b60      	ldr	r3, [pc, #384]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003884:	4b5f      	ldr	r3, [pc, #380]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003886:	2104      	movs	r1, #4
 8003888:	430a      	orrs	r2, r1
 800388a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800388c:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	4b5c      	ldr	r3, [pc, #368]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003892:	2101      	movs	r1, #1
 8003894:	438a      	bics	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe fb94 	bl	8001fc4 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038a2:	f7fe fb8f 	bl	8001fc4 <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0a2      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	2202      	movs	r2, #2
 80038ba:	4013      	ands	r3, r2
 80038bc:	d1f1      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d100      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4ec>
 80038c6:	e097      	b.n	80039f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	220c      	movs	r2, #12
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d100      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4fa>
 80038d4:	e06b      	b.n	80039ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d14c      	bne.n	8003978 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b49      	ldr	r3, [pc, #292]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80038e4:	494a      	ldr	r1, [pc, #296]	; (8003a10 <HAL_RCC_OscConfig+0x634>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe fb6b 	bl	8001fc4 <HAL_GetTick>
 80038ee:	0003      	movs	r3, r0
 80038f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fb66 	bl	8001fc4 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e079      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003906:	4b3f      	ldr	r3, [pc, #252]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	049b      	lsls	r3, r3, #18
 800390e:	4013      	ands	r3, r2
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	220f      	movs	r2, #15
 8003918:	4393      	bics	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003922:	430a      	orrs	r2, r1
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
 8003926:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <HAL_RCC_OscConfig+0x638>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	431a      	orrs	r2, r3
 800393a:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0449      	lsls	r1, r1, #17
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe fb39 	bl	8001fc4 <HAL_GetTick>
 8003952:	0003      	movs	r3, r0
 8003954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fb34 	bl	8001fc4 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e047      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	049b      	lsls	r3, r3, #18
 8003972:	4013      	ands	r3, r2
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x57c>
 8003976:	e03f      	b.n	80039f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 800397e:	4924      	ldr	r1, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x634>)
 8003980:	400a      	ands	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb1e 	bl	8001fc4 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe fb19 	bl	8001fc4 <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e02c      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	049b      	lsls	r3, r3, #18
 80039a8:	4013      	ands	r3, r2
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x5b2>
 80039ac:	e024      	b.n	80039f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e01f      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_OscConfig+0x628>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	23c0      	movs	r3, #192	; 0xc0
 80039ca:	025b      	lsls	r3, r3, #9
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d10e      	bne.n	80039f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	220f      	movs	r2, #15
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	23f0      	movs	r3, #240	; 0xf0
 80039e8:	039b      	lsls	r3, r3, #14
 80039ea:	401a      	ands	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b008      	add	sp, #32
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40021000 	.word	0x40021000
 8003a08:	00001388 	.word	0x00001388
 8003a0c:	efffffff 	.word	0xefffffff
 8003a10:	feffffff 	.word	0xfeffffff
 8003a14:	ffc27fff 	.word	0xffc27fff

08003a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b3      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2201      	movs	r2, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d911      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4393      	bics	r3, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2201      	movs	r2, #1
 8003a52:	4013      	ands	r3, r2
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e09a      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	d015      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d006      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003a78:	21e0      	movs	r1, #224	; 0xe0
 8003a7a:	00c9      	lsls	r1, r1, #3
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	22f0      	movs	r2, #240	; 0xf0
 8003a86:	4393      	bics	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	029b      	lsls	r3, r3, #10
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d114      	bne.n	8003adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06e      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	049b      	lsls	r3, r3, #18
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d108      	bne.n	8003adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e062      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e05b      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7fe fa68 	bl	8001fc4 <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f7fe fa63 	bl	8001fc4 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <HAL_RCC_ClockConfig+0x18c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e042      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	220c      	movs	r2, #12
 8003b14:	401a      	ands	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1ec      	bne.n	8003afa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d211      	bcs.n	8003b52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4393      	bics	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x184>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e020      	b.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <HAL_RCC_ClockConfig+0x190>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b70:	f000 f820 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b74:	0001      	movs	r1, r0
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x188>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	4013      	ands	r3, r2
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x194>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	000a      	movs	r2, r1
 8003b86:	40da      	lsrs	r2, r3
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x198>)
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f7fe f9d3 	bl	8001f38 <HAL_InitTick>
  
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40022000 	.word	0x40022000
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	00001388 	.word	0x00001388
 8003ba8:	fffff8ff 	.word	0xfffff8ff
 8003bac:	08004870 	.word	0x08004870
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x36>
 8003be2:	e02e      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003be6:	613b      	str	r3, [r7, #16]
      break;
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	0c9b      	lsrs	r3, r3, #18
 8003bee:	220f      	movs	r2, #15
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	23c0      	movs	r3, #192	; 0xc0
 8003c0a:	025b      	lsls	r3, r3, #9
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	025b      	lsls	r3, r3, #9
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	480f      	ldr	r0, [pc, #60]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c1a:	f7fc fa75 	bl	8000108 <__udivsi3>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	001a      	movs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4353      	muls	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	480a      	ldr	r0, [pc, #40]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c2e:	f7fc fa6b 	bl	8000108 <__udivsi3>
 8003c32:	0003      	movs	r3, r0
 8003c34:	001a      	movs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4353      	muls	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c44:	613b      	str	r3, [r7, #16]
      break;
 8003c46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c48:	693b      	ldr	r3, [r7, #16]
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b006      	add	sp, #24
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	40021000 	.word	0x40021000
 8003c58:	007a1200 	.word	0x007a1200
 8003c5c:	08004880 	.word	0x08004880
 8003c60:	08004890 	.word	0x08004890

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	025b      	lsls	r3, r3, #9
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d100      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003c80:	e08e      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003c82:	2017      	movs	r0, #23
 8003c84:	183b      	adds	r3, r7, r0
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	055b      	lsls	r3, r3, #21
 8003c92:	4013      	ands	r3, r2
 8003c94:	d110      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	0549      	lsls	r1, r1, #21
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
 8003ca4:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	055b      	lsls	r3, r3, #21
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb2:	183b      	adds	r3, r7, r0
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d11a      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc4:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0049      	lsls	r1, r1, #1
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe f977 	bl	8001fc4 <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	e008      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fe f972 	bl	8001fc4 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e087      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	23c0      	movs	r3, #192	; 0xc0
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d034      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	23c0      	movs	r3, #192	; 0xc0
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d02c      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0249      	lsls	r1, r1, #9
 8003d30:	430a      	orrs	r2, r1
 8003d32:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	4b33      	ldr	r3, [pc, #204]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d3a:	4936      	ldr	r1, [pc, #216]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f939 	bl	8001fc4 <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e009      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe f934 	bl	8001fc4 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e048      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d8a:	2317      	movs	r3, #23
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d9a:	4920      	ldr	r1, [pc, #128]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	4013      	ands	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	2203      	movs	r2, #3
 8003db0:	4393      	bics	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2210      	movs	r2, #16
 8003dce:	4393      	bics	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	4013      	ands	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	4393      	bics	r3, r2
 8003df0:	0019      	movs	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b006      	add	sp, #24
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	fffffcff 	.word	0xfffffcff
 8003e14:	fffeffff 	.word	0xfffeffff
 8003e18:	00001388 	.word	0x00001388
 8003e1c:	efffffff 	.word	0xefffffff

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223d      	movs	r2, #61	; 0x3d
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223c      	movs	r2, #60	; 0x3c
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fd ffb5 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223d      	movs	r2, #61	; 0x3d
 8003e52:	2102      	movs	r1, #2
 8003e54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	0019      	movs	r1, r3
 8003e60:	0010      	movs	r0, r2
 8003e62:	f000 fa3b 	bl	80042dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2246      	movs	r2, #70	; 0x46
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223e      	movs	r2, #62	; 0x3e
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223f      	movs	r2, #63	; 0x3f
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2240      	movs	r2, #64	; 0x40
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2242      	movs	r2, #66	; 0x42
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2243      	movs	r2, #67	; 0x43
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2244      	movs	r2, #68	; 0x44
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2245      	movs	r2, #69	; 0x45
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	; 0x3d
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	223d      	movs	r2, #61	; 0x3d
 8003ecc:	5c9b      	ldrb	r3, [r3, r2]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e028      	b.n	8003f2a <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	223d      	movs	r2, #61	; 0x3d
 8003edc:	2102      	movs	r1, #2
 8003ede:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_TIM_Base_Start+0x74>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_Base_Start+0x34>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_TIM_Base_Start+0x78>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2207      	movs	r2, #7
 8003efc:	4013      	ands	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d010      	beq.n	8003f28 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e007      	b.n	8003f28 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400

08003f3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e042      	b.n	8003fd4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223d      	movs	r2, #61	; 0x3d
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	223c      	movs	r2, #60	; 0x3c
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 f839 	bl	8003fdc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	223d      	movs	r2, #61	; 0x3d
 8003f6e:	2102      	movs	r1, #2
 8003f70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	0010      	movs	r0, r2
 8003f7e:	f000 f9ad 	bl	80042dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2246      	movs	r2, #70	; 0x46
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223e      	movs	r2, #62	; 0x3e
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5499      	strb	r1, [r3, r2]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2240      	movs	r2, #64	; 0x40
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2241      	movs	r2, #65	; 0x41
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2242      	movs	r2, #66	; 0x42
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2243      	movs	r2, #67	; 0x43
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2244      	movs	r2, #68	; 0x44
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2245      	movs	r2, #69	; 0x45
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223d      	movs	r2, #61	; 0x3d
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2317      	movs	r3, #23
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	223c      	movs	r2, #60	; 0x3c
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_TIM_IC_ConfigChannel+0x22>
 800400a:	2302      	movs	r3, #2
 800400c:	e08c      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x13c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	223c      	movs	r2, #60	; 0x3c
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800402c:	f000 f9c2 	bl	80043b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	210c      	movs	r1, #12
 800403c:	438a      	bics	r2, r1
 800403e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	619a      	str	r2, [r3, #24]
 8004052:	e062      	b.n	800411a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d11c      	bne.n	8004094 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800406a:	f000 fa23 	bl	80044b4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	492d      	ldr	r1, [pc, #180]	; (8004130 <HAL_TIM_IC_ConfigChannel+0x144>)
 800407a:	400a      	ands	r2, r1
 800407c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6999      	ldr	r1, [r3, #24]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	021a      	lsls	r2, r3, #8
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
 8004092:	e042      	b.n	800411a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11b      	bne.n	80040d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80040aa:	f000 fa77 	bl	800459c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	210c      	movs	r1, #12
 80040ba:	438a      	bics	r2, r1
 80040bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	61da      	str	r2, [r3, #28]
 80040d0:	e023      	b.n	800411a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	d11c      	bne.n	8004112 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040e8:	f000 fa98 	bl	800461c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	490e      	ldr	r1, [pc, #56]	; (8004130 <HAL_TIM_IC_ConfigChannel+0x144>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69d9      	ldr	r1, [r3, #28]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
 8004110:	e003      	b.n	800411a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004112:	2317      	movs	r3, #23
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	223c      	movs	r2, #60	; 0x3c
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]

  return status;
 8004122:	2317      	movs	r3, #23
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	781b      	ldrb	r3, [r3, #0]
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b006      	add	sp, #24
 800412e:	bd80      	pop	{r7, pc}
 8004130:	fffff3ff 	.word	0xfffff3ff

08004134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	230f      	movs	r3, #15
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223c      	movs	r2, #60	; 0x3c
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIM_ConfigClockSource+0x20>
 8004150:	2302      	movs	r3, #2
 8004152:	e0bc      	b.n	80042ce <HAL_TIM_ConfigClockSource+0x19a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	223c      	movs	r2, #60	; 0x3c
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223d      	movs	r2, #61	; 0x3d
 8004160:	2102      	movs	r1, #2
 8004162:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2277      	movs	r2, #119	; 0x77
 8004170:	4393      	bics	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	0192      	lsls	r2, r2, #6
 800418c:	4293      	cmp	r3, r2
 800418e:	d040      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xde>
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	0192      	lsls	r2, r2, #6
 8004194:	4293      	cmp	r3, r2
 8004196:	d900      	bls.n	800419a <HAL_TIM_ConfigClockSource+0x66>
 8004198:	e088      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	0152      	lsls	r2, r2, #5
 800419e:	4293      	cmp	r3, r2
 80041a0:	d100      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x70>
 80041a2:	e088      	b.n	80042b6 <HAL_TIM_ConfigClockSource+0x182>
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	0152      	lsls	r2, r2, #5
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d900      	bls.n	80041ae <HAL_TIM_ConfigClockSource+0x7a>
 80041ac:	e07e      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041ae:	2b70      	cmp	r3, #112	; 0x70
 80041b0:	d018      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0xb0>
 80041b2:	d900      	bls.n	80041b6 <HAL_TIM_ConfigClockSource+0x82>
 80041b4:	e07a      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041b6:	2b60      	cmp	r3, #96	; 0x60
 80041b8:	d04f      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x126>
 80041ba:	d900      	bls.n	80041be <HAL_TIM_ConfigClockSource+0x8a>
 80041bc:	e076      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041be:	2b50      	cmp	r3, #80	; 0x50
 80041c0:	d03b      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x106>
 80041c2:	d900      	bls.n	80041c6 <HAL_TIM_ConfigClockSource+0x92>
 80041c4:	e072      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d057      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x146>
 80041ca:	d900      	bls.n	80041ce <HAL_TIM_ConfigClockSource+0x9a>
 80041cc:	e06e      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041ce:	2b30      	cmp	r3, #48	; 0x30
 80041d0:	d063      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x166>
 80041d2:	d86b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d060      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x166>
 80041d8:	d868      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d05d      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x166>
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d05b      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x166>
 80041e2:	e063      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	f000 fa72 	bl	80046dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2277      	movs	r2, #119	; 0x77
 8004204:	4313      	orrs	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]
      break;
 8004210:	e052      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004222:	f000 fa5b 	bl	80046dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	01c9      	lsls	r1, r1, #7
 8004234:	430a      	orrs	r2, r1
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e03e      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	001a      	movs	r2, r3
 8004248:	f000 f906 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2150      	movs	r1, #80	; 0x50
 8004252:	0018      	movs	r0, r3
 8004254:	f000 fa28 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8004258:	e02e      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	001a      	movs	r2, r3
 8004268:	f000 f966 	bl	8004538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2160      	movs	r1, #96	; 0x60
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fa18 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8004278:	e01e      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	001a      	movs	r2, r3
 8004288:	f000 f8e6 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	0018      	movs	r0, r3
 8004294:	f000 fa08 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8004298:	e00e      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	0019      	movs	r1, r3
 80042a4:	0010      	movs	r0, r2
 80042a6:	f000 f9ff 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 80042aa:	e005      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80042ac:	230f      	movs	r3, #15
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
      break;
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80042b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	223d      	movs	r2, #61	; 0x3d
 80042bc:	2101      	movs	r1, #1
 80042be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	223c      	movs	r2, #60	; 0x3c
 80042c4:	2100      	movs	r1, #0
 80042c6:	5499      	strb	r1, [r3, r2]

  return status;
 80042c8:	230f      	movs	r3, #15
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	781b      	ldrb	r3, [r3, #0]
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	ffff00ff 	.word	0xffff00ff

080042dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0xc0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x20>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0xc4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d108      	bne.n	800430e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2270      	movs	r2, #112	; 0x70
 8004300:	4393      	bics	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <TIM_Base_SetConfig+0xc0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00f      	beq.n	8004336 <TIM_Base_SetConfig+0x5a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <TIM_Base_SetConfig+0xc4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <TIM_Base_SetConfig+0x5a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <TIM_Base_SetConfig+0xc8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <TIM_Base_SetConfig+0x5a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <TIM_Base_SetConfig+0xcc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_Base_SetConfig+0x5a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <TIM_Base_SetConfig+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <TIM_Base_SetConfig+0xd4>)
 800433a:	4013      	ands	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2280      	movs	r2, #128	; 0x80
 800434c:	4393      	bics	r3, r2
 800434e:	001a      	movs	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <TIM_Base_SetConfig+0xc0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0xaa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <TIM_Base_SetConfig+0xcc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0xaa>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <TIM_Base_SetConfig+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d103      	bne.n	800438e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	615a      	str	r2, [r3, #20]
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40002000 	.word	0x40002000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800
 80043b0:	fffffcff 	.word	0xfffffcff

080043b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	2201      	movs	r2, #1
 80043c8:	4393      	bics	r3, r2
 80043ca:	001a      	movs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <TIM_TI1_SetConfig+0x9c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_TI1_SetConfig+0x38>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <TIM_TI1_SetConfig+0xa0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d101      	bne.n	80043f0 <TIM_TI1_SetConfig+0x3c>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <TIM_TI1_SetConfig+0x3e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4393      	bics	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e003      	b.n	8004410 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2201      	movs	r2, #1
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	22f0      	movs	r2, #240	; 0xf0
 8004414:	4393      	bics	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	4013      	ands	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	220a      	movs	r2, #10
 800442a:	4393      	bics	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	220a      	movs	r2, #10
 8004432:	4013      	ands	r3, r2
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b006      	add	sp, #24
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40000400 	.word	0x40000400

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	2201      	movs	r2, #1
 8004470:	4393      	bics	r3, r2
 8004472:	001a      	movs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	22f0      	movs	r2, #240	; 0xf0
 8004482:	4393      	bics	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	220a      	movs	r2, #10
 8004494:	4393      	bics	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b006      	add	sp, #24
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	2210      	movs	r2, #16
 80044c8:	4393      	bics	r3, r2
 80044ca:	001a      	movs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4a14      	ldr	r2, [pc, #80]	; (8004530 <TIM_TI2_SetConfig+0x7c>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4a10      	ldr	r2, [pc, #64]	; (8004534 <TIM_TI2_SetConfig+0x80>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	22a0      	movs	r2, #160	; 0xa0
 8004508:	4393      	bics	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	22a0      	movs	r2, #160	; 0xa0
 8004512:	4013      	ands	r3, r2
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	fffffcff 	.word	0xfffffcff
 8004534:	ffff0fff 	.word	0xffff0fff

08004538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	2210      	movs	r2, #16
 800454a:	4393      	bics	r3, r2
 800454c:	001a      	movs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <TIM_TI2_ConfigInputStage+0x60>)
 8004562:	4013      	ands	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	031b      	lsls	r3, r3, #12
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	22a0      	movs	r2, #160	; 0xa0
 8004574:	4393      	bics	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b006      	add	sp, #24
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	ffff0fff 	.word	0xffff0fff

0800459c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a19      	ldr	r2, [pc, #100]	; (8004614 <TIM_TI3_SetConfig+0x78>)
 80045b0:	401a      	ands	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	22f0      	movs	r2, #240	; 0xf0
 80045d6:	4393      	bics	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	4013      	ands	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <TIM_TI3_SetConfig+0x7c>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	23a0      	movs	r3, #160	; 0xa0
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4013      	ands	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b006      	add	sp, #24
 8004612:	bd80      	pop	{r7, pc}
 8004614:	fffffeff 	.word	0xfffffeff
 8004618:	fffff5ff 	.word	0xfffff5ff

0800461c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <TIM_TI4_SetConfig+0x7c>)
 8004630:	401a      	ands	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <TIM_TI4_SetConfig+0x80>)
 8004646:	4013      	ands	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <TIM_TI4_SetConfig+0x84>)
 8004658:	4013      	ands	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <TIM_TI4_SetConfig+0x88>)
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	031a      	lsls	r2, r3, #12
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	4013      	ands	r3, r2
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b006      	add	sp, #24
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	ffffefff 	.word	0xffffefff
 800469c:	fffffcff 	.word	0xfffffcff
 80046a0:	ffff0fff 	.word	0xffff0fff
 80046a4:	ffff5fff 	.word	0xffff5fff

080046a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2270      	movs	r2, #112	; 0x70
 80046bc:	4393      	bics	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	2207      	movs	r2, #7
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b004      	add	sp, #16
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4a09      	ldr	r2, [pc, #36]	; (8004718 <TIM_ETR_SetConfig+0x3c>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	021a      	lsls	r2, r3, #8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	431a      	orrs	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b006      	add	sp, #24
 8004716:	bd80      	pop	{r7, pc}
 8004718:	ffff00ff 	.word	0xffff00ff

0800471c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	223c      	movs	r2, #60	; 0x3c
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e03c      	b.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	223c      	movs	r2, #60	; 0x3c
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	223d      	movs	r2, #61	; 0x3d
 8004740:	2102      	movs	r1, #2
 8004742:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2270      	movs	r2, #112	; 0x70
 8004758:	4393      	bics	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0f      	ldr	r2, [pc, #60]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10c      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	4393      	bics	r3, r2
 8004788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223d      	movs	r2, #61	; 0x3d
 80047a0:	2101      	movs	r1, #1
 80047a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	223c      	movs	r2, #60	; 0x3c
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b004      	add	sp, #16
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40000400 	.word	0x40000400

080047c0 <memset>:
 80047c0:	0003      	movs	r3, r0
 80047c2:	1882      	adds	r2, r0, r2
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	7019      	strb	r1, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <__libc_init_array>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	2600      	movs	r6, #0
 80047d4:	4c0c      	ldr	r4, [pc, #48]	; (8004808 <__libc_init_array+0x38>)
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x3c>)
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	42a6      	cmp	r6, r4
 80047de:	d109      	bne.n	80047f4 <__libc_init_array+0x24>
 80047e0:	2600      	movs	r6, #0
 80047e2:	f000 f819 	bl	8004818 <_init>
 80047e6:	4c0a      	ldr	r4, [pc, #40]	; (8004810 <__libc_init_array+0x40>)
 80047e8:	4d0a      	ldr	r5, [pc, #40]	; (8004814 <__libc_init_array+0x44>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	42a6      	cmp	r6, r4
 80047f0:	d105      	bne.n	80047fe <__libc_init_array+0x2e>
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	00b3      	lsls	r3, r6, #2
 80047f6:	58eb      	ldr	r3, [r5, r3]
 80047f8:	4798      	blx	r3
 80047fa:	3601      	adds	r6, #1
 80047fc:	e7ee      	b.n	80047dc <__libc_init_array+0xc>
 80047fe:	00b3      	lsls	r3, r6, #2
 8004800:	58eb      	ldr	r3, [r5, r3]
 8004802:	4798      	blx	r3
 8004804:	3601      	adds	r6, #1
 8004806:	e7f2      	b.n	80047ee <__libc_init_array+0x1e>
 8004808:	080048a0 	.word	0x080048a0
 800480c:	080048a0 	.word	0x080048a0
 8004810:	080048a4 	.word	0x080048a4
 8004814:	080048a0 	.word	0x080048a0

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
