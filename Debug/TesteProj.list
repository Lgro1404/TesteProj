
TesteProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e18  08003e18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e18  08003e18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003e2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003e2c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a507  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1b  00000000  00000000  0002a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  0002cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100e4  00000000  00000000  0002d497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e73f  00000000  00000000  0003d57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062698  00000000  00000000  0004bcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c50  00000000  00000000  000ae354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b0fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d90 	.word	0x08003d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d90 	.word	0x08003d90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f9d9 	bl	80015e0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f943 	bl	80014c0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fdba 	bl	8000dbc <__aeabi_dsub>
 8000248:	f001 f93a 	bl	80014c0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	001f      	movs	r7, r3
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	4681      	mov	r9, r0
 8000270:	4692      	mov	sl, r2
 8000272:	0005      	movs	r5, r0
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2b00      	cmp	r3, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e152      	b.n	8000528 <__aeabi_ddiv+0x2cc>
 8000282:	4ad2      	ldr	r2, [pc, #840]	; (80005cc <__aeabi_ddiv+0x370>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e16e      	b.n	8000568 <__aeabi_ddiv+0x30c>
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4322      	orrs	r2, r4
 8000296:	4690      	mov	r8, r2
 8000298:	4acd      	ldr	r2, [pc, #820]	; (80005d0 <__aeabi_ddiv+0x374>)
 800029a:	00c5      	lsls	r5, r0, #3
 800029c:	4693      	mov	fp, r2
 800029e:	449b      	add	fp, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	4699      	mov	r9, r3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11a      	b.n	80004ee <__aeabi_ddiv+0x292>
 80002b8:	4ac4      	ldr	r2, [pc, #784]	; (80005cc <__aeabi_ddiv+0x370>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e15e      	b.n	800057e <__aeabi_ddiv+0x322>
 80002c0:	0f42      	lsrs	r2, r0, #29
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	4322      	orrs	r2, r4
 80002c6:	2480      	movs	r4, #128	; 0x80
 80002c8:	0424      	lsls	r4, r4, #16
 80002ca:	4314      	orrs	r4, r2
 80002cc:	4ac0      	ldr	r2, [pc, #768]	; (80005d0 <__aeabi_ddiv+0x374>)
 80002ce:	00c1      	lsls	r1, r0, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	465a      	mov	r2, fp
 80002d4:	4463      	add	r3, ip
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	469b      	mov	fp, r3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	4aba      	ldr	r2, [pc, #744]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58d3      	ldr	r3, [r2, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e287      	b.n	800080e <__aeabi_ddiv+0x5b2>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d5      	b.n	80004b0 <__aeabi_ddiv+0x254>
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	2500      	movs	r5, #0
 800030a:	051b      	lsls	r3, r3, #20
 800030c:	4313      	orrs	r3, r2
 800030e:	4652      	mov	r2, sl
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4ba8      	ldr	r3, [pc, #672]	; (80005cc <__aeabi_ddiv+0x370>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	000d      	movs	r5, r1
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c4      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1bf      	b.n	80006c2 <__aeabi_ddiv+0x466>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e0c      	lsrs	r4, r1, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	020a      	lsls	r2, r1, #8
 800035e:	0c1f      	lsrs	r7, r3, #16
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e201      	b.n	800078e <__aeabi_ddiv+0x532>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff41 	bl	8000214 <__aeabi_uidivmod>
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	0436      	lsls	r6, r6, #16
 8000396:	4342      	muls	r2, r0
 8000398:	0409      	lsls	r1, r1, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	0003      	movs	r3, r0
 800039e:	430e      	orrs	r6, r1
 80003a0:	42b2      	cmp	r2, r6
 80003a2:	d904      	bls.n	80003ae <__aeabi_ddiv+0x152>
 80003a4:	1936      	adds	r6, r6, r4
 80003a6:	3b01      	subs	r3, #1
 80003a8:	42b4      	cmp	r4, r6
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x152>
 80003ac:	e1e9      	b.n	8000782 <__aeabi_ddiv+0x526>
 80003ae:	1ab0      	subs	r0, r6, r2
 80003b0:	4642      	mov	r2, r8
 80003b2:	9e00      	ldr	r6, [sp, #0]
 80003b4:	0412      	lsls	r2, r2, #16
 80003b6:	431a      	orrs	r2, r3
 80003b8:	0c33      	lsrs	r3, r6, #16
 80003ba:	001f      	movs	r7, r3
 80003bc:	0c11      	lsrs	r1, r2, #16
 80003be:	4690      	mov	r8, r2
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	0413      	lsls	r3, r2, #16
 80003c4:	0432      	lsls	r2, r6, #16
 80003c6:	0c16      	lsrs	r6, r2, #16
 80003c8:	0032      	movs	r2, r6
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	435a      	muls	r2, r3
 80003ce:	9603      	str	r6, [sp, #12]
 80003d0:	437b      	muls	r3, r7
 80003d2:	434e      	muls	r6, r1
 80003d4:	4379      	muls	r1, r7
 80003d6:	0c17      	lsrs	r7, r2, #16
 80003d8:	46bc      	mov	ip, r7
 80003da:	199b      	adds	r3, r3, r6
 80003dc:	4463      	add	r3, ip
 80003de:	429e      	cmp	r6, r3
 80003e0:	d903      	bls.n	80003ea <__aeabi_ddiv+0x18e>
 80003e2:	2680      	movs	r6, #128	; 0x80
 80003e4:	0276      	lsls	r6, r6, #9
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4461      	add	r1, ip
 80003ea:	0c1e      	lsrs	r6, r3, #16
 80003ec:	1871      	adds	r1, r6, r1
 80003ee:	0416      	lsls	r6, r2, #16
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	0c36      	lsrs	r6, r6, #16
 80003f4:	199e      	adds	r6, r3, r6
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d302      	bcc.n	8000400 <__aeabi_ddiv+0x1a4>
 80003fa:	d112      	bne.n	8000422 <__aeabi_ddiv+0x1c6>
 80003fc:	42b5      	cmp	r5, r6
 80003fe:	d210      	bcs.n	8000422 <__aeabi_ddiv+0x1c6>
 8000400:	4643      	mov	r3, r8
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	469c      	mov	ip, r3
 8000408:	4465      	add	r5, ip
 800040a:	001f      	movs	r7, r3
 800040c:	429d      	cmp	r5, r3
 800040e:	419b      	sbcs	r3, r3
 8000410:	425b      	negs	r3, r3
 8000412:	191b      	adds	r3, r3, r4
 8000414:	18c0      	adds	r0, r0, r3
 8000416:	4284      	cmp	r4, r0
 8000418:	d200      	bcs.n	800041c <__aeabi_ddiv+0x1c0>
 800041a:	e19e      	b.n	800075a <__aeabi_ddiv+0x4fe>
 800041c:	d100      	bne.n	8000420 <__aeabi_ddiv+0x1c4>
 800041e:	e199      	b.n	8000754 <__aeabi_ddiv+0x4f8>
 8000420:	4690      	mov	r8, r2
 8000422:	1bae      	subs	r6, r5, r6
 8000424:	42b5      	cmp	r5, r6
 8000426:	41ad      	sbcs	r5, r5
 8000428:	1a40      	subs	r0, r0, r1
 800042a:	426d      	negs	r5, r5
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e1d2      	b.n	80007da <__aeabi_ddiv+0x57e>
 8000434:	4649      	mov	r1, r9
 8000436:	f7ff feed 	bl	8000214 <__aeabi_uidivmod>
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	040b      	lsls	r3, r1, #16
 800043e:	4342      	muls	r2, r0
 8000440:	0c31      	lsrs	r1, r6, #16
 8000442:	0005      	movs	r5, r0
 8000444:	4319      	orrs	r1, r3
 8000446:	428a      	cmp	r2, r1
 8000448:	d900      	bls.n	800044c <__aeabi_ddiv+0x1f0>
 800044a:	e16c      	b.n	8000726 <__aeabi_ddiv+0x4ca>
 800044c:	1a88      	subs	r0, r1, r2
 800044e:	4649      	mov	r1, r9
 8000450:	f7ff fee0 	bl	8000214 <__aeabi_uidivmod>
 8000454:	9a01      	ldr	r2, [sp, #4]
 8000456:	0436      	lsls	r6, r6, #16
 8000458:	4342      	muls	r2, r0
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	0c36      	lsrs	r6, r6, #16
 800045e:	0003      	movs	r3, r0
 8000460:	430e      	orrs	r6, r1
 8000462:	42b2      	cmp	r2, r6
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x20c>
 8000466:	e153      	b.n	8000710 <__aeabi_ddiv+0x4b4>
 8000468:	9803      	ldr	r0, [sp, #12]
 800046a:	1ab6      	subs	r6, r6, r2
 800046c:	0002      	movs	r2, r0
 800046e:	042d      	lsls	r5, r5, #16
 8000470:	431d      	orrs	r5, r3
 8000472:	9f02      	ldr	r7, [sp, #8]
 8000474:	042b      	lsls	r3, r5, #16
 8000476:	0c1b      	lsrs	r3, r3, #16
 8000478:	435a      	muls	r2, r3
 800047a:	437b      	muls	r3, r7
 800047c:	469c      	mov	ip, r3
 800047e:	0c29      	lsrs	r1, r5, #16
 8000480:	4348      	muls	r0, r1
 8000482:	0c13      	lsrs	r3, r2, #16
 8000484:	4484      	add	ip, r0
 8000486:	4463      	add	r3, ip
 8000488:	4379      	muls	r1, r7
 800048a:	4298      	cmp	r0, r3
 800048c:	d903      	bls.n	8000496 <__aeabi_ddiv+0x23a>
 800048e:	2080      	movs	r0, #128	; 0x80
 8000490:	0240      	lsls	r0, r0, #9
 8000492:	4684      	mov	ip, r0
 8000494:	4461      	add	r1, ip
 8000496:	0c18      	lsrs	r0, r3, #16
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	0c12      	lsrs	r2, r2, #16
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	189b      	adds	r3, r3, r2
 80004a2:	4286      	cmp	r6, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x24c>
 80004a6:	e100      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x250>
 80004aa:	e0fb      	b.n	80006a4 <__aeabi_ddiv+0x448>
 80004ac:	2301      	movs	r3, #1
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80004b2:	445b      	add	r3, fp
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_ddiv+0x25e>
 80004b8:	e0aa      	b.n	8000610 <__aeabi_ddiv+0x3b4>
 80004ba:	076a      	lsls	r2, r5, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e13d      	b.n	800073c <__aeabi_ddiv+0x4e0>
 80004c0:	08e9      	lsrs	r1, r5, #3
 80004c2:	4642      	mov	r2, r8
 80004c4:	01d2      	lsls	r2, r2, #7
 80004c6:	d506      	bpl.n	80004d6 <__aeabi_ddiv+0x27a>
 80004c8:	4642      	mov	r2, r8
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <__aeabi_ddiv+0x380>)
 80004cc:	401a      	ands	r2, r3
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	4690      	mov	r8, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	445b      	add	r3, fp
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	dd00      	ble.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e723      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004de:	4642      	mov	r2, r8
 80004e0:	055b      	lsls	r3, r3, #21
 80004e2:	0755      	lsls	r5, r2, #29
 80004e4:	0252      	lsls	r2, r2, #9
 80004e6:	430d      	orrs	r5, r1
 80004e8:	0b12      	lsrs	r2, r2, #12
 80004ea:	0d5b      	lsrs	r3, r3, #21
 80004ec:	e70d      	b.n	800030a <__aeabi_ddiv+0xae>
 80004ee:	4651      	mov	r1, sl
 80004f0:	4321      	orrs	r1, r4
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0x29a>
 80004f4:	e07c      	b.n	80005f0 <__aeabi_ddiv+0x394>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x2a0>
 80004fa:	e0fb      	b.n	80006f4 <__aeabi_ddiv+0x498>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 f879 	bl	80015f4 <__clzsi2>
 8000502:	0002      	movs	r2, r0
 8000504:	3a0b      	subs	r2, #11
 8000506:	231d      	movs	r3, #29
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	4652      	mov	r2, sl
 800050c:	0001      	movs	r1, r0
 800050e:	40da      	lsrs	r2, r3
 8000510:	4653      	mov	r3, sl
 8000512:	3908      	subs	r1, #8
 8000514:	408b      	lsls	r3, r1
 8000516:	408c      	lsls	r4, r1
 8000518:	0019      	movs	r1, r3
 800051a:	4314      	orrs	r4, r2
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <__aeabi_ddiv+0x388>)
 800051e:	4458      	add	r0, fp
 8000520:	469b      	mov	fp, r3
 8000522:	4483      	add	fp, r0
 8000524:	2000      	movs	r0, #0
 8000526:	e6d9      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000528:	0003      	movs	r3, r0
 800052a:	4323      	orrs	r3, r4
 800052c:	4698      	mov	r8, r3
 800052e:	d044      	beq.n	80005ba <__aeabi_ddiv+0x35e>
 8000530:	2c00      	cmp	r4, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x2da>
 8000534:	e0cf      	b.n	80006d6 <__aeabi_ddiv+0x47a>
 8000536:	0020      	movs	r0, r4
 8000538:	f001 f85c 	bl	80015f4 <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	0002      	movs	r2, r0
 8000540:	390b      	subs	r1, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	4649      	mov	r1, r9
 8000548:	0010      	movs	r0, r2
 800054a:	40d9      	lsrs	r1, r3
 800054c:	3808      	subs	r0, #8
 800054e:	4084      	lsls	r4, r0
 8000550:	000b      	movs	r3, r1
 8000552:	464d      	mov	r5, r9
 8000554:	4323      	orrs	r3, r4
 8000556:	4698      	mov	r8, r3
 8000558:	4085      	lsls	r5, r0
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <__aeabi_ddiv+0x38c>)
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	469b      	mov	fp, r3
 8000560:	2300      	movs	r3, #0
 8000562:	4699      	mov	r9, r3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e69e      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000568:	0002      	movs	r2, r0
 800056a:	4322      	orrs	r2, r4
 800056c:	4690      	mov	r8, r2
 800056e:	d11d      	bne.n	80005ac <__aeabi_ddiv+0x350>
 8000570:	2208      	movs	r2, #8
 8000572:	469b      	mov	fp, r3
 8000574:	2302      	movs	r3, #2
 8000576:	2500      	movs	r5, #0
 8000578:	4691      	mov	r9, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e693      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 800057e:	4651      	mov	r1, sl
 8000580:	4321      	orrs	r1, r4
 8000582:	d109      	bne.n	8000598 <__aeabi_ddiv+0x33c>
 8000584:	2302      	movs	r3, #2
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <__aeabi_ddiv+0x390>)
 800058c:	4691      	mov	r9, r2
 800058e:	469c      	mov	ip, r3
 8000590:	2400      	movs	r4, #0
 8000592:	2002      	movs	r0, #2
 8000594:	44e3      	add	fp, ip
 8000596:	e6a1      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000598:	2303      	movs	r3, #3
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <__aeabi_ddiv+0x390>)
 80005a0:	4691      	mov	r9, r2
 80005a2:	469c      	mov	ip, r3
 80005a4:	4651      	mov	r1, sl
 80005a6:	2003      	movs	r0, #3
 80005a8:	44e3      	add	fp, ip
 80005aa:	e697      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005ac:	220c      	movs	r2, #12
 80005ae:	469b      	mov	fp, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	46a0      	mov	r8, r4
 80005b4:	4691      	mov	r9, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e675      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e66d      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	08003da8 	.word	0x08003da8
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	000003f3 	.word	0x000003f3
 80005e8:	fffffc0d 	.word	0xfffffc0d
 80005ec:	fffff801 	.word	0xfffff801
 80005f0:	464a      	mov	r2, r9
 80005f2:	2301      	movs	r3, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2400      	movs	r4, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	e66e      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005fe:	2300      	movs	r3, #0
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	469a      	mov	sl, r3
 8000604:	2500      	movs	r5, #0
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <__aeabi_ddiv+0x5cc>)
 8000608:	0312      	lsls	r2, r2, #12
 800060a:	e67e      	b.n	800030a <__aeabi_ddiv+0xae>
 800060c:	2501      	movs	r5, #1
 800060e:	426d      	negs	r5, r5
 8000610:	2201      	movs	r2, #1
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	2a38      	cmp	r2, #56	; 0x38
 8000616:	dd00      	ble.n	800061a <__aeabi_ddiv+0x3be>
 8000618:	e674      	b.n	8000304 <__aeabi_ddiv+0xa8>
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_ddiv+0x3c4>
 800061e:	e0bd      	b.n	800079c <__aeabi_ddiv+0x540>
 8000620:	211f      	movs	r1, #31
 8000622:	4249      	negs	r1, r1
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	4641      	mov	r1, r8
 8000628:	40d9      	lsrs	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	2a20      	cmp	r2, #32
 800062e:	d004      	beq.n	800063a <__aeabi_ddiv+0x3de>
 8000630:	4641      	mov	r1, r8
 8000632:	4a7e      	ldr	r2, [pc, #504]	; (800082c <__aeabi_ddiv+0x5d0>)
 8000634:	445a      	add	r2, fp
 8000636:	4091      	lsls	r1, r2
 8000638:	430d      	orrs	r5, r1
 800063a:	0029      	movs	r1, r5
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	2307      	movs	r3, #7
 8000644:	001d      	movs	r5, r3
 8000646:	2200      	movs	r2, #0
 8000648:	400d      	ands	r5, r1
 800064a:	420b      	tst	r3, r1
 800064c:	d100      	bne.n	8000650 <__aeabi_ddiv+0x3f4>
 800064e:	e0d0      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000650:	220f      	movs	r2, #15
 8000652:	2300      	movs	r3, #0
 8000654:	400a      	ands	r2, r1
 8000656:	2a04      	cmp	r2, #4
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x400>
 800065a:	e0c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800065c:	1d0a      	adds	r2, r1, #4
 800065e:	428a      	cmp	r2, r1
 8000660:	4189      	sbcs	r1, r1
 8000662:	4249      	negs	r1, r1
 8000664:	185b      	adds	r3, r3, r1
 8000666:	0011      	movs	r1, r2
 8000668:	021a      	lsls	r2, r3, #8
 800066a:	d400      	bmi.n	800066e <__aeabi_ddiv+0x412>
 800066c:	e0be      	b.n	80007ec <__aeabi_ddiv+0x590>
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	2500      	movs	r5, #0
 8000674:	e649      	b.n	800030a <__aeabi_ddiv+0xae>
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	4643      	mov	r3, r8
 800067a:	0312      	lsls	r2, r2, #12
 800067c:	4213      	tst	r3, r2
 800067e:	d008      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000680:	4214      	tst	r4, r2
 8000682:	d106      	bne.n	8000692 <__aeabi_ddiv+0x436>
 8000684:	4322      	orrs	r2, r4
 8000686:	0312      	lsls	r2, r2, #12
 8000688:	46ba      	mov	sl, r7
 800068a:	000d      	movs	r5, r1
 800068c:	4b66      	ldr	r3, [pc, #408]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800068e:	0b12      	lsrs	r2, r2, #12
 8000690:	e63b      	b.n	800030a <__aeabi_ddiv+0xae>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4643      	mov	r3, r8
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	431a      	orrs	r2, r3
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	46b2      	mov	sl, r6
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <__aeabi_ddiv+0x5cc>)
 80006a0:	0b12      	lsrs	r2, r2, #12
 80006a2:	e632      	b.n	800030a <__aeabi_ddiv+0xae>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x44e>
 80006a8:	e702      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80006aa:	19a6      	adds	r6, r4, r6
 80006ac:	1e6a      	subs	r2, r5, #1
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d200      	bcs.n	80006b4 <__aeabi_ddiv+0x458>
 80006b2:	e089      	b.n	80007c8 <__aeabi_ddiv+0x56c>
 80006b4:	4286      	cmp	r6, r0
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e09f      	b.n	80007fa <__aeabi_ddiv+0x59e>
 80006ba:	d100      	bne.n	80006be <__aeabi_ddiv+0x462>
 80006bc:	e0af      	b.n	800081e <__aeabi_ddiv+0x5c2>
 80006be:	0015      	movs	r5, r2
 80006c0:	e6f4      	b.n	80004ac <__aeabi_ddiv+0x250>
 80006c2:	42a9      	cmp	r1, r5
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x46c>
 80006c6:	e63c      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006c8:	4643      	mov	r3, r8
 80006ca:	07de      	lsls	r6, r3, #31
 80006cc:	0858      	lsrs	r0, r3, #1
 80006ce:	086b      	lsrs	r3, r5, #1
 80006d0:	431e      	orrs	r6, r3
 80006d2:	07ed      	lsls	r5, r5, #31
 80006d4:	e63c      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006d6:	f000 ff8d 	bl	80015f4 <__clzsi2>
 80006da:	0001      	movs	r1, r0
 80006dc:	0002      	movs	r2, r0
 80006de:	3115      	adds	r1, #21
 80006e0:	3220      	adds	r2, #32
 80006e2:	291c      	cmp	r1, #28
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_ddiv+0x48c>
 80006e6:	e72c      	b.n	8000542 <__aeabi_ddiv+0x2e6>
 80006e8:	464b      	mov	r3, r9
 80006ea:	3808      	subs	r0, #8
 80006ec:	4083      	lsls	r3, r0
 80006ee:	2500      	movs	r5, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	e732      	b.n	800055a <__aeabi_ddiv+0x2fe>
 80006f4:	f000 ff7e 	bl	80015f4 <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	001a      	movs	r2, r3
 80006fc:	3215      	adds	r2, #21
 80006fe:	3020      	adds	r0, #32
 8000700:	2a1c      	cmp	r2, #28
 8000702:	dc00      	bgt.n	8000706 <__aeabi_ddiv+0x4aa>
 8000704:	e6ff      	b.n	8000506 <__aeabi_ddiv+0x2aa>
 8000706:	4654      	mov	r4, sl
 8000708:	3b08      	subs	r3, #8
 800070a:	2100      	movs	r1, #0
 800070c:	409c      	lsls	r4, r3
 800070e:	e705      	b.n	800051c <__aeabi_ddiv+0x2c0>
 8000710:	1936      	adds	r6, r6, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	42b4      	cmp	r4, r6
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4be>
 8000718:	e6a6      	b.n	8000468 <__aeabi_ddiv+0x20c>
 800071a:	42b2      	cmp	r2, r6
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x4c4>
 800071e:	e6a3      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000720:	1e83      	subs	r3, r0, #2
 8000722:	1936      	adds	r6, r6, r4
 8000724:	e6a0      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000726:	1909      	adds	r1, r1, r4
 8000728:	3d01      	subs	r5, #1
 800072a:	428c      	cmp	r4, r1
 800072c:	d900      	bls.n	8000730 <__aeabi_ddiv+0x4d4>
 800072e:	e68d      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000730:	428a      	cmp	r2, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x4da>
 8000734:	e68a      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000736:	1e85      	subs	r5, r0, #2
 8000738:	1909      	adds	r1, r1, r4
 800073a:	e687      	b.n	800044c <__aeabi_ddiv+0x1f0>
 800073c:	220f      	movs	r2, #15
 800073e:	402a      	ands	r2, r5
 8000740:	2a04      	cmp	r2, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 8000744:	e6bc      	b.n	80004c0 <__aeabi_ddiv+0x264>
 8000746:	1d29      	adds	r1, r5, #4
 8000748:	42a9      	cmp	r1, r5
 800074a:	41ad      	sbcs	r5, r5
 800074c:	426d      	negs	r5, r5
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	44a8      	add	r8, r5
 8000752:	e6b6      	b.n	80004c2 <__aeabi_ddiv+0x266>
 8000754:	42af      	cmp	r7, r5
 8000756:	d900      	bls.n	800075a <__aeabi_ddiv+0x4fe>
 8000758:	e662      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 800075a:	4281      	cmp	r1, r0
 800075c:	d804      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 800075e:	d000      	beq.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e65e      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000762:	42ae      	cmp	r6, r5
 8000764:	d800      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 8000766:	e65b      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000768:	2302      	movs	r3, #2
 800076a:	425b      	negs	r3, r3
 800076c:	469c      	mov	ip, r3
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	44e0      	add	r8, ip
 8000772:	469c      	mov	ip, r3
 8000774:	4465      	add	r5, ip
 8000776:	429d      	cmp	r5, r3
 8000778:	419b      	sbcs	r3, r3
 800077a:	425b      	negs	r3, r3
 800077c:	191b      	adds	r3, r3, r4
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	e64f      	b.n	8000422 <__aeabi_ddiv+0x1c6>
 8000782:	42b2      	cmp	r2, r6
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x52c>
 8000786:	e612      	b.n	80003ae <__aeabi_ddiv+0x152>
 8000788:	1e83      	subs	r3, r0, #2
 800078a:	1936      	adds	r6, r6, r4
 800078c:	e60f      	b.n	80003ae <__aeabi_ddiv+0x152>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e5fa      	b.n	800038a <__aeabi_ddiv+0x12e>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	4698      	mov	r8, r3
 8000798:	1909      	adds	r1, r1, r4
 800079a:	e5f6      	b.n	800038a <__aeabi_ddiv+0x12e>
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <__aeabi_ddiv+0x5d4>)
 800079e:	0028      	movs	r0, r5
 80007a0:	445b      	add	r3, fp
 80007a2:	4641      	mov	r1, r8
 80007a4:	409d      	lsls	r5, r3
 80007a6:	4099      	lsls	r1, r3
 80007a8:	40d0      	lsrs	r0, r2
 80007aa:	1e6b      	subs	r3, r5, #1
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	4301      	orrs	r1, r0
 80007b2:	4329      	orrs	r1, r5
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	074a      	lsls	r2, r1, #29
 80007b8:	d100      	bne.n	80007bc <__aeabi_ddiv+0x560>
 80007ba:	e755      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007bc:	220f      	movs	r2, #15
 80007be:	400a      	ands	r2, r1
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_ddiv+0x56a>
 80007c4:	e74a      	b.n	800065c <__aeabi_ddiv+0x400>
 80007c6:	e74f      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007c8:	0015      	movs	r5, r2
 80007ca:	4286      	cmp	r6, r0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_ddiv+0x574>
 80007ce:	e66d      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x57c>
 80007d6:	e669      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d8:	e66a      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <__aeabi_ddiv+0x5d8>)
 80007dc:	445b      	add	r3, fp
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_ddiv+0x588>
 80007e2:	e713      	b.n	800060c <__aeabi_ddiv+0x3b0>
 80007e4:	2501      	movs	r5, #1
 80007e6:	2100      	movs	r1, #0
 80007e8:	44a8      	add	r8, r5
 80007ea:	e66a      	b.n	80004c2 <__aeabi_ddiv+0x266>
 80007ec:	075d      	lsls	r5, r3, #29
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	0b1a      	lsrs	r2, r3, #12
 80007f2:	08c9      	lsrs	r1, r1, #3
 80007f4:	2300      	movs	r3, #0
 80007f6:	430d      	orrs	r5, r1
 80007f8:	e587      	b.n	800030a <__aeabi_ddiv+0xae>
 80007fa:	9900      	ldr	r1, [sp, #0]
 80007fc:	3d02      	subs	r5, #2
 80007fe:	004a      	lsls	r2, r1, #1
 8000800:	428a      	cmp	r2, r1
 8000802:	41bf      	sbcs	r7, r7
 8000804:	427f      	negs	r7, r7
 8000806:	193f      	adds	r7, r7, r4
 8000808:	19f6      	adds	r6, r6, r7
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	e7dd      	b.n	80007ca <__aeabi_ddiv+0x56e>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4643      	mov	r3, r8
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	431a      	orrs	r2, r3
 8000816:	0312      	lsls	r2, r2, #12
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800081a:	0b12      	lsrs	r2, r2, #12
 800081c:	e575      	b.n	800030a <__aeabi_ddiv+0xae>
 800081e:	9900      	ldr	r1, [sp, #0]
 8000820:	4299      	cmp	r1, r3
 8000822:	d3ea      	bcc.n	80007fa <__aeabi_ddiv+0x59e>
 8000824:	0015      	movs	r5, r2
 8000826:	e7d3      	b.n	80007d0 <__aeabi_ddiv+0x574>
 8000828:	000007ff 	.word	0x000007ff
 800082c:	0000043e 	.word	0x0000043e
 8000830:	0000041e 	.word	0x0000041e
 8000834:	000003ff 	.word	0x000003ff

08000838 <__aeabi_dmul>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	4645      	mov	r5, r8
 800083c:	46de      	mov	lr, fp
 800083e:	4657      	mov	r7, sl
 8000840:	464e      	mov	r6, r9
 8000842:	b5e0      	push	{r5, r6, r7, lr}
 8000844:	001f      	movs	r7, r3
 8000846:	030b      	lsls	r3, r1, #12
 8000848:	0b1b      	lsrs	r3, r3, #12
 800084a:	469b      	mov	fp, r3
 800084c:	004d      	lsls	r5, r1, #1
 800084e:	0fcb      	lsrs	r3, r1, #31
 8000850:	0004      	movs	r4, r0
 8000852:	4691      	mov	r9, r2
 8000854:	4698      	mov	r8, r3
 8000856:	b087      	sub	sp, #28
 8000858:	0d6d      	lsrs	r5, r5, #21
 800085a:	d100      	bne.n	800085e <__aeabi_dmul+0x26>
 800085c:	e1cd      	b.n	8000bfa <__aeabi_dmul+0x3c2>
 800085e:	4bce      	ldr	r3, [pc, #824]	; (8000b98 <__aeabi_dmul+0x360>)
 8000860:	429d      	cmp	r5, r3
 8000862:	d100      	bne.n	8000866 <__aeabi_dmul+0x2e>
 8000864:	e1e9      	b.n	8000c3a <__aeabi_dmul+0x402>
 8000866:	465a      	mov	r2, fp
 8000868:	0f43      	lsrs	r3, r0, #29
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	4313      	orrs	r3, r2
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0412      	lsls	r2, r2, #16
 8000872:	431a      	orrs	r2, r3
 8000874:	00c3      	lsls	r3, r0, #3
 8000876:	469a      	mov	sl, r3
 8000878:	4bc8      	ldr	r3, [pc, #800]	; (8000b9c <__aeabi_dmul+0x364>)
 800087a:	4693      	mov	fp, r2
 800087c:	469c      	mov	ip, r3
 800087e:	2300      	movs	r3, #0
 8000880:	2600      	movs	r6, #0
 8000882:	4465      	add	r5, ip
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	033c      	lsls	r4, r7, #12
 8000888:	007b      	lsls	r3, r7, #1
 800088a:	4648      	mov	r0, r9
 800088c:	0b24      	lsrs	r4, r4, #12
 800088e:	0d5b      	lsrs	r3, r3, #21
 8000890:	0fff      	lsrs	r7, r7, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_dmul+0x60>
 8000896:	e189      	b.n	8000bac <__aeabi_dmul+0x374>
 8000898:	4abf      	ldr	r2, [pc, #764]	; (8000b98 <__aeabi_dmul+0x360>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x9a>
 800089e:	0f42      	lsrs	r2, r0, #29
 80008a0:	00e4      	lsls	r4, r4, #3
 80008a2:	4322      	orrs	r2, r4
 80008a4:	2480      	movs	r4, #128	; 0x80
 80008a6:	0424      	lsls	r4, r4, #16
 80008a8:	4314      	orrs	r4, r2
 80008aa:	4abc      	ldr	r2, [pc, #752]	; (8000b9c <__aeabi_dmul+0x364>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4694      	mov	ip, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	4463      	add	r3, ip
 80008b4:	195b      	adds	r3, r3, r5
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	9b01      	ldr	r3, [sp, #4]
 80008ba:	407a      	eors	r2, r7
 80008bc:	3301      	adds	r3, #1
 80008be:	00c0      	lsls	r0, r0, #3
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2e0a      	cmp	r6, #10
 80008c6:	dd1c      	ble.n	8000902 <__aeabi_dmul+0xca>
 80008c8:	003a      	movs	r2, r7
 80008ca:	2e0b      	cmp	r6, #11
 80008cc:	d05e      	beq.n	800098c <__aeabi_dmul+0x154>
 80008ce:	4647      	mov	r7, r8
 80008d0:	e056      	b.n	8000980 <__aeabi_dmul+0x148>
 80008d2:	4649      	mov	r1, r9
 80008d4:	4bb0      	ldr	r3, [pc, #704]	; (8000b98 <__aeabi_dmul+0x360>)
 80008d6:	4321      	orrs	r1, r4
 80008d8:	18eb      	adds	r3, r5, r3
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	2900      	cmp	r1, #0
 80008de:	d12a      	bne.n	8000936 <__aeabi_dmul+0xfe>
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	2202      	movs	r2, #2
 80008e4:	0100      	lsls	r0, r0, #4
 80008e6:	002b      	movs	r3, r5
 80008e8:	4684      	mov	ip, r0
 80008ea:	4316      	orrs	r6, r2
 80008ec:	4642      	mov	r2, r8
 80008ee:	4463      	add	r3, ip
 80008f0:	407a      	eors	r2, r7
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2e0a      	cmp	r6, #10
 80008f8:	dd00      	ble.n	80008fc <__aeabi_dmul+0xc4>
 80008fa:	e231      	b.n	8000d60 <__aeabi_dmul+0x528>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	2102      	movs	r1, #2
 8000902:	2e02      	cmp	r6, #2
 8000904:	dc26      	bgt.n	8000954 <__aeabi_dmul+0x11c>
 8000906:	3e01      	subs	r6, #1
 8000908:	2e01      	cmp	r6, #1
 800090a:	d852      	bhi.n	80009b2 <__aeabi_dmul+0x17a>
 800090c:	2902      	cmp	r1, #2
 800090e:	d04c      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000910:	2901      	cmp	r1, #1
 8000912:	d000      	beq.n	8000916 <__aeabi_dmul+0xde>
 8000914:	e118      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000916:	2300      	movs	r3, #0
 8000918:	2400      	movs	r4, #0
 800091a:	2500      	movs	r5, #0
 800091c:	051b      	lsls	r3, r3, #20
 800091e:	4323      	orrs	r3, r4
 8000920:	07d2      	lsls	r2, r2, #31
 8000922:	4313      	orrs	r3, r2
 8000924:	0028      	movs	r0, r5
 8000926:	0019      	movs	r1, r3
 8000928:	b007      	add	sp, #28
 800092a:	bcf0      	pop	{r4, r5, r6, r7}
 800092c:	46bb      	mov	fp, r7
 800092e:	46b2      	mov	sl, r6
 8000930:	46a9      	mov	r9, r5
 8000932:	46a0      	mov	r8, r4
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	2203      	movs	r2, #3
 800093a:	0109      	lsls	r1, r1, #4
 800093c:	002b      	movs	r3, r5
 800093e:	468c      	mov	ip, r1
 8000940:	4316      	orrs	r6, r2
 8000942:	4642      	mov	r2, r8
 8000944:	4463      	add	r3, ip
 8000946:	407a      	eors	r2, r7
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2e0a      	cmp	r6, #10
 800094e:	dd00      	ble.n	8000952 <__aeabi_dmul+0x11a>
 8000950:	e228      	b.n	8000da4 <__aeabi_dmul+0x56c>
 8000952:	2103      	movs	r1, #3
 8000954:	2501      	movs	r5, #1
 8000956:	40b5      	lsls	r5, r6
 8000958:	46ac      	mov	ip, r5
 800095a:	26a6      	movs	r6, #166	; 0xa6
 800095c:	4663      	mov	r3, ip
 800095e:	00f6      	lsls	r6, r6, #3
 8000960:	4035      	ands	r5, r6
 8000962:	4233      	tst	r3, r6
 8000964:	d10b      	bne.n	800097e <__aeabi_dmul+0x146>
 8000966:	2690      	movs	r6, #144	; 0x90
 8000968:	00b6      	lsls	r6, r6, #2
 800096a:	4233      	tst	r3, r6
 800096c:	d118      	bne.n	80009a0 <__aeabi_dmul+0x168>
 800096e:	3eb9      	subs	r6, #185	; 0xb9
 8000970:	3eff      	subs	r6, #255	; 0xff
 8000972:	421e      	tst	r6, r3
 8000974:	d01d      	beq.n	80009b2 <__aeabi_dmul+0x17a>
 8000976:	46a3      	mov	fp, r4
 8000978:	4682      	mov	sl, r0
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	e000      	b.n	8000980 <__aeabi_dmul+0x148>
 800097e:	0017      	movs	r7, r2
 8000980:	9900      	ldr	r1, [sp, #0]
 8000982:	003a      	movs	r2, r7
 8000984:	2902      	cmp	r1, #2
 8000986:	d010      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000988:	465c      	mov	r4, fp
 800098a:	4650      	mov	r0, sl
 800098c:	2903      	cmp	r1, #3
 800098e:	d1bf      	bne.n	8000910 <__aeabi_dmul+0xd8>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	031b      	lsls	r3, r3, #12
 8000994:	431c      	orrs	r4, r3
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	0005      	movs	r5, r0
 800099a:	4b7f      	ldr	r3, [pc, #508]	; (8000b98 <__aeabi_dmul+0x360>)
 800099c:	0b24      	lsrs	r4, r4, #12
 800099e:	e7bd      	b.n	800091c <__aeabi_dmul+0xe4>
 80009a0:	2480      	movs	r4, #128	; 0x80
 80009a2:	2200      	movs	r2, #0
 80009a4:	4b7c      	ldr	r3, [pc, #496]	; (8000b98 <__aeabi_dmul+0x360>)
 80009a6:	0324      	lsls	r4, r4, #12
 80009a8:	e7b8      	b.n	800091c <__aeabi_dmul+0xe4>
 80009aa:	2400      	movs	r4, #0
 80009ac:	2500      	movs	r5, #0
 80009ae:	4b7a      	ldr	r3, [pc, #488]	; (8000b98 <__aeabi_dmul+0x360>)
 80009b0:	e7b4      	b.n	800091c <__aeabi_dmul+0xe4>
 80009b2:	4653      	mov	r3, sl
 80009b4:	041e      	lsls	r6, r3, #16
 80009b6:	0c36      	lsrs	r6, r6, #16
 80009b8:	0c1f      	lsrs	r7, r3, #16
 80009ba:	0033      	movs	r3, r6
 80009bc:	0c01      	lsrs	r1, r0, #16
 80009be:	0400      	lsls	r0, r0, #16
 80009c0:	0c00      	lsrs	r0, r0, #16
 80009c2:	4343      	muls	r3, r0
 80009c4:	4698      	mov	r8, r3
 80009c6:	0003      	movs	r3, r0
 80009c8:	437b      	muls	r3, r7
 80009ca:	4699      	mov	r9, r3
 80009cc:	0033      	movs	r3, r6
 80009ce:	434b      	muls	r3, r1
 80009d0:	469c      	mov	ip, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	000d      	movs	r5, r1
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	469a      	mov	sl, r3
 80009da:	437d      	muls	r5, r7
 80009dc:	44cc      	add	ip, r9
 80009de:	44d4      	add	ip, sl
 80009e0:	9500      	str	r5, [sp, #0]
 80009e2:	45e1      	cmp	r9, ip
 80009e4:	d904      	bls.n	80009f0 <__aeabi_dmul+0x1b8>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	4699      	mov	r9, r3
 80009ec:	444d      	add	r5, r9
 80009ee:	9500      	str	r5, [sp, #0]
 80009f0:	4663      	mov	r3, ip
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	001d      	movs	r5, r3
 80009f6:	4663      	mov	r3, ip
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	469c      	mov	ip, r3
 80009fc:	4643      	mov	r3, r8
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	4698      	mov	r8, r3
 8000a04:	4663      	mov	r3, ip
 8000a06:	4443      	add	r3, r8
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	0c23      	lsrs	r3, r4, #16
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	0424      	lsls	r4, r4, #16
 8000a12:	0c24      	lsrs	r4, r4, #16
 8000a14:	4363      	muls	r3, r4
 8000a16:	469c      	mov	ip, r3
 8000a18:	0023      	movs	r3, r4
 8000a1a:	437b      	muls	r3, r7
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	4643      	mov	r3, r8
 8000a20:	435e      	muls	r6, r3
 8000a22:	435f      	muls	r7, r3
 8000a24:	444e      	add	r6, r9
 8000a26:	4663      	mov	r3, ip
 8000a28:	46b2      	mov	sl, r6
 8000a2a:	0c1e      	lsrs	r6, r3, #16
 8000a2c:	4456      	add	r6, sl
 8000a2e:	45b1      	cmp	r9, r6
 8000a30:	d903      	bls.n	8000a3a <__aeabi_dmul+0x202>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	4699      	mov	r9, r3
 8000a38:	444f      	add	r7, r9
 8000a3a:	0c33      	lsrs	r3, r6, #16
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	003b      	movs	r3, r7
 8000a40:	444b      	add	r3, r9
 8000a42:	9305      	str	r3, [sp, #20]
 8000a44:	4663      	mov	r3, ip
 8000a46:	46ac      	mov	ip, r5
 8000a48:	041f      	lsls	r7, r3, #16
 8000a4a:	0c3f      	lsrs	r7, r7, #16
 8000a4c:	0436      	lsls	r6, r6, #16
 8000a4e:	19f6      	adds	r6, r6, r7
 8000a50:	44b4      	add	ip, r6
 8000a52:	4663      	mov	r3, ip
 8000a54:	9304      	str	r3, [sp, #16]
 8000a56:	465b      	mov	r3, fp
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	465b      	mov	r3, fp
 8000a5e:	041f      	lsls	r7, r3, #16
 8000a60:	0c3f      	lsrs	r7, r7, #16
 8000a62:	003b      	movs	r3, r7
 8000a64:	4343      	muls	r3, r0
 8000a66:	4699      	mov	r9, r3
 8000a68:	4663      	mov	r3, ip
 8000a6a:	4343      	muls	r3, r0
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	464b      	mov	r3, r9
 8000a70:	4660      	mov	r0, ip
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	469b      	mov	fp, r3
 8000a76:	4348      	muls	r0, r1
 8000a78:	4379      	muls	r1, r7
 8000a7a:	4451      	add	r1, sl
 8000a7c:	4459      	add	r1, fp
 8000a7e:	458a      	cmp	sl, r1
 8000a80:	d903      	bls.n	8000a8a <__aeabi_dmul+0x252>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	469a      	mov	sl, r3
 8000a88:	4450      	add	r0, sl
 8000a8a:	0c0b      	lsrs	r3, r1, #16
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	464b      	mov	r3, r9
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	4699      	mov	r9, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	4363      	muls	r3, r4
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	4645      	mov	r5, r8
 8000a9e:	4449      	add	r1, r9
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	435c      	muls	r4, r3
 8000aa6:	436b      	muls	r3, r5
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	4698      	mov	r8, r3
 8000ab0:	436f      	muls	r7, r5
 8000ab2:	193f      	adds	r7, r7, r4
 8000ab4:	4447      	add	r7, r8
 8000ab6:	4450      	add	r0, sl
 8000ab8:	42bc      	cmp	r4, r7
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_dmul+0x28c>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	44c4      	add	ip, r8
 8000ac4:	9b04      	ldr	r3, [sp, #16]
 8000ac6:	9d00      	ldr	r5, [sp, #0]
 8000ac8:	4698      	mov	r8, r3
 8000aca:	4445      	add	r5, r8
 8000acc:	42b5      	cmp	r5, r6
 8000ace:	41b6      	sbcs	r6, r6
 8000ad0:	4273      	negs	r3, r6
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	041e      	lsls	r6, r3, #16
 8000ad8:	9b05      	ldr	r3, [sp, #20]
 8000ada:	043c      	lsls	r4, r7, #16
 8000adc:	4699      	mov	r9, r3
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	19a4      	adds	r4, r4, r6
 8000ae2:	444c      	add	r4, r9
 8000ae4:	46a1      	mov	r9, r4
 8000ae6:	4683      	mov	fp, r0
 8000ae8:	186e      	adds	r6, r5, r1
 8000aea:	44c1      	add	r9, r8
 8000aec:	428e      	cmp	r6, r1
 8000aee:	4189      	sbcs	r1, r1
 8000af0:	44cb      	add	fp, r9
 8000af2:	465d      	mov	r5, fp
 8000af4:	4249      	negs	r1, r1
 8000af6:	186d      	adds	r5, r5, r1
 8000af8:	429c      	cmp	r4, r3
 8000afa:	41a4      	sbcs	r4, r4
 8000afc:	45c1      	cmp	r9, r8
 8000afe:	419b      	sbcs	r3, r3
 8000b00:	4583      	cmp	fp, r0
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	428d      	cmp	r5, r1
 8000b06:	4189      	sbcs	r1, r1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	4264      	negs	r4, r4
 8000b0c:	431c      	orrs	r4, r3
 8000b0e:	4240      	negs	r0, r0
 8000b10:	9b03      	ldr	r3, [sp, #12]
 8000b12:	4249      	negs	r1, r1
 8000b14:	4301      	orrs	r1, r0
 8000b16:	0270      	lsls	r0, r6, #9
 8000b18:	0c3f      	lsrs	r7, r7, #16
 8000b1a:	4318      	orrs	r0, r3
 8000b1c:	19e4      	adds	r4, r4, r7
 8000b1e:	1e47      	subs	r7, r0, #1
 8000b20:	41b8      	sbcs	r0, r7
 8000b22:	1864      	adds	r4, r4, r1
 8000b24:	4464      	add	r4, ip
 8000b26:	0df6      	lsrs	r6, r6, #23
 8000b28:	0261      	lsls	r1, r4, #9
 8000b2a:	4330      	orrs	r0, r6
 8000b2c:	0dec      	lsrs	r4, r5, #23
 8000b2e:	026e      	lsls	r6, r5, #9
 8000b30:	430c      	orrs	r4, r1
 8000b32:	4330      	orrs	r0, r6
 8000b34:	01c9      	lsls	r1, r1, #7
 8000b36:	d400      	bmi.n	8000b3a <__aeabi_dmul+0x302>
 8000b38:	e0f1      	b.n	8000d1e <__aeabi_dmul+0x4e6>
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	4001      	ands	r1, r0
 8000b40:	430b      	orrs	r3, r1
 8000b42:	07e0      	lsls	r0, r4, #31
 8000b44:	4318      	orrs	r0, r3
 8000b46:	0864      	lsrs	r4, r4, #1
 8000b48:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <__aeabi_dmul+0x368>)
 8000b4a:	9b02      	ldr	r3, [sp, #8]
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	4463      	add	r3, ip
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dmul+0x31e>
 8000b54:	e097      	b.n	8000c86 <__aeabi_dmul+0x44e>
 8000b56:	0741      	lsls	r1, r0, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	4001      	ands	r1, r0
 8000b5e:	2904      	cmp	r1, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b62:	1d01      	adds	r1, r0, #4
 8000b64:	4281      	cmp	r1, r0
 8000b66:	4180      	sbcs	r0, r0
 8000b68:	4240      	negs	r0, r0
 8000b6a:	1824      	adds	r4, r4, r0
 8000b6c:	0008      	movs	r0, r1
 8000b6e:	01e1      	lsls	r1, r4, #7
 8000b70:	d506      	bpl.n	8000b80 <__aeabi_dmul+0x348>
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	00c9      	lsls	r1, r1, #3
 8000b76:	468c      	mov	ip, r1
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <__aeabi_dmul+0x36c>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	9b02      	ldr	r3, [sp, #8]
 8000b7e:	4463      	add	r3, ip
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <__aeabi_dmul+0x370>)
 8000b82:	428b      	cmp	r3, r1
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dmul+0x350>
 8000b86:	e710      	b.n	80009aa <__aeabi_dmul+0x172>
 8000b88:	0761      	lsls	r1, r4, #29
 8000b8a:	08c5      	lsrs	r5, r0, #3
 8000b8c:	0264      	lsls	r4, r4, #9
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	430d      	orrs	r5, r1
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	e6c1      	b.n	800091c <__aeabi_dmul+0xe4>
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	fffffc01 	.word	0xfffffc01
 8000ba0:	000003ff 	.word	0x000003ff
 8000ba4:	feffffff 	.word	0xfeffffff
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	464b      	mov	r3, r9
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	d059      	beq.n	8000c66 <__aeabi_dmul+0x42e>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dmul+0x380>
 8000bb6:	e0a3      	b.n	8000d00 <__aeabi_dmul+0x4c8>
 8000bb8:	0020      	movs	r0, r4
 8000bba:	f000 fd1b 	bl	80015f4 <__clzsi2>
 8000bbe:	0001      	movs	r1, r0
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	390b      	subs	r1, #11
 8000bc4:	221d      	movs	r2, #29
 8000bc6:	1a52      	subs	r2, r2, r1
 8000bc8:	4649      	mov	r1, r9
 8000bca:	0018      	movs	r0, r3
 8000bcc:	40d1      	lsrs	r1, r2
 8000bce:	464a      	mov	r2, r9
 8000bd0:	3808      	subs	r0, #8
 8000bd2:	4082      	lsls	r2, r0
 8000bd4:	4084      	lsls	r4, r0
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	430c      	orrs	r4, r1
 8000bda:	4a74      	ldr	r2, [pc, #464]	; (8000dac <__aeabi_dmul+0x574>)
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	4694      	mov	ip, r2
 8000be0:	4642      	mov	r2, r8
 8000be2:	4463      	add	r3, ip
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	9b01      	ldr	r3, [sp, #4]
 8000be8:	407a      	eors	r2, r7
 8000bea:	3301      	adds	r3, #1
 8000bec:	2100      	movs	r1, #0
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	2e0a      	cmp	r6, #10
 8000bf4:	dd00      	ble.n	8000bf8 <__aeabi_dmul+0x3c0>
 8000bf6:	e667      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000bf8:	e683      	b.n	8000902 <__aeabi_dmul+0xca>
 8000bfa:	465b      	mov	r3, fp
 8000bfc:	4303      	orrs	r3, r0
 8000bfe:	469a      	mov	sl, r3
 8000c00:	d02a      	beq.n	8000c58 <__aeabi_dmul+0x420>
 8000c02:	465b      	mov	r3, fp
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d06d      	beq.n	8000ce4 <__aeabi_dmul+0x4ac>
 8000c08:	4658      	mov	r0, fp
 8000c0a:	f000 fcf3 	bl	80015f4 <__clzsi2>
 8000c0e:	0001      	movs	r1, r0
 8000c10:	0003      	movs	r3, r0
 8000c12:	390b      	subs	r1, #11
 8000c14:	221d      	movs	r2, #29
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	0021      	movs	r1, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	465d      	mov	r5, fp
 8000c1e:	40d1      	lsrs	r1, r2
 8000c20:	3808      	subs	r0, #8
 8000c22:	4085      	lsls	r5, r0
 8000c24:	000a      	movs	r2, r1
 8000c26:	4084      	lsls	r4, r0
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	4693      	mov	fp, r2
 8000c2c:	46a2      	mov	sl, r4
 8000c2e:	4d5f      	ldr	r5, [pc, #380]	; (8000dac <__aeabi_dmul+0x574>)
 8000c30:	2600      	movs	r6, #0
 8000c32:	1aed      	subs	r5, r5, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	e625      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c3a:	465b      	mov	r3, fp
 8000c3c:	4303      	orrs	r3, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	d105      	bne.n	8000c4e <__aeabi_dmul+0x416>
 8000c42:	2300      	movs	r3, #0
 8000c44:	469b      	mov	fp, r3
 8000c46:	3302      	adds	r3, #2
 8000c48:	2608      	movs	r6, #8
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	e61b      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	4682      	mov	sl, r0
 8000c52:	260c      	movs	r6, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	e616      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	2604      	movs	r6, #4
 8000c60:	2500      	movs	r5, #0
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e60f      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c66:	4642      	mov	r2, r8
 8000c68:	3301      	adds	r3, #1
 8000c6a:	9501      	str	r5, [sp, #4]
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	9b01      	ldr	r3, [sp, #4]
 8000c70:	407a      	eors	r2, r7
 8000c72:	3301      	adds	r3, #1
 8000c74:	2400      	movs	r4, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2e0a      	cmp	r6, #10
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dmul+0x44c>
 8000c82:	e621      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000c84:	e63d      	b.n	8000902 <__aeabi_dmul+0xca>
 8000c86:	2101      	movs	r1, #1
 8000c88:	1ac9      	subs	r1, r1, r3
 8000c8a:	2938      	cmp	r1, #56	; 0x38
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_dmul+0x458>
 8000c8e:	e642      	b.n	8000916 <__aeabi_dmul+0xde>
 8000c90:	291f      	cmp	r1, #31
 8000c92:	dd47      	ble.n	8000d24 <__aeabi_dmul+0x4ec>
 8000c94:	261f      	movs	r6, #31
 8000c96:	0025      	movs	r5, r4
 8000c98:	4276      	negs	r6, r6
 8000c9a:	1af3      	subs	r3, r6, r3
 8000c9c:	40dd      	lsrs	r5, r3
 8000c9e:	002b      	movs	r3, r5
 8000ca0:	2920      	cmp	r1, #32
 8000ca2:	d005      	beq.n	8000cb0 <__aeabi_dmul+0x478>
 8000ca4:	4942      	ldr	r1, [pc, #264]	; (8000db0 <__aeabi_dmul+0x578>)
 8000ca6:	9d02      	ldr	r5, [sp, #8]
 8000ca8:	468c      	mov	ip, r1
 8000caa:	4465      	add	r5, ip
 8000cac:	40ac      	lsls	r4, r5
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	1e41      	subs	r1, r0, #1
 8000cb2:	4188      	sbcs	r0, r1
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	001d      	movs	r5, r3
 8000cba:	2400      	movs	r4, #0
 8000cbc:	4005      	ands	r5, r0
 8000cbe:	4203      	tst	r3, r0
 8000cc0:	d04a      	beq.n	8000d58 <__aeabi_dmul+0x520>
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d042      	beq.n	8000d52 <__aeabi_dmul+0x51a>
 8000ccc:	1d03      	adds	r3, r0, #4
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	4180      	sbcs	r0, r0
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	1824      	adds	r4, r4, r0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	0223      	lsls	r3, r4, #8
 8000cda:	d53a      	bpl.n	8000d52 <__aeabi_dmul+0x51a>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e61b      	b.n	800091c <__aeabi_dmul+0xe4>
 8000ce4:	f000 fc86 	bl	80015f4 <__clzsi2>
 8000ce8:	0001      	movs	r1, r0
 8000cea:	0003      	movs	r3, r0
 8000cec:	3115      	adds	r1, #21
 8000cee:	3320      	adds	r3, #32
 8000cf0:	291c      	cmp	r1, #28
 8000cf2:	dd8f      	ble.n	8000c14 <__aeabi_dmul+0x3dc>
 8000cf4:	3808      	subs	r0, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4084      	lsls	r4, r0
 8000cfa:	4692      	mov	sl, r2
 8000cfc:	46a3      	mov	fp, r4
 8000cfe:	e796      	b.n	8000c2e <__aeabi_dmul+0x3f6>
 8000d00:	f000 fc78 	bl	80015f4 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0003      	movs	r3, r0
 8000d08:	3115      	adds	r1, #21
 8000d0a:	3320      	adds	r3, #32
 8000d0c:	291c      	cmp	r1, #28
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dmul+0x4da>
 8000d10:	e758      	b.n	8000bc4 <__aeabi_dmul+0x38c>
 8000d12:	0002      	movs	r2, r0
 8000d14:	464c      	mov	r4, r9
 8000d16:	3a08      	subs	r2, #8
 8000d18:	2000      	movs	r0, #0
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	e75d      	b.n	8000bda <__aeabi_dmul+0x3a2>
 8000d1e:	9b01      	ldr	r3, [sp, #4]
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	e711      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <__aeabi_dmul+0x57c>)
 8000d26:	0026      	movs	r6, r4
 8000d28:	469c      	mov	ip, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	9d02      	ldr	r5, [sp, #8]
 8000d2e:	40cb      	lsrs	r3, r1
 8000d30:	4465      	add	r5, ip
 8000d32:	40ae      	lsls	r6, r5
 8000d34:	431e      	orrs	r6, r3
 8000d36:	0003      	movs	r3, r0
 8000d38:	40ab      	lsls	r3, r5
 8000d3a:	1e58      	subs	r0, r3, #1
 8000d3c:	4183      	sbcs	r3, r0
 8000d3e:	0030      	movs	r0, r6
 8000d40:	4318      	orrs	r0, r3
 8000d42:	40cc      	lsrs	r4, r1
 8000d44:	0743      	lsls	r3, r0, #29
 8000d46:	d0c7      	beq.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d48:	230f      	movs	r3, #15
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d1bd      	bne.n	8000ccc <__aeabi_dmul+0x494>
 8000d50:	e7c2      	b.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d52:	0765      	lsls	r5, r4, #29
 8000d54:	0264      	lsls	r4, r4, #9
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	e5dd      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d60:	2500      	movs	r5, #0
 8000d62:	2302      	movs	r3, #2
 8000d64:	2e0f      	cmp	r6, #15
 8000d66:	d10c      	bne.n	8000d82 <__aeabi_dmul+0x54a>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	465b      	mov	r3, fp
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	4223      	tst	r3, r4
 8000d70:	d00e      	beq.n	8000d90 <__aeabi_dmul+0x558>
 8000d72:	4221      	tst	r1, r4
 8000d74:	d10c      	bne.n	8000d90 <__aeabi_dmul+0x558>
 8000d76:	430c      	orrs	r4, r1
 8000d78:	0324      	lsls	r4, r4, #12
 8000d7a:	003a      	movs	r2, r7
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <__aeabi_dmul+0x580>)
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	e5cc      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d82:	2e0b      	cmp	r6, #11
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dmul+0x550>
 8000d86:	e5a2      	b.n	80008ce <__aeabi_dmul+0x96>
 8000d88:	468b      	mov	fp, r1
 8000d8a:	46aa      	mov	sl, r5
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	e5f7      	b.n	8000980 <__aeabi_dmul+0x148>
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	465b      	mov	r3, fp
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	431c      	orrs	r4, r3
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	4655      	mov	r5, sl
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <__aeabi_dmul+0x580>)
 8000da0:	0b24      	lsrs	r4, r4, #12
 8000da2:	e5bb      	b.n	800091c <__aeabi_dmul+0xe4>
 8000da4:	464d      	mov	r5, r9
 8000da6:	0021      	movs	r1, r4
 8000da8:	2303      	movs	r3, #3
 8000daa:	e7db      	b.n	8000d64 <__aeabi_dmul+0x52c>
 8000dac:	fffffc0d 	.word	0xfffffc0d
 8000db0:	0000043e 	.word	0x0000043e
 8000db4:	0000041e 	.word	0x0000041e
 8000db8:	000007ff 	.word	0x000007ff

08000dbc <__aeabi_dsub>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	4657      	mov	r7, sl
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	46de      	mov	lr, fp
 8000dc6:	b5e0      	push	{r5, r6, r7, lr}
 8000dc8:	000d      	movs	r5, r1
 8000dca:	0004      	movs	r4, r0
 8000dcc:	0019      	movs	r1, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	032b      	lsls	r3, r5, #12
 8000dd2:	0a5b      	lsrs	r3, r3, #9
 8000dd4:	0f62      	lsrs	r2, r4, #29
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	00e3      	lsls	r3, r4, #3
 8000dda:	030c      	lsls	r4, r1, #12
 8000ddc:	0a64      	lsrs	r4, r4, #9
 8000dde:	0f47      	lsrs	r7, r0, #29
 8000de0:	4327      	orrs	r7, r4
 8000de2:	4cd0      	ldr	r4, [pc, #832]	; (8001124 <__aeabi_dsub+0x368>)
 8000de4:	006e      	lsls	r6, r5, #1
 8000de6:	4691      	mov	r9, r2
 8000de8:	b083      	sub	sp, #12
 8000dea:	004a      	lsls	r2, r1, #1
 8000dec:	00c0      	lsls	r0, r0, #3
 8000dee:	4698      	mov	r8, r3
 8000df0:	46a2      	mov	sl, r4
 8000df2:	0d76      	lsrs	r6, r6, #21
 8000df4:	0fed      	lsrs	r5, r5, #31
 8000df6:	0d52      	lsrs	r2, r2, #21
 8000df8:	0fc9      	lsrs	r1, r1, #31
 8000dfa:	9001      	str	r0, [sp, #4]
 8000dfc:	42a2      	cmp	r2, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dsub+0x46>
 8000e00:	e0b9      	b.n	8000f76 <__aeabi_dsub+0x1ba>
 8000e02:	2401      	movs	r4, #1
 8000e04:	4061      	eors	r1, r4
 8000e06:	468b      	mov	fp, r1
 8000e08:	428d      	cmp	r5, r1
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dsub+0x52>
 8000e0c:	e08d      	b.n	8000f2a <__aeabi_dsub+0x16e>
 8000e0e:	1ab4      	subs	r4, r6, r2
 8000e10:	46a4      	mov	ip, r4
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	dc00      	bgt.n	8000e18 <__aeabi_dsub+0x5c>
 8000e16:	e0b7      	b.n	8000f88 <__aeabi_dsub+0x1cc>
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dsub+0x62>
 8000e1c:	e0cb      	b.n	8000fb6 <__aeabi_dsub+0x1fa>
 8000e1e:	4ac1      	ldr	r2, [pc, #772]	; (8001124 <__aeabi_dsub+0x368>)
 8000e20:	4296      	cmp	r6, r2
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dsub+0x6a>
 8000e24:	e186      	b.n	8001134 <__aeabi_dsub+0x378>
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0412      	lsls	r2, r2, #16
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	2a38      	cmp	r2, #56	; 0x38
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_dsub+0x78>
 8000e32:	e1a4      	b.n	800117e <__aeabi_dsub+0x3c2>
 8000e34:	2a1f      	cmp	r2, #31
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dsub+0x7e>
 8000e38:	e21d      	b.n	8001276 <__aeabi_dsub+0x4ba>
 8000e3a:	4661      	mov	r1, ip
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	003c      	movs	r4, r7
 8000e40:	1a52      	subs	r2, r2, r1
 8000e42:	0001      	movs	r1, r0
 8000e44:	4090      	lsls	r0, r2
 8000e46:	4094      	lsls	r4, r2
 8000e48:	1e42      	subs	r2, r0, #1
 8000e4a:	4190      	sbcs	r0, r2
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	46a0      	mov	r8, r4
 8000e50:	4664      	mov	r4, ip
 8000e52:	40d7      	lsrs	r7, r2
 8000e54:	464a      	mov	r2, r9
 8000e56:	40e1      	lsrs	r1, r4
 8000e58:	4644      	mov	r4, r8
 8000e5a:	1bd2      	subs	r2, r2, r7
 8000e5c:	4691      	mov	r9, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	4304      	orrs	r4, r0
 8000e62:	1b1c      	subs	r4, r3, r4
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	4192      	sbcs	r2, r2
 8000e68:	464b      	mov	r3, r9
 8000e6a:	4252      	negs	r2, r2
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	469a      	mov	sl, r3
 8000e70:	4653      	mov	r3, sl
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_dsub+0xbc>
 8000e76:	e12b      	b.n	80010d0 <__aeabi_dsub+0x314>
 8000e78:	4653      	mov	r3, sl
 8000e7a:	025a      	lsls	r2, r3, #9
 8000e7c:	0a53      	lsrs	r3, r2, #9
 8000e7e:	469a      	mov	sl, r3
 8000e80:	4653      	mov	r3, sl
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dsub+0xcc>
 8000e86:	e166      	b.n	8001156 <__aeabi_dsub+0x39a>
 8000e88:	4650      	mov	r0, sl
 8000e8a:	f000 fbb3 	bl	80015f4 <__clzsi2>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	3b08      	subs	r3, #8
 8000e92:	2220      	movs	r2, #32
 8000e94:	0020      	movs	r0, r4
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4651      	mov	r1, sl
 8000e9a:	40d0      	lsrs	r0, r2
 8000e9c:	4099      	lsls	r1, r3
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	409c      	lsls	r4, r3
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dsub+0xee>
 8000ea8:	e164      	b.n	8001174 <__aeabi_dsub+0x3b8>
 8000eaa:	1b9b      	subs	r3, r3, r6
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	291f      	cmp	r1, #31
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dsub+0xf8>
 8000eb2:	e0fe      	b.n	80010b2 <__aeabi_dsub+0x2f6>
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	0026      	movs	r6, r4
 8000eba:	1a5b      	subs	r3, r3, r1
 8000ebc:	409c      	lsls	r4, r3
 8000ebe:	4098      	lsls	r0, r3
 8000ec0:	40ce      	lsrs	r6, r1
 8000ec2:	40ca      	lsrs	r2, r1
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4330      	orrs	r0, r6
 8000eca:	4692      	mov	sl, r2
 8000ecc:	2600      	movs	r6, #0
 8000ece:	4304      	orrs	r4, r0
 8000ed0:	0763      	lsls	r3, r4, #29
 8000ed2:	d009      	beq.n	8000ee8 <__aeabi_dsub+0x12c>
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	4023      	ands	r3, r4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dsub+0x12c>
 8000edc:	1d23      	adds	r3, r4, #4
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	41a4      	sbcs	r4, r4
 8000ee2:	4264      	negs	r4, r4
 8000ee4:	44a2      	add	sl, r4
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	4653      	mov	r3, sl
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	d400      	bmi.n	8000ef0 <__aeabi_dsub+0x134>
 8000eee:	e0f2      	b.n	80010d6 <__aeabi_dsub+0x31a>
 8000ef0:	4b8c      	ldr	r3, [pc, #560]	; (8001124 <__aeabi_dsub+0x368>)
 8000ef2:	3601      	adds	r6, #1
 8000ef4:	429e      	cmp	r6, r3
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x13e>
 8000ef8:	e10f      	b.n	800111a <__aeabi_dsub+0x35e>
 8000efa:	4653      	mov	r3, sl
 8000efc:	498a      	ldr	r1, [pc, #552]	; (8001128 <__aeabi_dsub+0x36c>)
 8000efe:	08e4      	lsrs	r4, r4, #3
 8000f00:	400b      	ands	r3, r1
 8000f02:	0019      	movs	r1, r3
 8000f04:	075b      	lsls	r3, r3, #29
 8000f06:	4323      	orrs	r3, r4
 8000f08:	0572      	lsls	r2, r6, #21
 8000f0a:	024c      	lsls	r4, r1, #9
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d52      	lsrs	r2, r2, #21
 8000f10:	0512      	lsls	r2, r2, #20
 8000f12:	4322      	orrs	r2, r4
 8000f14:	07ed      	lsls	r5, r5, #31
 8000f16:	432a      	orrs	r2, r5
 8000f18:	0018      	movs	r0, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f20:	46bb      	mov	fp, r7
 8000f22:	46b2      	mov	sl, r6
 8000f24:	46a9      	mov	r9, r5
 8000f26:	46a0      	mov	r8, r4
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2a:	1ab4      	subs	r4, r6, r2
 8000f2c:	46a4      	mov	ip, r4
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	dd59      	ble.n	8000fe6 <__aeabi_dsub+0x22a>
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x17c>
 8000f36:	e0b0      	b.n	800109a <__aeabi_dsub+0x2de>
 8000f38:	4556      	cmp	r6, sl
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dsub+0x182>
 8000f3c:	e0fa      	b.n	8001134 <__aeabi_dsub+0x378>
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	0412      	lsls	r2, r2, #16
 8000f42:	4317      	orrs	r7, r2
 8000f44:	4662      	mov	r2, ip
 8000f46:	2a38      	cmp	r2, #56	; 0x38
 8000f48:	dd00      	ble.n	8000f4c <__aeabi_dsub+0x190>
 8000f4a:	e0d4      	b.n	80010f6 <__aeabi_dsub+0x33a>
 8000f4c:	2a1f      	cmp	r2, #31
 8000f4e:	dc00      	bgt.n	8000f52 <__aeabi_dsub+0x196>
 8000f50:	e1c0      	b.n	80012d4 <__aeabi_dsub+0x518>
 8000f52:	0039      	movs	r1, r7
 8000f54:	3a20      	subs	r2, #32
 8000f56:	40d1      	lsrs	r1, r2
 8000f58:	4662      	mov	r2, ip
 8000f5a:	2a20      	cmp	r2, #32
 8000f5c:	d006      	beq.n	8000f6c <__aeabi_dsub+0x1b0>
 8000f5e:	4664      	mov	r4, ip
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	1b12      	subs	r2, r2, r4
 8000f64:	003c      	movs	r4, r7
 8000f66:	4094      	lsls	r4, r2
 8000f68:	4304      	orrs	r4, r0
 8000f6a:	9401      	str	r4, [sp, #4]
 8000f6c:	9c01      	ldr	r4, [sp, #4]
 8000f6e:	1e62      	subs	r2, r4, #1
 8000f70:	4194      	sbcs	r4, r2
 8000f72:	430c      	orrs	r4, r1
 8000f74:	e0c3      	b.n	80010fe <__aeabi_dsub+0x342>
 8000f76:	003c      	movs	r4, r7
 8000f78:	4304      	orrs	r4, r0
 8000f7a:	d02b      	beq.n	8000fd4 <__aeabi_dsub+0x218>
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	428d      	cmp	r5, r1
 8000f80:	d02e      	beq.n	8000fe0 <__aeabi_dsub+0x224>
 8000f82:	4c6a      	ldr	r4, [pc, #424]	; (800112c <__aeabi_dsub+0x370>)
 8000f84:	46a4      	mov	ip, r4
 8000f86:	44b4      	add	ip, r6
 8000f88:	4664      	mov	r4, ip
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d05f      	beq.n	800104e <__aeabi_dsub+0x292>
 8000f8e:	1b94      	subs	r4, r2, r6
 8000f90:	46a4      	mov	ip, r4
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_dsub+0x1dc>
 8000f96:	e120      	b.n	80011da <__aeabi_dsub+0x41e>
 8000f98:	464c      	mov	r4, r9
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dsub+0x1e4>
 8000f9e:	e1c7      	b.n	8001330 <__aeabi_dsub+0x574>
 8000fa0:	4661      	mov	r1, ip
 8000fa2:	1e4c      	subs	r4, r1, #1
 8000fa4:	2901      	cmp	r1, #1
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dsub+0x1ee>
 8000fa8:	e223      	b.n	80013f2 <__aeabi_dsub+0x636>
 8000faa:	4d5e      	ldr	r5, [pc, #376]	; (8001124 <__aeabi_dsub+0x368>)
 8000fac:	45ac      	cmp	ip, r5
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0x1f6>
 8000fb0:	e1d8      	b.n	8001364 <__aeabi_dsub+0x5a8>
 8000fb2:	46a4      	mov	ip, r4
 8000fb4:	e11a      	b.n	80011ec <__aeabi_dsub+0x430>
 8000fb6:	003a      	movs	r2, r7
 8000fb8:	4302      	orrs	r2, r0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dsub+0x202>
 8000fbc:	e0e4      	b.n	8001188 <__aeabi_dsub+0x3cc>
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	2c01      	cmp	r4, #1
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dsub+0x20c>
 8000fc6:	e1c3      	b.n	8001350 <__aeabi_dsub+0x594>
 8000fc8:	4956      	ldr	r1, [pc, #344]	; (8001124 <__aeabi_dsub+0x368>)
 8000fca:	428c      	cmp	r4, r1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x214>
 8000fce:	e0b1      	b.n	8001134 <__aeabi_dsub+0x378>
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	e72b      	b.n	8000e2c <__aeabi_dsub+0x70>
 8000fd4:	2401      	movs	r4, #1
 8000fd6:	4061      	eors	r1, r4
 8000fd8:	468b      	mov	fp, r1
 8000fda:	428d      	cmp	r5, r1
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dsub+0x224>
 8000fde:	e716      	b.n	8000e0e <__aeabi_dsub+0x52>
 8000fe0:	4952      	ldr	r1, [pc, #328]	; (800112c <__aeabi_dsub+0x370>)
 8000fe2:	468c      	mov	ip, r1
 8000fe4:	44b4      	add	ip, r6
 8000fe6:	4664      	mov	r4, ip
 8000fe8:	2c00      	cmp	r4, #0
 8000fea:	d100      	bne.n	8000fee <__aeabi_dsub+0x232>
 8000fec:	e0d3      	b.n	8001196 <__aeabi_dsub+0x3da>
 8000fee:	1b91      	subs	r1, r2, r6
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x23c>
 8000ff6:	e15e      	b.n	80012b6 <__aeabi_dsub+0x4fa>
 8000ff8:	494a      	ldr	r1, [pc, #296]	; (8001124 <__aeabi_dsub+0x368>)
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x244>
 8000ffe:	e1be      	b.n	800137e <__aeabi_dsub+0x5c2>
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	464c      	mov	r4, r9
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	430c      	orrs	r4, r1
 8001008:	46a1      	mov	r9, r4
 800100a:	4661      	mov	r1, ip
 800100c:	2938      	cmp	r1, #56	; 0x38
 800100e:	dd00      	ble.n	8001012 <__aeabi_dsub+0x256>
 8001010:	e1ba      	b.n	8001388 <__aeabi_dsub+0x5cc>
 8001012:	291f      	cmp	r1, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dsub+0x25c>
 8001016:	e227      	b.n	8001468 <__aeabi_dsub+0x6ac>
 8001018:	2420      	movs	r4, #32
 800101a:	1a64      	subs	r4, r4, r1
 800101c:	4649      	mov	r1, r9
 800101e:	40a1      	lsls	r1, r4
 8001020:	001e      	movs	r6, r3
 8001022:	4688      	mov	r8, r1
 8001024:	4661      	mov	r1, ip
 8001026:	40a3      	lsls	r3, r4
 8001028:	40ce      	lsrs	r6, r1
 800102a:	4641      	mov	r1, r8
 800102c:	1e5c      	subs	r4, r3, #1
 800102e:	41a3      	sbcs	r3, r4
 8001030:	4331      	orrs	r1, r6
 8001032:	4319      	orrs	r1, r3
 8001034:	000c      	movs	r4, r1
 8001036:	4663      	mov	r3, ip
 8001038:	4649      	mov	r1, r9
 800103a:	40d9      	lsrs	r1, r3
 800103c:	187f      	adds	r7, r7, r1
 800103e:	1824      	adds	r4, r4, r0
 8001040:	4284      	cmp	r4, r0
 8001042:	419b      	sbcs	r3, r3
 8001044:	425b      	negs	r3, r3
 8001046:	469a      	mov	sl, r3
 8001048:	0016      	movs	r6, r2
 800104a:	44ba      	add	sl, r7
 800104c:	e05d      	b.n	800110a <__aeabi_dsub+0x34e>
 800104e:	4c38      	ldr	r4, [pc, #224]	; (8001130 <__aeabi_dsub+0x374>)
 8001050:	1c72      	adds	r2, r6, #1
 8001052:	4222      	tst	r2, r4
 8001054:	d000      	beq.n	8001058 <__aeabi_dsub+0x29c>
 8001056:	e0df      	b.n	8001218 <__aeabi_dsub+0x45c>
 8001058:	464a      	mov	r2, r9
 800105a:	431a      	orrs	r2, r3
 800105c:	2e00      	cmp	r6, #0
 800105e:	d000      	beq.n	8001062 <__aeabi_dsub+0x2a6>
 8001060:	e15c      	b.n	800131c <__aeabi_dsub+0x560>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_dsub+0x2ac>
 8001066:	e1cf      	b.n	8001408 <__aeabi_dsub+0x64c>
 8001068:	003a      	movs	r2, r7
 800106a:	4302      	orrs	r2, r0
 800106c:	d100      	bne.n	8001070 <__aeabi_dsub+0x2b4>
 800106e:	e17f      	b.n	8001370 <__aeabi_dsub+0x5b4>
 8001070:	1a1c      	subs	r4, r3, r0
 8001072:	464a      	mov	r2, r9
 8001074:	42a3      	cmp	r3, r4
 8001076:	4189      	sbcs	r1, r1
 8001078:	1bd2      	subs	r2, r2, r7
 800107a:	4249      	negs	r1, r1
 800107c:	1a52      	subs	r2, r2, r1
 800107e:	4692      	mov	sl, r2
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	d400      	bmi.n	8001086 <__aeabi_dsub+0x2ca>
 8001084:	e20a      	b.n	800149c <__aeabi_dsub+0x6e0>
 8001086:	1ac4      	subs	r4, r0, r3
 8001088:	42a0      	cmp	r0, r4
 800108a:	4180      	sbcs	r0, r0
 800108c:	464b      	mov	r3, r9
 800108e:	4240      	negs	r0, r0
 8001090:	1aff      	subs	r7, r7, r3
 8001092:	1a3b      	subs	r3, r7, r0
 8001094:	469a      	mov	sl, r3
 8001096:	465d      	mov	r5, fp
 8001098:	e71a      	b.n	8000ed0 <__aeabi_dsub+0x114>
 800109a:	003a      	movs	r2, r7
 800109c:	4302      	orrs	r2, r0
 800109e:	d073      	beq.n	8001188 <__aeabi_dsub+0x3cc>
 80010a0:	0022      	movs	r2, r4
 80010a2:	3a01      	subs	r2, #1
 80010a4:	2c01      	cmp	r4, #1
 80010a6:	d100      	bne.n	80010aa <__aeabi_dsub+0x2ee>
 80010a8:	e0cb      	b.n	8001242 <__aeabi_dsub+0x486>
 80010aa:	4554      	cmp	r4, sl
 80010ac:	d042      	beq.n	8001134 <__aeabi_dsub+0x378>
 80010ae:	4694      	mov	ip, r2
 80010b0:	e748      	b.n	8000f44 <__aeabi_dsub+0x188>
 80010b2:	0010      	movs	r0, r2
 80010b4:	3b1f      	subs	r3, #31
 80010b6:	40d8      	lsrs	r0, r3
 80010b8:	2920      	cmp	r1, #32
 80010ba:	d003      	beq.n	80010c4 <__aeabi_dsub+0x308>
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	1a5b      	subs	r3, r3, r1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	4314      	orrs	r4, r2
 80010c4:	1e63      	subs	r3, r4, #1
 80010c6:	419c      	sbcs	r4, r3
 80010c8:	2300      	movs	r3, #0
 80010ca:	2600      	movs	r6, #0
 80010cc:	469a      	mov	sl, r3
 80010ce:	4304      	orrs	r4, r0
 80010d0:	0763      	lsls	r3, r4, #29
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dsub+0x31a>
 80010d4:	e6fe      	b.n	8000ed4 <__aeabi_dsub+0x118>
 80010d6:	4652      	mov	r2, sl
 80010d8:	08e3      	lsrs	r3, r4, #3
 80010da:	0752      	lsls	r2, r2, #29
 80010dc:	4313      	orrs	r3, r2
 80010de:	4652      	mov	r2, sl
 80010e0:	46b4      	mov	ip, r6
 80010e2:	08d2      	lsrs	r2, r2, #3
 80010e4:	490f      	ldr	r1, [pc, #60]	; (8001124 <__aeabi_dsub+0x368>)
 80010e6:	458c      	cmp	ip, r1
 80010e8:	d02a      	beq.n	8001140 <__aeabi_dsub+0x384>
 80010ea:	0312      	lsls	r2, r2, #12
 80010ec:	0b14      	lsrs	r4, r2, #12
 80010ee:	4662      	mov	r2, ip
 80010f0:	0552      	lsls	r2, r2, #21
 80010f2:	0d52      	lsrs	r2, r2, #21
 80010f4:	e70c      	b.n	8000f10 <__aeabi_dsub+0x154>
 80010f6:	003c      	movs	r4, r7
 80010f8:	4304      	orrs	r4, r0
 80010fa:	1e62      	subs	r2, r4, #1
 80010fc:	4194      	sbcs	r4, r2
 80010fe:	18e4      	adds	r4, r4, r3
 8001100:	429c      	cmp	r4, r3
 8001102:	4192      	sbcs	r2, r2
 8001104:	4252      	negs	r2, r2
 8001106:	444a      	add	r2, r9
 8001108:	4692      	mov	sl, r2
 800110a:	4653      	mov	r3, sl
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	d5df      	bpl.n	80010d0 <__aeabi_dsub+0x314>
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__aeabi_dsub+0x368>)
 8001112:	3601      	adds	r6, #1
 8001114:	429e      	cmp	r6, r3
 8001116:	d000      	beq.n	800111a <__aeabi_dsub+0x35e>
 8001118:	e0a0      	b.n	800125c <__aeabi_dsub+0x4a0>
 800111a:	0032      	movs	r2, r6
 800111c:	2400      	movs	r4, #0
 800111e:	2300      	movs	r3, #0
 8001120:	e6f6      	b.n	8000f10 <__aeabi_dsub+0x154>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	000007ff 	.word	0x000007ff
 8001128:	ff7fffff 	.word	0xff7fffff
 800112c:	fffff801 	.word	0xfffff801
 8001130:	000007fe 	.word	0x000007fe
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	464a      	mov	r2, r9
 8001138:	0752      	lsls	r2, r2, #29
 800113a:	4313      	orrs	r3, r2
 800113c:	464a      	mov	r2, r9
 800113e:	08d2      	lsrs	r2, r2, #3
 8001140:	0019      	movs	r1, r3
 8001142:	4311      	orrs	r1, r2
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x38c>
 8001146:	e1b5      	b.n	80014b4 <__aeabi_dsub+0x6f8>
 8001148:	2480      	movs	r4, #128	; 0x80
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	4314      	orrs	r4, r2
 800114e:	0324      	lsls	r4, r4, #12
 8001150:	4ad5      	ldr	r2, [pc, #852]	; (80014a8 <__aeabi_dsub+0x6ec>)
 8001152:	0b24      	lsrs	r4, r4, #12
 8001154:	e6dc      	b.n	8000f10 <__aeabi_dsub+0x154>
 8001156:	0020      	movs	r0, r4
 8001158:	f000 fa4c 	bl	80015f4 <__clzsi2>
 800115c:	0003      	movs	r3, r0
 800115e:	3318      	adds	r3, #24
 8001160:	2b1f      	cmp	r3, #31
 8001162:	dc00      	bgt.n	8001166 <__aeabi_dsub+0x3aa>
 8001164:	e695      	b.n	8000e92 <__aeabi_dsub+0xd6>
 8001166:	0022      	movs	r2, r4
 8001168:	3808      	subs	r0, #8
 800116a:	4082      	lsls	r2, r0
 800116c:	2400      	movs	r4, #0
 800116e:	429e      	cmp	r6, r3
 8001170:	dc00      	bgt.n	8001174 <__aeabi_dsub+0x3b8>
 8001172:	e69a      	b.n	8000eaa <__aeabi_dsub+0xee>
 8001174:	1af6      	subs	r6, r6, r3
 8001176:	4bcd      	ldr	r3, [pc, #820]	; (80014ac <__aeabi_dsub+0x6f0>)
 8001178:	401a      	ands	r2, r3
 800117a:	4692      	mov	sl, r2
 800117c:	e6a8      	b.n	8000ed0 <__aeabi_dsub+0x114>
 800117e:	003c      	movs	r4, r7
 8001180:	4304      	orrs	r4, r0
 8001182:	1e62      	subs	r2, r4, #1
 8001184:	4194      	sbcs	r4, r2
 8001186:	e66c      	b.n	8000e62 <__aeabi_dsub+0xa6>
 8001188:	464a      	mov	r2, r9
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	0752      	lsls	r2, r2, #29
 800118e:	4313      	orrs	r3, r2
 8001190:	464a      	mov	r2, r9
 8001192:	08d2      	lsrs	r2, r2, #3
 8001194:	e7a6      	b.n	80010e4 <__aeabi_dsub+0x328>
 8001196:	4cc6      	ldr	r4, [pc, #792]	; (80014b0 <__aeabi_dsub+0x6f4>)
 8001198:	1c72      	adds	r2, r6, #1
 800119a:	4222      	tst	r2, r4
 800119c:	d000      	beq.n	80011a0 <__aeabi_dsub+0x3e4>
 800119e:	e0ac      	b.n	80012fa <__aeabi_dsub+0x53e>
 80011a0:	464a      	mov	r2, r9
 80011a2:	431a      	orrs	r2, r3
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_dsub+0x3ee>
 80011a8:	e105      	b.n	80013b6 <__aeabi_dsub+0x5fa>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x3f4>
 80011ae:	e156      	b.n	800145e <__aeabi_dsub+0x6a2>
 80011b0:	003a      	movs	r2, r7
 80011b2:	4302      	orrs	r2, r0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x3fc>
 80011b6:	e0db      	b.n	8001370 <__aeabi_dsub+0x5b4>
 80011b8:	181c      	adds	r4, r3, r0
 80011ba:	429c      	cmp	r4, r3
 80011bc:	419b      	sbcs	r3, r3
 80011be:	444f      	add	r7, r9
 80011c0:	46ba      	mov	sl, r7
 80011c2:	425b      	negs	r3, r3
 80011c4:	449a      	add	sl, r3
 80011c6:	4653      	mov	r3, sl
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	d400      	bmi.n	80011ce <__aeabi_dsub+0x412>
 80011cc:	e780      	b.n	80010d0 <__aeabi_dsub+0x314>
 80011ce:	4652      	mov	r2, sl
 80011d0:	4bb6      	ldr	r3, [pc, #728]	; (80014ac <__aeabi_dsub+0x6f0>)
 80011d2:	2601      	movs	r6, #1
 80011d4:	401a      	ands	r2, r3
 80011d6:	4692      	mov	sl, r2
 80011d8:	e77a      	b.n	80010d0 <__aeabi_dsub+0x314>
 80011da:	4cb3      	ldr	r4, [pc, #716]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80011dc:	42a2      	cmp	r2, r4
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x426>
 80011e0:	e0c0      	b.n	8001364 <__aeabi_dsub+0x5a8>
 80011e2:	2480      	movs	r4, #128	; 0x80
 80011e4:	464d      	mov	r5, r9
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	4325      	orrs	r5, r4
 80011ea:	46a9      	mov	r9, r5
 80011ec:	4664      	mov	r4, ip
 80011ee:	2c38      	cmp	r4, #56	; 0x38
 80011f0:	dc53      	bgt.n	800129a <__aeabi_dsub+0x4de>
 80011f2:	4661      	mov	r1, ip
 80011f4:	2c1f      	cmp	r4, #31
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dsub+0x43e>
 80011f8:	e0cd      	b.n	8001396 <__aeabi_dsub+0x5da>
 80011fa:	2520      	movs	r5, #32
 80011fc:	001e      	movs	r6, r3
 80011fe:	1b2d      	subs	r5, r5, r4
 8001200:	464c      	mov	r4, r9
 8001202:	40ab      	lsls	r3, r5
 8001204:	40ac      	lsls	r4, r5
 8001206:	40ce      	lsrs	r6, r1
 8001208:	1e5d      	subs	r5, r3, #1
 800120a:	41ab      	sbcs	r3, r5
 800120c:	4334      	orrs	r4, r6
 800120e:	4323      	orrs	r3, r4
 8001210:	464c      	mov	r4, r9
 8001212:	40cc      	lsrs	r4, r1
 8001214:	1b3f      	subs	r7, r7, r4
 8001216:	e045      	b.n	80012a4 <__aeabi_dsub+0x4e8>
 8001218:	464a      	mov	r2, r9
 800121a:	1a1c      	subs	r4, r3, r0
 800121c:	1bd1      	subs	r1, r2, r7
 800121e:	42a3      	cmp	r3, r4
 8001220:	4192      	sbcs	r2, r2
 8001222:	4252      	negs	r2, r2
 8001224:	4692      	mov	sl, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4651      	mov	r1, sl
 800122a:	1a52      	subs	r2, r2, r1
 800122c:	4692      	mov	sl, r2
 800122e:	0212      	lsls	r2, r2, #8
 8001230:	d500      	bpl.n	8001234 <__aeabi_dsub+0x478>
 8001232:	e083      	b.n	800133c <__aeabi_dsub+0x580>
 8001234:	4653      	mov	r3, sl
 8001236:	4323      	orrs	r3, r4
 8001238:	d000      	beq.n	800123c <__aeabi_dsub+0x480>
 800123a:	e621      	b.n	8000e80 <__aeabi_dsub+0xc4>
 800123c:	2200      	movs	r2, #0
 800123e:	2500      	movs	r5, #0
 8001240:	e753      	b.n	80010ea <__aeabi_dsub+0x32e>
 8001242:	181c      	adds	r4, r3, r0
 8001244:	429c      	cmp	r4, r3
 8001246:	419b      	sbcs	r3, r3
 8001248:	444f      	add	r7, r9
 800124a:	46ba      	mov	sl, r7
 800124c:	425b      	negs	r3, r3
 800124e:	449a      	add	sl, r3
 8001250:	4653      	mov	r3, sl
 8001252:	2601      	movs	r6, #1
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dsub+0x49e>
 8001258:	e73a      	b.n	80010d0 <__aeabi_dsub+0x314>
 800125a:	2602      	movs	r6, #2
 800125c:	4652      	mov	r2, sl
 800125e:	4b93      	ldr	r3, [pc, #588]	; (80014ac <__aeabi_dsub+0x6f0>)
 8001260:	2101      	movs	r1, #1
 8001262:	401a      	ands	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	4021      	ands	r1, r4
 8001268:	0862      	lsrs	r2, r4, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	07dc      	lsls	r4, r3, #31
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	469a      	mov	sl, r3
 8001272:	4314      	orrs	r4, r2
 8001274:	e62c      	b.n	8000ed0 <__aeabi_dsub+0x114>
 8001276:	0039      	movs	r1, r7
 8001278:	3a20      	subs	r2, #32
 800127a:	40d1      	lsrs	r1, r2
 800127c:	4662      	mov	r2, ip
 800127e:	2a20      	cmp	r2, #32
 8001280:	d006      	beq.n	8001290 <__aeabi_dsub+0x4d4>
 8001282:	4664      	mov	r4, ip
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	1b12      	subs	r2, r2, r4
 8001288:	003c      	movs	r4, r7
 800128a:	4094      	lsls	r4, r2
 800128c:	4304      	orrs	r4, r0
 800128e:	9401      	str	r4, [sp, #4]
 8001290:	9c01      	ldr	r4, [sp, #4]
 8001292:	1e62      	subs	r2, r4, #1
 8001294:	4194      	sbcs	r4, r2
 8001296:	430c      	orrs	r4, r1
 8001298:	e5e3      	b.n	8000e62 <__aeabi_dsub+0xa6>
 800129a:	4649      	mov	r1, r9
 800129c:	4319      	orrs	r1, r3
 800129e:	000b      	movs	r3, r1
 80012a0:	1e5c      	subs	r4, r3, #1
 80012a2:	41a3      	sbcs	r3, r4
 80012a4:	1ac4      	subs	r4, r0, r3
 80012a6:	42a0      	cmp	r0, r4
 80012a8:	419b      	sbcs	r3, r3
 80012aa:	425b      	negs	r3, r3
 80012ac:	1afb      	subs	r3, r7, r3
 80012ae:	469a      	mov	sl, r3
 80012b0:	465d      	mov	r5, fp
 80012b2:	0016      	movs	r6, r2
 80012b4:	e5dc      	b.n	8000e70 <__aeabi_dsub+0xb4>
 80012b6:	4649      	mov	r1, r9
 80012b8:	4319      	orrs	r1, r3
 80012ba:	d100      	bne.n	80012be <__aeabi_dsub+0x502>
 80012bc:	e0ae      	b.n	800141c <__aeabi_dsub+0x660>
 80012be:	4661      	mov	r1, ip
 80012c0:	4664      	mov	r4, ip
 80012c2:	3901      	subs	r1, #1
 80012c4:	2c01      	cmp	r4, #1
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x50e>
 80012c8:	e0e0      	b.n	800148c <__aeabi_dsub+0x6d0>
 80012ca:	4c77      	ldr	r4, [pc, #476]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80012cc:	45a4      	cmp	ip, r4
 80012ce:	d056      	beq.n	800137e <__aeabi_dsub+0x5c2>
 80012d0:	468c      	mov	ip, r1
 80012d2:	e69a      	b.n	800100a <__aeabi_dsub+0x24e>
 80012d4:	4661      	mov	r1, ip
 80012d6:	2220      	movs	r2, #32
 80012d8:	003c      	movs	r4, r7
 80012da:	1a52      	subs	r2, r2, r1
 80012dc:	4094      	lsls	r4, r2
 80012de:	0001      	movs	r1, r0
 80012e0:	4090      	lsls	r0, r2
 80012e2:	46a0      	mov	r8, r4
 80012e4:	4664      	mov	r4, ip
 80012e6:	1e42      	subs	r2, r0, #1
 80012e8:	4190      	sbcs	r0, r2
 80012ea:	4662      	mov	r2, ip
 80012ec:	40e1      	lsrs	r1, r4
 80012ee:	4644      	mov	r4, r8
 80012f0:	40d7      	lsrs	r7, r2
 80012f2:	430c      	orrs	r4, r1
 80012f4:	4304      	orrs	r4, r0
 80012f6:	44b9      	add	r9, r7
 80012f8:	e701      	b.n	80010fe <__aeabi_dsub+0x342>
 80012fa:	496b      	ldr	r1, [pc, #428]	; (80014a8 <__aeabi_dsub+0x6ec>)
 80012fc:	428a      	cmp	r2, r1
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x546>
 8001300:	e70c      	b.n	800111c <__aeabi_dsub+0x360>
 8001302:	1818      	adds	r0, r3, r0
 8001304:	4298      	cmp	r0, r3
 8001306:	419b      	sbcs	r3, r3
 8001308:	444f      	add	r7, r9
 800130a:	425b      	negs	r3, r3
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	07dc      	lsls	r4, r3, #31
 8001310:	0840      	lsrs	r0, r0, #1
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	469a      	mov	sl, r3
 8001316:	0016      	movs	r6, r2
 8001318:	4304      	orrs	r4, r0
 800131a:	e6d9      	b.n	80010d0 <__aeabi_dsub+0x314>
 800131c:	2a00      	cmp	r2, #0
 800131e:	d000      	beq.n	8001322 <__aeabi_dsub+0x566>
 8001320:	e081      	b.n	8001426 <__aeabi_dsub+0x66a>
 8001322:	003b      	movs	r3, r7
 8001324:	4303      	orrs	r3, r0
 8001326:	d11d      	bne.n	8001364 <__aeabi_dsub+0x5a8>
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	2500      	movs	r5, #0
 800132c:	0312      	lsls	r2, r2, #12
 800132e:	e70b      	b.n	8001148 <__aeabi_dsub+0x38c>
 8001330:	08c0      	lsrs	r0, r0, #3
 8001332:	077b      	lsls	r3, r7, #29
 8001334:	465d      	mov	r5, fp
 8001336:	4303      	orrs	r3, r0
 8001338:	08fa      	lsrs	r2, r7, #3
 800133a:	e6d3      	b.n	80010e4 <__aeabi_dsub+0x328>
 800133c:	1ac4      	subs	r4, r0, r3
 800133e:	42a0      	cmp	r0, r4
 8001340:	4180      	sbcs	r0, r0
 8001342:	464b      	mov	r3, r9
 8001344:	4240      	negs	r0, r0
 8001346:	1aff      	subs	r7, r7, r3
 8001348:	1a3b      	subs	r3, r7, r0
 800134a:	469a      	mov	sl, r3
 800134c:	465d      	mov	r5, fp
 800134e:	e597      	b.n	8000e80 <__aeabi_dsub+0xc4>
 8001350:	1a1c      	subs	r4, r3, r0
 8001352:	464a      	mov	r2, r9
 8001354:	42a3      	cmp	r3, r4
 8001356:	419b      	sbcs	r3, r3
 8001358:	1bd7      	subs	r7, r2, r7
 800135a:	425b      	negs	r3, r3
 800135c:	1afb      	subs	r3, r7, r3
 800135e:	469a      	mov	sl, r3
 8001360:	2601      	movs	r6, #1
 8001362:	e585      	b.n	8000e70 <__aeabi_dsub+0xb4>
 8001364:	08c0      	lsrs	r0, r0, #3
 8001366:	077b      	lsls	r3, r7, #29
 8001368:	465d      	mov	r5, fp
 800136a:	4303      	orrs	r3, r0
 800136c:	08fa      	lsrs	r2, r7, #3
 800136e:	e6e7      	b.n	8001140 <__aeabi_dsub+0x384>
 8001370:	464a      	mov	r2, r9
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	0752      	lsls	r2, r2, #29
 8001376:	4313      	orrs	r3, r2
 8001378:	464a      	mov	r2, r9
 800137a:	08d2      	lsrs	r2, r2, #3
 800137c:	e6b5      	b.n	80010ea <__aeabi_dsub+0x32e>
 800137e:	08c0      	lsrs	r0, r0, #3
 8001380:	077b      	lsls	r3, r7, #29
 8001382:	4303      	orrs	r3, r0
 8001384:	08fa      	lsrs	r2, r7, #3
 8001386:	e6db      	b.n	8001140 <__aeabi_dsub+0x384>
 8001388:	4649      	mov	r1, r9
 800138a:	4319      	orrs	r1, r3
 800138c:	000b      	movs	r3, r1
 800138e:	1e59      	subs	r1, r3, #1
 8001390:	418b      	sbcs	r3, r1
 8001392:	001c      	movs	r4, r3
 8001394:	e653      	b.n	800103e <__aeabi_dsub+0x282>
 8001396:	464d      	mov	r5, r9
 8001398:	3c20      	subs	r4, #32
 800139a:	40e5      	lsrs	r5, r4
 800139c:	2920      	cmp	r1, #32
 800139e:	d005      	beq.n	80013ac <__aeabi_dsub+0x5f0>
 80013a0:	2440      	movs	r4, #64	; 0x40
 80013a2:	1a64      	subs	r4, r4, r1
 80013a4:	4649      	mov	r1, r9
 80013a6:	40a1      	lsls	r1, r4
 80013a8:	430b      	orrs	r3, r1
 80013aa:	4698      	mov	r8, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	1e5c      	subs	r4, r3, #1
 80013b0:	41a3      	sbcs	r3, r4
 80013b2:	432b      	orrs	r3, r5
 80013b4:	e776      	b.n	80012a4 <__aeabi_dsub+0x4e8>
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0e1      	beq.n	800137e <__aeabi_dsub+0x5c2>
 80013ba:	003a      	movs	r2, r7
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	4302      	orrs	r2, r0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x608>
 80013c2:	e6b8      	b.n	8001136 <__aeabi_dsub+0x37a>
 80013c4:	464a      	mov	r2, r9
 80013c6:	0752      	lsls	r2, r2, #29
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	4313      	orrs	r3, r2
 80013cc:	464a      	mov	r2, r9
 80013ce:	0324      	lsls	r4, r4, #12
 80013d0:	08d2      	lsrs	r2, r2, #3
 80013d2:	4222      	tst	r2, r4
 80013d4:	d007      	beq.n	80013e6 <__aeabi_dsub+0x62a>
 80013d6:	08fe      	lsrs	r6, r7, #3
 80013d8:	4226      	tst	r6, r4
 80013da:	d104      	bne.n	80013e6 <__aeabi_dsub+0x62a>
 80013dc:	465d      	mov	r5, fp
 80013de:	0032      	movs	r2, r6
 80013e0:	08c3      	lsrs	r3, r0, #3
 80013e2:	077f      	lsls	r7, r7, #29
 80013e4:	433b      	orrs	r3, r7
 80013e6:	0f59      	lsrs	r1, r3, #29
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	0749      	lsls	r1, r1, #29
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	430b      	orrs	r3, r1
 80013f0:	e6a6      	b.n	8001140 <__aeabi_dsub+0x384>
 80013f2:	1ac4      	subs	r4, r0, r3
 80013f4:	42a0      	cmp	r0, r4
 80013f6:	4180      	sbcs	r0, r0
 80013f8:	464b      	mov	r3, r9
 80013fa:	4240      	negs	r0, r0
 80013fc:	1aff      	subs	r7, r7, r3
 80013fe:	1a3b      	subs	r3, r7, r0
 8001400:	469a      	mov	sl, r3
 8001402:	465d      	mov	r5, fp
 8001404:	2601      	movs	r6, #1
 8001406:	e533      	b.n	8000e70 <__aeabi_dsub+0xb4>
 8001408:	003b      	movs	r3, r7
 800140a:	4303      	orrs	r3, r0
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x654>
 800140e:	e715      	b.n	800123c <__aeabi_dsub+0x480>
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	077b      	lsls	r3, r7, #29
 8001414:	465d      	mov	r5, fp
 8001416:	4303      	orrs	r3, r0
 8001418:	08fa      	lsrs	r2, r7, #3
 800141a:	e666      	b.n	80010ea <__aeabi_dsub+0x32e>
 800141c:	08c0      	lsrs	r0, r0, #3
 800141e:	077b      	lsls	r3, r7, #29
 8001420:	4303      	orrs	r3, r0
 8001422:	08fa      	lsrs	r2, r7, #3
 8001424:	e65e      	b.n	80010e4 <__aeabi_dsub+0x328>
 8001426:	003a      	movs	r2, r7
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	4302      	orrs	r2, r0
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x674>
 800142e:	e682      	b.n	8001136 <__aeabi_dsub+0x37a>
 8001430:	464a      	mov	r2, r9
 8001432:	0752      	lsls	r2, r2, #29
 8001434:	2480      	movs	r4, #128	; 0x80
 8001436:	4313      	orrs	r3, r2
 8001438:	464a      	mov	r2, r9
 800143a:	0324      	lsls	r4, r4, #12
 800143c:	08d2      	lsrs	r2, r2, #3
 800143e:	4222      	tst	r2, r4
 8001440:	d007      	beq.n	8001452 <__aeabi_dsub+0x696>
 8001442:	08fe      	lsrs	r6, r7, #3
 8001444:	4226      	tst	r6, r4
 8001446:	d104      	bne.n	8001452 <__aeabi_dsub+0x696>
 8001448:	465d      	mov	r5, fp
 800144a:	0032      	movs	r2, r6
 800144c:	08c3      	lsrs	r3, r0, #3
 800144e:	077f      	lsls	r7, r7, #29
 8001450:	433b      	orrs	r3, r7
 8001452:	0f59      	lsrs	r1, r3, #29
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	0749      	lsls	r1, r1, #29
 800145a:	430b      	orrs	r3, r1
 800145c:	e670      	b.n	8001140 <__aeabi_dsub+0x384>
 800145e:	08c0      	lsrs	r0, r0, #3
 8001460:	077b      	lsls	r3, r7, #29
 8001462:	4303      	orrs	r3, r0
 8001464:	08fa      	lsrs	r2, r7, #3
 8001466:	e640      	b.n	80010ea <__aeabi_dsub+0x32e>
 8001468:	464c      	mov	r4, r9
 800146a:	3920      	subs	r1, #32
 800146c:	40cc      	lsrs	r4, r1
 800146e:	4661      	mov	r1, ip
 8001470:	2920      	cmp	r1, #32
 8001472:	d006      	beq.n	8001482 <__aeabi_dsub+0x6c6>
 8001474:	4666      	mov	r6, ip
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	1b89      	subs	r1, r1, r6
 800147a:	464e      	mov	r6, r9
 800147c:	408e      	lsls	r6, r1
 800147e:	4333      	orrs	r3, r6
 8001480:	4698      	mov	r8, r3
 8001482:	4643      	mov	r3, r8
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	418b      	sbcs	r3, r1
 8001488:	431c      	orrs	r4, r3
 800148a:	e5d8      	b.n	800103e <__aeabi_dsub+0x282>
 800148c:	181c      	adds	r4, r3, r0
 800148e:	4284      	cmp	r4, r0
 8001490:	4180      	sbcs	r0, r0
 8001492:	444f      	add	r7, r9
 8001494:	46ba      	mov	sl, r7
 8001496:	4240      	negs	r0, r0
 8001498:	4482      	add	sl, r0
 800149a:	e6d9      	b.n	8001250 <__aeabi_dsub+0x494>
 800149c:	4653      	mov	r3, sl
 800149e:	4323      	orrs	r3, r4
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x6e8>
 80014a2:	e6cb      	b.n	800123c <__aeabi_dsub+0x480>
 80014a4:	e614      	b.n	80010d0 <__aeabi_dsub+0x314>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	000007ff 	.word	0x000007ff
 80014ac:	ff7fffff 	.word	0xff7fffff
 80014b0:	000007fe 	.word	0x000007fe
 80014b4:	2300      	movs	r3, #0
 80014b6:	4a01      	ldr	r2, [pc, #4]	; (80014bc <__aeabi_dsub+0x700>)
 80014b8:	001c      	movs	r4, r3
 80014ba:	e529      	b.n	8000f10 <__aeabi_dsub+0x154>
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__aeabi_d2iz>:
 80014c0:	000a      	movs	r2, r1
 80014c2:	b530      	push	{r4, r5, lr}
 80014c4:	4c13      	ldr	r4, [pc, #76]	; (8001514 <__aeabi_d2iz+0x54>)
 80014c6:	0053      	lsls	r3, r2, #1
 80014c8:	0309      	lsls	r1, r1, #12
 80014ca:	0005      	movs	r5, r0
 80014cc:	0b09      	lsrs	r1, r1, #12
 80014ce:	2000      	movs	r0, #0
 80014d0:	0d5b      	lsrs	r3, r3, #21
 80014d2:	0fd2      	lsrs	r2, r2, #31
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	dd04      	ble.n	80014e2 <__aeabi_d2iz+0x22>
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <__aeabi_d2iz+0x58>)
 80014da:	4283      	cmp	r3, r0
 80014dc:	dd02      	ble.n	80014e4 <__aeabi_d2iz+0x24>
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <__aeabi_d2iz+0x5c>)
 80014e0:	18d0      	adds	r0, r2, r3
 80014e2:	bd30      	pop	{r4, r5, pc}
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	0340      	lsls	r0, r0, #13
 80014e8:	4301      	orrs	r1, r0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <__aeabi_d2iz+0x60>)
 80014ec:	1ac0      	subs	r0, r0, r3
 80014ee:	281f      	cmp	r0, #31
 80014f0:	dd08      	ble.n	8001504 <__aeabi_d2iz+0x44>
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <__aeabi_d2iz+0x64>)
 80014f4:	1ac3      	subs	r3, r0, r3
 80014f6:	40d9      	lsrs	r1, r3
 80014f8:	000b      	movs	r3, r1
 80014fa:	4258      	negs	r0, r3
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d1f0      	bne.n	80014e2 <__aeabi_d2iz+0x22>
 8001500:	0018      	movs	r0, r3
 8001502:	e7ee      	b.n	80014e2 <__aeabi_d2iz+0x22>
 8001504:	4c08      	ldr	r4, [pc, #32]	; (8001528 <__aeabi_d2iz+0x68>)
 8001506:	40c5      	lsrs	r5, r0
 8001508:	46a4      	mov	ip, r4
 800150a:	4463      	add	r3, ip
 800150c:	4099      	lsls	r1, r3
 800150e:	000b      	movs	r3, r1
 8001510:	432b      	orrs	r3, r5
 8001512:	e7f2      	b.n	80014fa <__aeabi_d2iz+0x3a>
 8001514:	000003fe 	.word	0x000003fe
 8001518:	0000041d 	.word	0x0000041d
 800151c:	7fffffff 	.word	0x7fffffff
 8001520:	00000433 	.word	0x00000433
 8001524:	00000413 	.word	0x00000413
 8001528:	fffffbed 	.word	0xfffffbed

0800152c <__aeabi_ui2d>:
 800152c:	b510      	push	{r4, lr}
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d010      	beq.n	8001554 <__aeabi_ui2d+0x28>
 8001532:	f000 f85f 	bl	80015f4 <__clzsi2>
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <__aeabi_ui2d+0x48>)
 8001538:	1a1b      	subs	r3, r3, r0
 800153a:	280a      	cmp	r0, #10
 800153c:	dc11      	bgt.n	8001562 <__aeabi_ui2d+0x36>
 800153e:	220b      	movs	r2, #11
 8001540:	0021      	movs	r1, r4
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	40d1      	lsrs	r1, r2
 8001546:	3015      	adds	r0, #21
 8001548:	030a      	lsls	r2, r1, #12
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4084      	lsls	r4, r0
 800154e:	0b12      	lsrs	r2, r2, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	e001      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	4313      	orrs	r3, r2
 800155c:	0020      	movs	r0, r4
 800155e:	0019      	movs	r1, r3
 8001560:	bd10      	pop	{r4, pc}
 8001562:	0022      	movs	r2, r4
 8001564:	380b      	subs	r0, #11
 8001566:	4082      	lsls	r2, r0
 8001568:	055b      	lsls	r3, r3, #21
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	2400      	movs	r4, #0
 800156e:	0b12      	lsrs	r2, r2, #12
 8001570:	0d5b      	lsrs	r3, r3, #21
 8001572:	e7f1      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001574:	0000041e 	.word	0x0000041e

08001578 <__aeabi_cdrcmple>:
 8001578:	4684      	mov	ip, r0
 800157a:	0010      	movs	r0, r2
 800157c:	4662      	mov	r2, ip
 800157e:	468c      	mov	ip, r1
 8001580:	0019      	movs	r1, r3
 8001582:	4663      	mov	r3, ip
 8001584:	e000      	b.n	8001588 <__aeabi_cdcmpeq>
 8001586:	46c0      	nop			; (mov r8, r8)

08001588 <__aeabi_cdcmpeq>:
 8001588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800158a:	f000 f8f9 	bl	8001780 <__ledf2>
 800158e:	2800      	cmp	r0, #0
 8001590:	d401      	bmi.n	8001596 <__aeabi_cdcmpeq+0xe>
 8001592:	2100      	movs	r1, #0
 8001594:	42c8      	cmn	r0, r1
 8001596:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001598 <__aeabi_dcmpeq>:
 8001598:	b510      	push	{r4, lr}
 800159a:	f000 f849 	bl	8001630 <__eqdf2>
 800159e:	4240      	negs	r0, r0
 80015a0:	3001      	adds	r0, #1
 80015a2:	bd10      	pop	{r4, pc}

080015a4 <__aeabi_dcmplt>:
 80015a4:	b510      	push	{r4, lr}
 80015a6:	f000 f8eb 	bl	8001780 <__ledf2>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	db01      	blt.n	80015b2 <__aeabi_dcmplt+0xe>
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	2001      	movs	r0, #1
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)

080015b8 <__aeabi_dcmple>:
 80015b8:	b510      	push	{r4, lr}
 80015ba:	f000 f8e1 	bl	8001780 <__ledf2>
 80015be:	2800      	cmp	r0, #0
 80015c0:	dd01      	ble.n	80015c6 <__aeabi_dcmple+0xe>
 80015c2:	2000      	movs	r0, #0
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	2001      	movs	r0, #1
 80015c8:	bd10      	pop	{r4, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)

080015cc <__aeabi_dcmpgt>:
 80015cc:	b510      	push	{r4, lr}
 80015ce:	f000 f871 	bl	80016b4 <__gedf2>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	dc01      	bgt.n	80015da <__aeabi_dcmpgt+0xe>
 80015d6:	2000      	movs	r0, #0
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	2001      	movs	r0, #1
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	46c0      	nop			; (mov r8, r8)

080015e0 <__aeabi_dcmpge>:
 80015e0:	b510      	push	{r4, lr}
 80015e2:	f000 f867 	bl	80016b4 <__gedf2>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	da01      	bge.n	80015ee <__aeabi_dcmpge+0xe>
 80015ea:	2000      	movs	r0, #0
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)

080015f4 <__clzsi2>:
 80015f4:	211c      	movs	r1, #28
 80015f6:	2301      	movs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d301      	bcc.n	8001602 <__clzsi2+0xe>
 80015fe:	0c00      	lsrs	r0, r0, #16
 8001600:	3910      	subs	r1, #16
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	4298      	cmp	r0, r3
 8001606:	d301      	bcc.n	800160c <__clzsi2+0x18>
 8001608:	0a00      	lsrs	r0, r0, #8
 800160a:	3908      	subs	r1, #8
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	4298      	cmp	r0, r3
 8001610:	d301      	bcc.n	8001616 <__clzsi2+0x22>
 8001612:	0900      	lsrs	r0, r0, #4
 8001614:	3904      	subs	r1, #4
 8001616:	a202      	add	r2, pc, #8	; (adr r2, 8001620 <__clzsi2+0x2c>)
 8001618:	5c10      	ldrb	r0, [r2, r0]
 800161a:	1840      	adds	r0, r0, r1
 800161c:	4770      	bx	lr
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	02020304 	.word	0x02020304
 8001624:	01010101 	.word	0x01010101
	...

08001630 <__eqdf2>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	464e      	mov	r6, r9
 8001634:	4645      	mov	r5, r8
 8001636:	46de      	mov	lr, fp
 8001638:	4657      	mov	r7, sl
 800163a:	4690      	mov	r8, r2
 800163c:	b5e0      	push	{r5, r6, r7, lr}
 800163e:	0017      	movs	r7, r2
 8001640:	031a      	lsls	r2, r3, #12
 8001642:	0b12      	lsrs	r2, r2, #12
 8001644:	0005      	movs	r5, r0
 8001646:	4684      	mov	ip, r0
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <__eqdf2+0x80>)
 800164a:	030e      	lsls	r6, r1, #12
 800164c:	004c      	lsls	r4, r1, #1
 800164e:	4691      	mov	r9, r2
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	0fdb      	lsrs	r3, r3, #31
 8001654:	469b      	mov	fp, r3
 8001656:	0b36      	lsrs	r6, r6, #12
 8001658:	0d64      	lsrs	r4, r4, #21
 800165a:	0fc9      	lsrs	r1, r1, #31
 800165c:	0d52      	lsrs	r2, r2, #21
 800165e:	4284      	cmp	r4, r0
 8001660:	d019      	beq.n	8001696 <__eqdf2+0x66>
 8001662:	4282      	cmp	r2, r0
 8001664:	d010      	beq.n	8001688 <__eqdf2+0x58>
 8001666:	2001      	movs	r0, #1
 8001668:	4294      	cmp	r4, r2
 800166a:	d10e      	bne.n	800168a <__eqdf2+0x5a>
 800166c:	454e      	cmp	r6, r9
 800166e:	d10c      	bne.n	800168a <__eqdf2+0x5a>
 8001670:	2001      	movs	r0, #1
 8001672:	45c4      	cmp	ip, r8
 8001674:	d109      	bne.n	800168a <__eqdf2+0x5a>
 8001676:	4559      	cmp	r1, fp
 8001678:	d017      	beq.n	80016aa <__eqdf2+0x7a>
 800167a:	2c00      	cmp	r4, #0
 800167c:	d105      	bne.n	800168a <__eqdf2+0x5a>
 800167e:	0030      	movs	r0, r6
 8001680:	4328      	orrs	r0, r5
 8001682:	1e43      	subs	r3, r0, #1
 8001684:	4198      	sbcs	r0, r3
 8001686:	e000      	b.n	800168a <__eqdf2+0x5a>
 8001688:	2001      	movs	r0, #1
 800168a:	bcf0      	pop	{r4, r5, r6, r7}
 800168c:	46bb      	mov	fp, r7
 800168e:	46b2      	mov	sl, r6
 8001690:	46a9      	mov	r9, r5
 8001692:	46a0      	mov	r8, r4
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001696:	0033      	movs	r3, r6
 8001698:	2001      	movs	r0, #1
 800169a:	432b      	orrs	r3, r5
 800169c:	d1f5      	bne.n	800168a <__eqdf2+0x5a>
 800169e:	42a2      	cmp	r2, r4
 80016a0:	d1f3      	bne.n	800168a <__eqdf2+0x5a>
 80016a2:	464b      	mov	r3, r9
 80016a4:	433b      	orrs	r3, r7
 80016a6:	d1f0      	bne.n	800168a <__eqdf2+0x5a>
 80016a8:	e7e2      	b.n	8001670 <__eqdf2+0x40>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7ed      	b.n	800168a <__eqdf2+0x5a>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff

080016b4 <__gedf2>:
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	4647      	mov	r7, r8
 80016b8:	46ce      	mov	lr, r9
 80016ba:	0004      	movs	r4, r0
 80016bc:	0018      	movs	r0, r3
 80016be:	0016      	movs	r6, r2
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	0b1b      	lsrs	r3, r3, #12
 80016c4:	4d2d      	ldr	r5, [pc, #180]	; (800177c <__gedf2+0xc8>)
 80016c6:	004a      	lsls	r2, r1, #1
 80016c8:	4699      	mov	r9, r3
 80016ca:	b580      	push	{r7, lr}
 80016cc:	0043      	lsls	r3, r0, #1
 80016ce:	030f      	lsls	r7, r1, #12
 80016d0:	46a4      	mov	ip, r4
 80016d2:	46b0      	mov	r8, r6
 80016d4:	0b3f      	lsrs	r7, r7, #12
 80016d6:	0d52      	lsrs	r2, r2, #21
 80016d8:	0fc9      	lsrs	r1, r1, #31
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	0fc0      	lsrs	r0, r0, #31
 80016de:	42aa      	cmp	r2, r5
 80016e0:	d021      	beq.n	8001726 <__gedf2+0x72>
 80016e2:	42ab      	cmp	r3, r5
 80016e4:	d013      	beq.n	800170e <__gedf2+0x5a>
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d122      	bne.n	8001730 <__gedf2+0x7c>
 80016ea:	433c      	orrs	r4, r7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <__gedf2+0x42>
 80016f0:	464d      	mov	r5, r9
 80016f2:	432e      	orrs	r6, r5
 80016f4:	d022      	beq.n	800173c <__gedf2+0x88>
 80016f6:	2c00      	cmp	r4, #0
 80016f8:	d010      	beq.n	800171c <__gedf2+0x68>
 80016fa:	4281      	cmp	r1, r0
 80016fc:	d022      	beq.n	8001744 <__gedf2+0x90>
 80016fe:	2002      	movs	r0, #2
 8001700:	3901      	subs	r1, #1
 8001702:	4008      	ands	r0, r1
 8001704:	3801      	subs	r0, #1
 8001706:	bcc0      	pop	{r6, r7}
 8001708:	46b9      	mov	r9, r7
 800170a:	46b0      	mov	r8, r6
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	464d      	mov	r5, r9
 8001710:	432e      	orrs	r6, r5
 8001712:	d129      	bne.n	8001768 <__gedf2+0xb4>
 8001714:	2a00      	cmp	r2, #0
 8001716:	d1f0      	bne.n	80016fa <__gedf2+0x46>
 8001718:	433c      	orrs	r4, r7
 800171a:	d1ee      	bne.n	80016fa <__gedf2+0x46>
 800171c:	2800      	cmp	r0, #0
 800171e:	d1f2      	bne.n	8001706 <__gedf2+0x52>
 8001720:	2001      	movs	r0, #1
 8001722:	4240      	negs	r0, r0
 8001724:	e7ef      	b.n	8001706 <__gedf2+0x52>
 8001726:	003d      	movs	r5, r7
 8001728:	4325      	orrs	r5, r4
 800172a:	d11d      	bne.n	8001768 <__gedf2+0xb4>
 800172c:	4293      	cmp	r3, r2
 800172e:	d0ee      	beq.n	800170e <__gedf2+0x5a>
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e2      	bne.n	80016fa <__gedf2+0x46>
 8001734:	464c      	mov	r4, r9
 8001736:	4326      	orrs	r6, r4
 8001738:	d1df      	bne.n	80016fa <__gedf2+0x46>
 800173a:	e7e0      	b.n	80016fe <__gedf2+0x4a>
 800173c:	2000      	movs	r0, #0
 800173e:	2c00      	cmp	r4, #0
 8001740:	d0e1      	beq.n	8001706 <__gedf2+0x52>
 8001742:	e7dc      	b.n	80016fe <__gedf2+0x4a>
 8001744:	429a      	cmp	r2, r3
 8001746:	dc0a      	bgt.n	800175e <__gedf2+0xaa>
 8001748:	dbe8      	blt.n	800171c <__gedf2+0x68>
 800174a:	454f      	cmp	r7, r9
 800174c:	d8d7      	bhi.n	80016fe <__gedf2+0x4a>
 800174e:	d00e      	beq.n	800176e <__gedf2+0xba>
 8001750:	2000      	movs	r0, #0
 8001752:	454f      	cmp	r7, r9
 8001754:	d2d7      	bcs.n	8001706 <__gedf2+0x52>
 8001756:	2900      	cmp	r1, #0
 8001758:	d0e2      	beq.n	8001720 <__gedf2+0x6c>
 800175a:	0008      	movs	r0, r1
 800175c:	e7d3      	b.n	8001706 <__gedf2+0x52>
 800175e:	4243      	negs	r3, r0
 8001760:	4158      	adcs	r0, r3
 8001762:	0040      	lsls	r0, r0, #1
 8001764:	3801      	subs	r0, #1
 8001766:	e7ce      	b.n	8001706 <__gedf2+0x52>
 8001768:	2002      	movs	r0, #2
 800176a:	4240      	negs	r0, r0
 800176c:	e7cb      	b.n	8001706 <__gedf2+0x52>
 800176e:	45c4      	cmp	ip, r8
 8001770:	d8c5      	bhi.n	80016fe <__gedf2+0x4a>
 8001772:	2000      	movs	r0, #0
 8001774:	45c4      	cmp	ip, r8
 8001776:	d2c6      	bcs.n	8001706 <__gedf2+0x52>
 8001778:	e7ed      	b.n	8001756 <__gedf2+0xa2>
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff

08001780 <__ledf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	4647      	mov	r7, r8
 8001784:	46ce      	mov	lr, r9
 8001786:	0004      	movs	r4, r0
 8001788:	0018      	movs	r0, r3
 800178a:	0016      	movs	r6, r2
 800178c:	031b      	lsls	r3, r3, #12
 800178e:	0b1b      	lsrs	r3, r3, #12
 8001790:	4d2c      	ldr	r5, [pc, #176]	; (8001844 <__ledf2+0xc4>)
 8001792:	004a      	lsls	r2, r1, #1
 8001794:	4699      	mov	r9, r3
 8001796:	b580      	push	{r7, lr}
 8001798:	0043      	lsls	r3, r0, #1
 800179a:	030f      	lsls	r7, r1, #12
 800179c:	46a4      	mov	ip, r4
 800179e:	46b0      	mov	r8, r6
 80017a0:	0b3f      	lsrs	r7, r7, #12
 80017a2:	0d52      	lsrs	r2, r2, #21
 80017a4:	0fc9      	lsrs	r1, r1, #31
 80017a6:	0d5b      	lsrs	r3, r3, #21
 80017a8:	0fc0      	lsrs	r0, r0, #31
 80017aa:	42aa      	cmp	r2, r5
 80017ac:	d00d      	beq.n	80017ca <__ledf2+0x4a>
 80017ae:	42ab      	cmp	r3, r5
 80017b0:	d010      	beq.n	80017d4 <__ledf2+0x54>
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d127      	bne.n	8001806 <__ledf2+0x86>
 80017b6:	433c      	orrs	r4, r7
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <__ledf2+0x60>
 80017bc:	464d      	mov	r5, r9
 80017be:	432e      	orrs	r6, r5
 80017c0:	d10e      	bne.n	80017e0 <__ledf2+0x60>
 80017c2:	2000      	movs	r0, #0
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d015      	beq.n	80017f4 <__ledf2+0x74>
 80017c8:	e00e      	b.n	80017e8 <__ledf2+0x68>
 80017ca:	003d      	movs	r5, r7
 80017cc:	4325      	orrs	r5, r4
 80017ce:	d110      	bne.n	80017f2 <__ledf2+0x72>
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d118      	bne.n	8001806 <__ledf2+0x86>
 80017d4:	464d      	mov	r5, r9
 80017d6:	432e      	orrs	r6, r5
 80017d8:	d10b      	bne.n	80017f2 <__ledf2+0x72>
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d102      	bne.n	80017e4 <__ledf2+0x64>
 80017de:	433c      	orrs	r4, r7
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d00b      	beq.n	80017fc <__ledf2+0x7c>
 80017e4:	4281      	cmp	r1, r0
 80017e6:	d014      	beq.n	8001812 <__ledf2+0x92>
 80017e8:	2002      	movs	r0, #2
 80017ea:	3901      	subs	r1, #1
 80017ec:	4008      	ands	r0, r1
 80017ee:	3801      	subs	r0, #1
 80017f0:	e000      	b.n	80017f4 <__ledf2+0x74>
 80017f2:	2002      	movs	r0, #2
 80017f4:	bcc0      	pop	{r6, r7}
 80017f6:	46b9      	mov	r9, r7
 80017f8:	46b0      	mov	r8, r6
 80017fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d1f9      	bne.n	80017f4 <__ledf2+0x74>
 8001800:	2001      	movs	r0, #1
 8001802:	4240      	negs	r0, r0
 8001804:	e7f6      	b.n	80017f4 <__ledf2+0x74>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ec      	bne.n	80017e4 <__ledf2+0x64>
 800180a:	464c      	mov	r4, r9
 800180c:	4326      	orrs	r6, r4
 800180e:	d1e9      	bne.n	80017e4 <__ledf2+0x64>
 8001810:	e7ea      	b.n	80017e8 <__ledf2+0x68>
 8001812:	429a      	cmp	r2, r3
 8001814:	dd04      	ble.n	8001820 <__ledf2+0xa0>
 8001816:	4243      	negs	r3, r0
 8001818:	4158      	adcs	r0, r3
 800181a:	0040      	lsls	r0, r0, #1
 800181c:	3801      	subs	r0, #1
 800181e:	e7e9      	b.n	80017f4 <__ledf2+0x74>
 8001820:	429a      	cmp	r2, r3
 8001822:	dbeb      	blt.n	80017fc <__ledf2+0x7c>
 8001824:	454f      	cmp	r7, r9
 8001826:	d8df      	bhi.n	80017e8 <__ledf2+0x68>
 8001828:	d006      	beq.n	8001838 <__ledf2+0xb8>
 800182a:	2000      	movs	r0, #0
 800182c:	454f      	cmp	r7, r9
 800182e:	d2e1      	bcs.n	80017f4 <__ledf2+0x74>
 8001830:	2900      	cmp	r1, #0
 8001832:	d0e5      	beq.n	8001800 <__ledf2+0x80>
 8001834:	0008      	movs	r0, r1
 8001836:	e7dd      	b.n	80017f4 <__ledf2+0x74>
 8001838:	45c4      	cmp	ip, r8
 800183a:	d8d5      	bhi.n	80017e8 <__ledf2+0x68>
 800183c:	2000      	movs	r0, #0
 800183e:	45c4      	cmp	ip, r8
 8001840:	d2d8      	bcs.n	80017f4 <__ledf2+0x74>
 8001842:	e7f5      	b.n	8001830 <__ledf2+0xb0>
 8001844:	000007ff 	.word	0x000007ff

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 fb29 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f897 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f000 f9b7 	bl	8001bc8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800185a:	f000 f935 	bl	8001ac8 <MX_TIM1_Init>
  MX_I2C1_Init();
 800185e:	f000 f8f3 	bl	8001a48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <main+0x120>)
 8001864:	0018      	movs	r0, r3
 8001866:	f001 fde7 	bl	8003438 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	00d9      	lsls	r1, r3, #3
 800186e:	2390      	movs	r3, #144	; 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	2200      	movs	r2, #0
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fdba 	bl	80023ee <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0b11010000, 1, 100);
 800187a:	1dfc      	adds	r4, r7, #7
 800187c:	483b      	ldr	r0, [pc, #236]	; (800196c <main+0x124>)
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2201      	movs	r2, #1
 8001882:	21d0      	movs	r1, #208	; 0xd0
 8001884:	f000 fe66 	bl	8002554 <HAL_I2C_IsDeviceReady>
 8001888:	0003      	movs	r3, r0
 800188a:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	00d9      	lsls	r1, r3, #3
 8001890:	2390      	movs	r3, #144	; 0x90
 8001892:	05db      	lsls	r3, r3, #23
 8001894:	2201      	movs	r2, #1
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fda9 	bl	80023ee <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <main+0x120>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <main+0x120>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d9fa      	bls.n	80018a6 <main+0x5e>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	00d9      	lsls	r1, r3, #3
 80018b4:	2390      	movs	r3, #144	; 0x90
 80018b6:	05db      	lsls	r3, r3, #23
 80018b8:	2200      	movs	r2, #0
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 fd97 	bl	80023ee <HAL_GPIO_WritePin>
	  while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9)));
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	009a      	lsls	r2, r3, #2
 80018c6:	2390      	movs	r3, #144	; 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fd71 	bl	80023b4 <HAL_GPIO_ReadPin>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d0f5      	beq.n	80018c2 <main+0x7a>
	  valsubida = __HAL_TIM_GET_COUNTER (&htim1);
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <main+0x120>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <main+0x128>)
 80018de:	601a      	str	r2, [r3, #0]
	  while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)));
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	009a      	lsls	r2, r3, #2
 80018e6:	2390      	movs	r3, #144	; 0x90
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 fd61 	bl	80023b4 <HAL_GPIO_ReadPin>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d1f5      	bne.n	80018e2 <main+0x9a>
	  valdescida = __HAL_TIM_GET_COUNTER (&htim1);
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <main+0x120>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <main+0x12c>)
 80018fe:	601a      	str	r2, [r3, #0]
	  distance = (valdescida-valsubida)* 0.034/2;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <main+0x12c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <main+0x128>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fe0e 	bl	800152c <__aeabi_ui2d>
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <main+0x130>)
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <main+0x134>)
 8001914:	f7fe ff90 	bl	8000838 <__aeabi_dmul>
 8001918:	0002      	movs	r2, r0
 800191a:	000b      	movs	r3, r1
 800191c:	0010      	movs	r0, r2
 800191e:	0019      	movs	r1, r3
 8001920:	2200      	movs	r2, #0
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	f7fe fc99 	bl	800025c <__aeabi_ddiv>
 800192a:	0002      	movs	r2, r0
 800192c:	000b      	movs	r3, r1
 800192e:	0010      	movs	r0, r2
 8001930:	0019      	movs	r1, r3
 8001932:	f7fe fc75 	bl	8000220 <__aeabi_d2uiz>
 8001936:	0003      	movs	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <main+0x138>)
 800193c:	801a      	strh	r2, [r3, #0]
	  if(distance <= 30){
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <main+0x138>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	2b1e      	cmp	r3, #30
 8001944:	d807      	bhi.n	8001956 <main+0x10e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001946:	2390      	movs	r3, #144	; 0x90
 8001948:	05db      	lsls	r3, r3, #23
 800194a:	2201      	movs	r2, #1
 800194c:	2101      	movs	r1, #1
 800194e:	0018      	movs	r0, r3
 8001950:	f000 fd4d 	bl	80023ee <HAL_GPIO_WritePin>
 8001954:	e79a      	b.n	800188c <main+0x44>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001956:	2390      	movs	r3, #144	; 0x90
 8001958:	05db      	lsls	r3, r3, #23
 800195a:	2200      	movs	r2, #0
 800195c:	2101      	movs	r1, #1
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fd45 	bl	80023ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001964:	e792      	b.n	800188c <main+0x44>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	2000007c 	.word	0x2000007c
 800196c:	20000028 	.word	0x20000028
 8001970:	200000c4 	.word	0x200000c4
 8001974:	200000c8 	.word	0x200000c8
 8001978:	b020c49c 	.word	0xb020c49c
 800197c:	3fa16872 	.word	0x3fa16872
 8001980:	200000cc 	.word	0x200000cc

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b097      	sub	sp, #92	; 0x5c
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	2428      	movs	r4, #40	; 0x28
 800198c:	193b      	adds	r3, r7, r4
 800198e:	0018      	movs	r0, r3
 8001990:	2330      	movs	r3, #48	; 0x30
 8001992:	001a      	movs	r2, r3
 8001994:	2100      	movs	r1, #0
 8001996:	f002 f9cf 	bl	8003d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199a:	2318      	movs	r3, #24
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	0018      	movs	r0, r3
 80019a0:	2310      	movs	r3, #16
 80019a2:	001a      	movs	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f002 f9c7 	bl	8003d38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	0018      	movs	r0, r3
 80019ae:	2314      	movs	r3, #20
 80019b0:	001a      	movs	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	f002 f9c0 	bl	8003d38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b8:	0021      	movs	r1, r4
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2210      	movs	r2, #16
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2202      	movs	r2, #2
 80019d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	0352      	lsls	r2, r2, #13
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 ffb2 	bl	8002954 <HAL_RCC_OscConfig>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019f4:	f000 f932 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	2118      	movs	r1, #24
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2202      	movs	r2, #2
 8001a04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2101      	movs	r1, #1
 8001a16:	0018      	movs	r0, r3
 8001a18:	f001 faba 	bl	8002f90 <HAL_RCC_ClockConfig>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a20:	f000 f91c 	bl	8001c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2220      	movs	r2, #32
 8001a28:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 fbd2 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a3c:	f000 f90e 	bl	8001c5c <Error_Handler>
  }
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b017      	add	sp, #92	; 0x5c
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <MX_I2C1_Init+0x78>)
 8001a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <MX_I2C1_Init+0x7c>)
 8001a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f000 fccf 	bl	8002428 <HAL_I2C_Init>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a8e:	f000 f8e5 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <MX_I2C1_Init+0x74>)
 8001a94:	2100      	movs	r1, #0
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fec4 	bl	8002824 <HAL_I2CEx_ConfigAnalogFilter>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001aa0:	f000 f8dc 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <MX_I2C1_Init+0x74>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 ff07 	bl	80028bc <HAL_I2CEx_ConfigDigitalFilter>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ab2:	f000 f8d3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000028 	.word	0x20000028
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	2000090e 	.word	0x2000090e

08001ac8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	2318      	movs	r3, #24
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f002 f92d 	bl	8003d38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	2310      	movs	r3, #16
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f002 f925 	bl	8003d38 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aee:	003b      	movs	r3, r7
 8001af0:	0018      	movs	r0, r3
 8001af2:	2310      	movs	r3, #16
 8001af4:	001a      	movs	r2, r3
 8001af6:	2100      	movs	r1, #0
 8001af8:	f002 f91e 	bl	8003d38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001afe:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <MX_TIM1_Init+0xf8>)
 8001b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b04:	222f      	movs	r2, #47	; 0x2f
 8001b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <MX_TIM1_Init+0xfc>)
 8001b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f001 fc35 	bl	8003398 <HAL_TIM_Base_Init>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 f893 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b36:	2118      	movs	r1, #24
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	0152      	lsls	r2, r2, #5
 8001b3e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b40:	187a      	adds	r2, r7, r1
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b44:	0011      	movs	r1, r2
 8001b46:	0018      	movs	r0, r3
 8001b48:	f001 fdb0 	bl	80036ac <HAL_TIM_ConfigClockSource>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f000 f884 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f001 fcac 	bl	80034b4 <HAL_TIM_IC_Init>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001b60:	f000 f87c 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2110      	movs	r1, #16
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b72:	187a      	adds	r2, r7, r1
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f002 f88b 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b82:	f000 f86b 	bl	8001c5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b86:	003b      	movs	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b8c:	003b      	movs	r3, r7
 8001b8e:	2201      	movs	r2, #1
 8001b90:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b92:	003b      	movs	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001b98:	003b      	movs	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b9e:	0039      	movs	r1, r7
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_TIM1_Init+0xf4>)
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f001 fcdd 	bl	8003564 <HAL_TIM_IC_ConfigChannel>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001bae:	f000 f855 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b00a      	add	sp, #40	; 0x28
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	2000007c 	.word	0x2000007c
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	0000ffff 	.word	0x0000ffff

08001bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	240c      	movs	r4, #12
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	2314      	movs	r3, #20
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f002 f8ad 	bl	8003d38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	03c9      	lsls	r1, r1, #15
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	03db      	lsls	r3, r3, #15
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0289      	lsls	r1, r1, #10
 8001c04:	430a      	orrs	r2, r1
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_GPIO_Init+0x8c>)
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	029b      	lsls	r3, r3, #10
 8001c10:	4013      	ands	r3, r2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c16:	4910      	ldr	r1, [pc, #64]	; (8001c58 <MX_GPIO_Init+0x90>)
 8001c18:	2390      	movs	r3, #144	; 0x90
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 fbe5 	bl	80023ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8001c24:	0021      	movs	r1, r4
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <MX_GPIO_Init+0x90>)
 8001c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	187a      	adds	r2, r7, r1
 8001c40:	2390      	movs	r3, #144	; 0x90
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	0011      	movs	r1, r2
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fa44 	bl	80020d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b009      	add	sp, #36	; 0x24
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	00000407 	.word	0x00000407

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_MspInit+0x44>)
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_MspInit+0x44>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	619a      	str	r2, [r3, #24]
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_MspInit+0x44>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_MspInit+0x44>)
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_MspInit+0x44>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0549      	lsls	r1, r1, #21
 8001c90:	430a      	orrs	r2, r1
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_MspInit+0x44>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	2414      	movs	r4, #20
 8001cba:	193b      	adds	r3, r7, r4
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	2314      	movs	r3, #20
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f002 f838 	bl	8003d38 <memset>
  if(hi2c->Instance==I2C1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_I2C_MspInit+0x90>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d131      	bne.n	8001d36 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	03c9      	lsls	r1, r1, #15
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	03db      	lsls	r3, r3, #15
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cee:	0021      	movs	r1, r4
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2212      	movs	r2, #18
 8001cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2203      	movs	r2, #3
 8001d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_I2C_MspInit+0x98>)
 8001d12:	0019      	movs	r1, r3
 8001d14:	0010      	movs	r0, r2
 8001d16:	f000 f9dd 	bl	80020d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0389      	lsls	r1, r1, #14
 8001d24:	430a      	orrs	r2, r1
 8001d26:	61da      	str	r2, [r3, #28]
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_I2C_MspInit+0x94>)
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	039b      	lsls	r3, r3, #14
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b00b      	add	sp, #44	; 0x2c
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	40005400 	.word	0x40005400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48001400 	.word	0x48001400

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b08b      	sub	sp, #44	; 0x2c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	2414      	movs	r4, #20
 8001d56:	193b      	adds	r3, r7, r4
 8001d58:	0018      	movs	r0, r3
 8001d5a:	2314      	movs	r3, #20
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f001 ffea 	bl	8003d38 <memset>
  if(htim_base->Instance==TIM1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_TIM_Base_MspInit+0x94>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d133      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	619a      	str	r2, [r3, #24]
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0289      	lsls	r1, r1, #10
 8001d94:	430a      	orrs	r2, r1
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	0021      	movs	r1, r4
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2202      	movs	r2, #2
 8001db4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	187a      	adds	r2, r7, r1
 8001dca:	2390      	movs	r3, #144	; 0x90
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f97f 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b00b      	add	sp, #44	; 0x2c
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0c:	f000 f892 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e24:	f7ff fff7 	bl	8001e16 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001e28:	4812      	ldr	r0, [pc, #72]	; (8001e74 <LoopForever+0x6>)
    LDR R1, [R0]
 8001e2a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001e2c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <LoopForever+0xa>)
    CMP R1, R2
 8001e30:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001e32:	d105      	bne.n	8001e40 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001e34:	4811      	ldr	r0, [pc, #68]	; (8001e7c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001e36:	4912      	ldr	r1, [pc, #72]	; (8001e80 <LoopForever+0x12>)
    STR R1, [R0]
 8001e38:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <LoopForever+0x1a>)
    STR R1, [R0]
 8001e3e:	6001      	str	r1, [r0, #0]

08001e40 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	4812      	ldr	r0, [pc, #72]	; (8001e8c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001e42:	4913      	ldr	r1, [pc, #76]	; (8001e90 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <LoopForever+0x26>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001e58:	4c10      	ldr	r4, [pc, #64]	; (8001e9c <LoopForever+0x2e>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e66:	f001 ff6f 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e6a:	f7ff fced 	bl	8001848 <main>

08001e6e <LoopForever>:

LoopForever:
    b LoopForever
 8001e6e:	e7fe      	b.n	8001e6e <LoopForever>
  ldr   r0, =_estack
 8001e70:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001e74:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001e78:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001e7c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001e80:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001e84:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001e88:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e94:	08003e20 	.word	0x08003e20
  ldr r2, =_sbss
 8001e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e9c:	200000d4 	.word	0x200000d4

08001ea0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_Init+0x24>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_Init+0x24>)
 8001eae:	2110      	movs	r1, #16
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f809 	bl	8001ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eba:	f7ff fed5 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_InitTick+0x5c>)
 8001ed6:	681c      	ldr	r4, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_InitTick+0x60>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	0019      	movs	r1, r3
 8001ede:	23fa      	movs	r3, #250	; 0xfa
 8001ee0:	0098      	lsls	r0, r3, #2
 8001ee2:	f7fe f911 	bl	8000108 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	0019      	movs	r1, r3
 8001eea:	0020      	movs	r0, r4
 8001eec:	f7fe f90c 	bl	8000108 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f8e1 	bl	80020ba <HAL_SYSTICK_Config>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00f      	b.n	8001f20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d80b      	bhi.n	8001f1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f8be 	bl	8002090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_InitTick+0x64>)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b003      	add	sp, #12
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_IncTick+0x1c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x20>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	18d2      	adds	r2, r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_IncTick+0x20>)
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	20000008 	.word	0x20000008
 8001f54:	200000d0 	.word	0x200000d0

08001f58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <HAL_GetTick+0x10>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	200000d0 	.word	0x200000d0

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	0002      	movs	r2, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f80:	d828      	bhi.n	8001fd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <__NVIC_SetPriority+0xd4>)
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	33c0      	adds	r3, #192	; 0xc0
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	589b      	ldr	r3, [r3, r2]
 8001f92:	1dfa      	adds	r2, r7, #7
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	0011      	movs	r1, r2
 8001f98:	2203      	movs	r2, #3
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	00d2      	lsls	r2, r2, #3
 8001f9e:	21ff      	movs	r1, #255	; 0xff
 8001fa0:	4091      	lsls	r1, r2
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	43d2      	mvns	r2, r2
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	2303      	movs	r3, #3
 8001fba:	4003      	ands	r3, r0
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc0:	481f      	ldr	r0, [pc, #124]	; (8002040 <__NVIC_SetPriority+0xd4>)
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	33c0      	adds	r3, #192	; 0xc0
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fd2:	e031      	b.n	8002038 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <__NVIC_SetPriority+0xd8>)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0019      	movs	r1, r3
 8001fdc:	230f      	movs	r3, #15
 8001fde:	400b      	ands	r3, r1
 8001fe0:	3b08      	subs	r3, #8
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3306      	adds	r3, #6
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	18d3      	adds	r3, r2, r3
 8001fea:	3304      	adds	r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	; 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <__NVIC_SetPriority+0xd8>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	001c      	movs	r4, r3
 8002024:	230f      	movs	r3, #15
 8002026:	4023      	ands	r3, r4
 8002028:	3b08      	subs	r3, #8
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	430a      	orrs	r2, r1
 800202e:	3306      	adds	r3, #6
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	18c3      	adds	r3, r0, r3
 8002034:	3304      	adds	r3, #4
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b003      	add	sp, #12
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	045b      	lsls	r3, r3, #17
 8002058:	429a      	cmp	r2, r3
 800205a:	d301      	bcc.n	8002060 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205c:	2301      	movs	r3, #1
 800205e:	e010      	b.n	8002082 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <SysTick_Config+0x44>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	3a01      	subs	r2, #1
 8002066:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002068:	2301      	movs	r3, #1
 800206a:	425b      	negs	r3, r3
 800206c:	2103      	movs	r1, #3
 800206e:	0018      	movs	r0, r3
 8002070:	f7ff ff7c 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x44>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x44>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	210f      	movs	r1, #15
 800209c:	187b      	adds	r3, r7, r1
 800209e:	1c02      	adds	r2, r0, #0
 80020a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b004      	add	sp, #16
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff ffbf 	bl	8002048 <SysTick_Config>
 80020ca:	0003      	movs	r3, r0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e2:	e14f      	b.n	8002384 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4091      	lsls	r1, r2
 80020ee:	000a      	movs	r2, r1
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_GPIO_Init+0x28>
 80020fa:	e140      	b.n	800237e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
 8002104:	2b01      	cmp	r3, #1
 8002106:	d005      	beq.n	8002114 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002110:	2b02      	cmp	r3, #2
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	409a      	lsls	r2, r3
 8002122:	0013      	movs	r3, r2
 8002124:	43da      	mvns	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214a:	2201      	movs	r2, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	2201      	movs	r2, #1
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	4013      	ands	r3, r2
 800217e:	2b03      	cmp	r3, #3
 8002180:	d017      	beq.n	80021b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	409a      	lsls	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	43da      	mvns	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d123      	bne.n	8002206 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	58d3      	ldr	r3, [r2, r3]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	409a      	lsls	r2, r3
 80021d8:	0013      	movs	r3, r2
 80021da:	43da      	mvns	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2107      	movs	r1, #7
 80021ea:	400b      	ands	r3, r1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	401a      	ands	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	0013      	movs	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	029b      	lsls	r3, r3, #10
 8002242:	4013      	ands	r3, r2
 8002244:	d100      	bne.n	8002248 <HAL_GPIO_Init+0x174>
 8002246:	e09a      	b.n	800237e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002248:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_GPIO_Init+0x2c8>)
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_GPIO_Init+0x2c8>)
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	619a      	str	r2, [r3, #24]
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_GPIO_Init+0x2c8>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002260:	4a4f      	ldr	r2, [pc, #316]	; (80023a0 <HAL_GPIO_Init+0x2cc>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	589b      	ldr	r3, [r3, r2]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2203      	movs	r2, #3
 8002272:	4013      	ands	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	409a      	lsls	r2, r3
 800227a:	0013      	movs	r3, r2
 800227c:	43da      	mvns	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	2390      	movs	r3, #144	; 0x90
 8002288:	05db      	lsls	r3, r3, #23
 800228a:	429a      	cmp	r2, r3
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x1e2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a44      	ldr	r2, [pc, #272]	; (80023a4 <HAL_GPIO_Init+0x2d0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x1de>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_GPIO_Init+0x2d4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x1da>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a42      	ldr	r2, [pc, #264]	; (80023ac <HAL_GPIO_Init+0x2d8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x1d6>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x1e4>
 80022aa:	2305      	movs	r3, #5
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x1e4>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x1e4>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x1e4>
 80022b6:	2300      	movs	r3, #0
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	2103      	movs	r1, #3
 80022bc:	400a      	ands	r2, r1
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	; (80023a0 <HAL_GPIO_Init+0x2cc>)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	43da      	mvns	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	035b      	lsls	r3, r3, #13
 80022ee:	4013      	ands	r3, r2
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43da      	mvns	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	039b      	lsls	r3, r3, #14
 8002318:	4013      	ands	r3, r2
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43da      	mvns	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	4013      	ands	r3, r2
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43da      	mvns	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	025b      	lsls	r3, r3, #9
 800236c:	4013      	ands	r3, r2
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_GPIO_Init+0x2dc>)
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	40da      	lsrs	r2, r3
 800238c:	1e13      	subs	r3, r2, #0
 800238e:	d000      	beq.n	8002392 <HAL_GPIO_Init+0x2be>
 8002390:	e6a8      	b.n	80020e4 <HAL_GPIO_Init+0x10>
  } 
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b006      	add	sp, #24
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	48000800 	.word	0x48000800
 80023ac:	48000c00 	.word	0x48000c00
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	000a      	movs	r2, r1
 80023be:	1cbb      	adds	r3, r7, #2
 80023c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	1cba      	adds	r2, r7, #2
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	4013      	ands	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d8:	230f      	movs	r3, #15
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023e0:	230f      	movs	r3, #15
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
  }
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	0008      	movs	r0, r1
 80023f8:	0011      	movs	r1, r2
 80023fa:	1cbb      	adds	r3, r7, #2
 80023fc:	1c02      	adds	r2, r0, #0
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	1c7b      	adds	r3, r7, #1
 8002402:	1c0a      	adds	r2, r1, #0
 8002404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002406:	1c7b      	adds	r3, r7, #1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800240e:	1cbb      	adds	r3, r7, #2
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002416:	e003      	b.n	8002420 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002418:	1cbb      	adds	r3, r7, #2
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e082      	b.n	8002540 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2241      	movs	r2, #65	; 0x41
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fc2d 	bl	8001cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2241      	movs	r2, #65	; 0x41
 800245a:	2124      	movs	r1, #36	; 0x24
 800245c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_I2C_Init+0x120>)
 8002478:	400a      	ands	r2, r1
 800247a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4931      	ldr	r1, [pc, #196]	; (800254c <HAL_I2C_Init+0x124>)
 8002488:	400a      	ands	r2, r1
 800248a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0209      	lsls	r1, r1, #8
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e007      	b.n	80024b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2184      	movs	r1, #132	; 0x84
 80024b0:	0209      	lsls	r1, r1, #8
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d104      	bne.n	80024c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	491f      	ldr	r1, [pc, #124]	; (8002550 <HAL_I2C_Init+0x128>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	491a      	ldr	r1, [pc, #104]	; (800254c <HAL_I2C_Init+0x124>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69d9      	ldr	r1, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2241      	movs	r2, #65	; 0x41
 800252c:	2120      	movs	r1, #32
 800252e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2242      	movs	r2, #66	; 0x42
 800253a:	2100      	movs	r1, #0
 800253c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}
 8002548:	f0ffffff 	.word	0xf0ffffff
 800254c:	ffff7fff 	.word	0xffff7fff
 8002550:	02008000 	.word	0x02008000

08002554 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	230a      	movs	r3, #10
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	1c0a      	adds	r2, r1, #0
 8002566:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2241      	movs	r2, #65	; 0x41
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b20      	cmp	r3, #32
 8002576:	d000      	beq.n	800257a <HAL_I2C_IsDeviceReady+0x26>
 8002578:	e0fd      	b.n	8002776 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	401a      	ands	r2, r3
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	429a      	cmp	r2, r3
 800258c:	d101      	bne.n	8002592 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
 8002590:	e0f2      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_I2C_IsDeviceReady+0x4c>
 800259c:	2302      	movs	r3, #2
 800259e:	e0eb      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2241      	movs	r2, #65	; 0x41
 80025ac:	2124      	movs	r1, #36	; 0x24
 80025ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_IsDeviceReady+0x7a>
 80025be:	230a      	movs	r3, #10
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	059b      	lsls	r3, r3, #22
 80025c6:	0d9b      	lsrs	r3, r3, #22
 80025c8:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <HAL_I2C_IsDeviceReady+0x22c>)
 80025ca:	431a      	orrs	r2, r3
 80025cc:	e006      	b.n	80025dc <HAL_I2C_IsDeviceReady+0x88>
 80025ce:	230a      	movs	r3, #10
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	059b      	lsls	r3, r3, #22
 80025d6:	0d9b      	lsrs	r3, r3, #22
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_I2C_IsDeviceReady+0x230>)
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff fcb9 	bl	8001f58 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2220      	movs	r2, #32
 80025f2:	4013      	ands	r3, r2
 80025f4:	3b20      	subs	r3, #32
 80025f6:	425a      	negs	r2, r3
 80025f8:	4153      	adcs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	231f      	movs	r3, #31
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2210      	movs	r2, #16
 800260a:	4013      	ands	r3, r2
 800260c:	3b10      	subs	r3, #16
 800260e:	425a      	negs	r2, r3
 8002610:	4153      	adcs	r3, r2
 8002612:	b2da      	uxtb	r2, r3
 8002614:	231e      	movs	r3, #30
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800261a:	e035      	b.n	8002688 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	d01a      	beq.n	8002658 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff fc99 	bl	8001f58 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <HAL_I2C_IsDeviceReady+0xe4>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10f      	bne.n	8002658 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2241      	movs	r2, #65	; 0x41
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	2220      	movs	r2, #32
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e08f      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2220      	movs	r2, #32
 8002660:	4013      	ands	r3, r2
 8002662:	3b20      	subs	r3, #32
 8002664:	425a      	negs	r2, r3
 8002666:	4153      	adcs	r3, r2
 8002668:	b2da      	uxtb	r2, r3
 800266a:	231f      	movs	r3, #31
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2210      	movs	r2, #16
 8002678:	4013      	ands	r3, r2
 800267a:	3b10      	subs	r3, #16
 800267c:	425a      	negs	r2, r3
 800267e:	4153      	adcs	r3, r2
 8002680:	b2da      	uxtb	r2, r3
 8002682:	231e      	movs	r3, #30
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002688:	231f      	movs	r3, #31
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_I2C_IsDeviceReady+0x148>
 8002692:	231e      	movs	r3, #30
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0bf      	beq.n	800261c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2210      	movs	r2, #16
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d01a      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	0013      	movs	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	2120      	movs	r1, #32
 80026b8:	f000 f866 	bl	8002788 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e059      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2241      	movs	r2, #65	; 0x41
 80026d0:	2120      	movs	r1, #32
 80026d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e04b      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	0013      	movs	r3, r2
 80026ea:	2200      	movs	r2, #0
 80026ec:	2120      	movs	r1, #32
 80026ee:	f000 f84b 	bl	8002788 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e03e      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2210      	movs	r2, #16
 8002700:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2220      	movs	r2, #32
 8002708:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d119      	bne.n	8002746 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	01c9      	lsls	r1, r1, #7
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	0013      	movs	r3, r2
 800272e:	2200      	movs	r2, #0
 8002730:	2120      	movs	r1, #32
 8002732:	f000 f829 	bl	8002788 <I2C_WaitOnFlagUntilTimeout>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e01c      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2220      	movs	r2, #32
 8002744:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d900      	bls.n	8002756 <HAL_I2C_IsDeviceReady+0x202>
 8002754:	e72f      	b.n	80025b6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2241      	movs	r2, #65	; 0x41
 800275a:	2120      	movs	r1, #32
 800275c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	2220      	movs	r2, #32
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	2100      	movs	r1, #0
 8002770:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b008      	add	sp, #32
 800277e:	bd80      	pop	{r7, pc}
 8002780:	02002000 	.word	0x02002000
 8002784:	02002800 	.word	0x02002800

08002788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002798:	e030      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	d02d      	beq.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a0:	f7ff fbda 	bl	8001f58 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d302      	bcc.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d122      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	425a      	negs	r2, r3
 80027c6:	4153      	adcs	r3, r2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	001a      	movs	r2, r3
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d113      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	2220      	movs	r2, #32
 80027da:	431a      	orrs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2241      	movs	r2, #65	; 0x41
 80027e4:	2120      	movs	r1, #32
 80027e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2242      	movs	r2, #66	; 0x42
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e00f      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	425a      	negs	r2, r3
 800280c:	4153      	adcs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	001a      	movs	r2, r3
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d0bf      	beq.n	800279a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2241      	movs	r2, #65	; 0x41
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d138      	bne.n	80028ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	5c9b      	ldrb	r3, [r3, r2]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002844:	2302      	movs	r3, #2
 8002846:	e032      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	2101      	movs	r1, #1
 800284e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2241      	movs	r2, #65	; 0x41
 8002854:	2124      	movs	r1, #36	; 0x24
 8002856:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4911      	ldr	r1, [pc, #68]	; (80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002874:	400a      	ands	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2241      	movs	r2, #65	; 0x41
 800289c:	2120      	movs	r1, #32
 800289e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	ffffefff 	.word	0xffffefff

080028bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	; 0x41
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d139      	bne.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028dc:	2302      	movs	r3, #2
 80028de:	e033      	b.n	8002948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2240      	movs	r2, #64	; 0x40
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2124      	movs	r1, #36	; 0x24
 80028ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2241      	movs	r2, #65	; 0x41
 8002936:	2120      	movs	r1, #32
 8002938:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2240      	movs	r2, #64	; 0x40
 800293e:	2100      	movs	r1, #0
 8002940:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	b004      	add	sp, #16
 800294e:	bd80      	pop	{r7, pc}
 8002950:	fffff0ff 	.word	0xfffff0ff

08002954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e305      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCC_OscConfig+0x1e>
 8002970:	e08d      	b.n	8002a8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002972:	4bc5      	ldr	r3, [pc, #788]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	220c      	movs	r2, #12
 8002978:	4013      	ands	r3, r2
 800297a:	2b04      	cmp	r3, #4
 800297c:	d00e      	beq.n	800299c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800297e:	4bc2      	ldr	r3, [pc, #776]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	2b08      	cmp	r3, #8
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x64>
 800298a:	4bbf      	ldr	r3, [pc, #764]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	025b      	lsls	r3, r3, #9
 8002992:	401a      	ands	r2, r3
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	429a      	cmp	r2, r3
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4bba      	ldr	r3, [pc, #744]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_RCC_OscConfig+0x56>
 80029a8:	e070      	b.n	8002a8c <HAL_RCC_OscConfig+0x138>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d000      	beq.n	80029b4 <HAL_RCC_OscConfig+0x60>
 80029b2:	e06b      	b.n	8002a8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e2dc      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x7c>
 80029c0:	4bb1      	ldr	r3, [pc, #708]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4bb0      	ldr	r3, [pc, #704]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	0249      	lsls	r1, r1, #9
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e02f      	b.n	8002a30 <HAL_RCC_OscConfig+0xdc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCC_OscConfig+0x9e>
 80029d8:	4bab      	ldr	r3, [pc, #684]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4baa      	ldr	r3, [pc, #680]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029de:	49ab      	ldr	r1, [pc, #684]	; (8002c8c <HAL_RCC_OscConfig+0x338>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	4ba8      	ldr	r3, [pc, #672]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4ba7      	ldr	r3, [pc, #668]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029ea:	49a9      	ldr	r1, [pc, #676]	; (8002c90 <HAL_RCC_OscConfig+0x33c>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e01e      	b.n	8002a30 <HAL_RCC_OscConfig+0xdc>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d10e      	bne.n	8002a18 <HAL_RCC_OscConfig+0xc4>
 80029fa:	4ba3      	ldr	r3, [pc, #652]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4ba2      	ldr	r3, [pc, #648]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	02c9      	lsls	r1, r1, #11
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4b9f      	ldr	r3, [pc, #636]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b9e      	ldr	r3, [pc, #632]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	0249      	lsls	r1, r1, #9
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xdc>
 8002a18:	4b9b      	ldr	r3, [pc, #620]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b9a      	ldr	r3, [pc, #616]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a1e:	499b      	ldr	r1, [pc, #620]	; (8002c8c <HAL_RCC_OscConfig+0x338>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b98      	ldr	r3, [pc, #608]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b97      	ldr	r3, [pc, #604]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a2a:	4999      	ldr	r1, [pc, #612]	; (8002c90 <HAL_RCC_OscConfig+0x33c>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d014      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fa8e 	bl	8001f58 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a42:	f7ff fa89 	bl	8001f58 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e28e      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0xee>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7ff fa79 	bl	8001f58 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff fa74 	bl	8001f58 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e279      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b82      	ldr	r3, [pc, #520]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	029b      	lsls	r3, r3, #10
 8002a86:	4013      	ands	r3, r2
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x118>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d100      	bne.n	8002a9a <HAL_RCC_OscConfig+0x146>
 8002a98:	e06c      	b.n	8002b74 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a9a:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aa4:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11f      	bne.n	8002af0 <HAL_RCC_OscConfig+0x19c>
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	23c0      	movs	r3, #192	; 0xc0
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b71      	ldr	r3, [pc, #452]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x184>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e24c      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad8:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	22f8      	movs	r2, #248	; 0xf8
 8002ade:	4393      	bics	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00da      	lsls	r2, r3, #3
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e041      	b.n	8002b74 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d024      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b62      	ldr	r3, [pc, #392]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff fa28 	bl	8001f58 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7ff fa23 	bl	8001f58 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e228      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d0f1      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	22f8      	movs	r2, #248	; 0xf8
 8002b30:	4393      	bics	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00da      	lsls	r2, r3, #3
 8002b3a:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b51      	ldr	r3, [pc, #324]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	438a      	bics	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fa03 	bl	8001f58 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b58:	f7ff f9fe 	bl	8001f58 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e203      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d1f1      	bne.n	8002b58 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d019      	beq.n	8002bba <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff f9e1 	bl	8001f58 <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7ff f9dc 	bl	8001f58 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1e1      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d0f1      	beq.n	8002b9c <HAL_RCC_OscConfig+0x248>
 8002bb8:	e018      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f9c7 	bl	8001f58 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f9c2 	bl	8001f58 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1c7      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d1f1      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2a4>
 8002bf6:	e0b5      	b.n	8002d64 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	201f      	movs	r0, #31
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d110      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0549      	lsls	r1, r1, #21
 8002c16:	430a      	orrs	r2, r1
 8002c18:	61da      	str	r2, [r3, #28]
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c28:	183b      	adds	r3, r7, r0
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_OscConfig+0x340>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	d11a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x340>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x340>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	0049      	lsls	r1, r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c48:	f7ff f986 	bl	8001f58 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7ff f981 	bl	8001f58 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e186      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x340>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10f      	bne.n	8002c98 <HAL_RCC_OscConfig+0x344>
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <HAL_RCC_OscConfig+0x334>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	621a      	str	r2, [r3, #32]
 8002c84:	e036      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3a0>
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	fffeffff 	.word	0xfffeffff
 8002c90:	fffbffff 	.word	0xfffbffff
 8002c94:	40007000 	.word	0x40007000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x366>
 8002ca0:	4bb6      	ldr	r3, [pc, #728]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	4bb5      	ldr	r3, [pc, #724]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	621a      	str	r2, [r3, #32]
 8002cac:	4bb3      	ldr	r3, [pc, #716]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	4bb2      	ldr	r3, [pc, #712]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	621a      	str	r2, [r3, #32]
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3a0>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x388>
 8002cc2:	4bae      	ldr	r3, [pc, #696]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	4bad      	ldr	r3, [pc, #692]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cc8:	2104      	movs	r1, #4
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	621a      	str	r2, [r3, #32]
 8002cce:	4bab      	ldr	r3, [pc, #684]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4baa      	ldr	r3, [pc, #680]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3a0>
 8002cdc:	4ba7      	ldr	r3, [pc, #668]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	4ba6      	ldr	r3, [pc, #664]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	4ba4      	ldr	r3, [pc, #656]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	4ba3      	ldr	r3, [pc, #652]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002cee:	2104      	movs	r1, #4
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d014      	beq.n	8002d26 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7ff f92c 	bl	8001f58 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e009      	b.n	8002d1a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7ff f927 	bl	8001f58 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a9b      	ldr	r2, [pc, #620]	; (8002f80 <HAL_RCC_OscConfig+0x62c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e12b      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b98      	ldr	r3, [pc, #608]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3b2>
 8002d24:	e013      	b.n	8002d4e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff f917 	bl	8001f58 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7ff f912 	bl	8001f58 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a91      	ldr	r2, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x62c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e116      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d4e:	231f      	movs	r3, #31
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	4b87      	ldr	r3, [pc, #540]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d5e:	4989      	ldr	r1, [pc, #548]	; (8002f84 <HAL_RCC_OscConfig+0x630>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d12a      	bne.n	8002dcc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d76:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7a:	4b80      	ldr	r3, [pc, #512]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002d82:	4b7e      	ldr	r3, [pc, #504]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d86:	4b7d      	ldr	r3, [pc, #500]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff f8e3 	bl	8001f58 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d98:	f7ff f8de 	bl	8001f58 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0e3      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002daa:	4b74      	ldr	r3, [pc, #464]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	d0f1      	beq.n	8002d98 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	22f8      	movs	r2, #248	; 0xf8
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	00da      	lsls	r2, r3, #3
 8002dc4:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dca:	e034      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	3305      	adds	r3, #5
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002dd4:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd8:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dda:	2104      	movs	r1, #4
 8002ddc:	438a      	bics	r2, r1
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	22f8      	movs	r2, #248	; 0xf8
 8002de6:	4393      	bics	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	00da      	lsls	r2, r3, #3
 8002df0:	4b62      	ldr	r3, [pc, #392]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
 8002df6:	e01e      	b.n	8002e36 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002df8:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfc:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002dfe:	2104      	movs	r1, #4
 8002e00:	430a      	orrs	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e08:	4b5c      	ldr	r3, [pc, #368]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7ff f8a2 	bl	8001f58 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e1a:	f7ff f89d 	bl	8001f58 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0a2      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2202      	movs	r2, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	d1f1      	bne.n	8002e1a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d100      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4ec>
 8002e3e:	e097      	b.n	8002f70 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	220c      	movs	r2, #12
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4fa>
 8002e4c:	e06b      	b.n	8002f26 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d14c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e5c:	494a      	ldr	r1, [pc, #296]	; (8002f88 <HAL_RCC_OscConfig+0x634>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7ff f879 	bl	8001f58 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff f874 	bl	8001f58 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e079      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	049b      	lsls	r3, r3, #18
 8002e86:	4013      	ands	r3, r2
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	220f      	movs	r2, #15
 8002e90:	4393      	bics	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_RCC_OscConfig+0x638>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	0449      	lsls	r1, r1, #17
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7ff f847 	bl	8001f58 <HAL_GetTick>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7ff f842 	bl	8001f58 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e047      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	049b      	lsls	r3, r3, #18
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x57c>
 8002eee:	e03f      	b.n	8002f70 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002ef6:	4924      	ldr	r1, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x634>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7ff f82c 	bl	8001f58 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7ff f827 	bl	8001f58 <HAL_GetTick>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e02c      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	049b      	lsls	r3, r3, #18
 8002f20:	4013      	ands	r3, r2
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5b2>
 8002f24:	e024      	b.n	8002f70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01f      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCC_OscConfig+0x628>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	23c0      	movs	r3, #192	; 0xc0
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	401a      	ands	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10e      	bne.n	8002f6c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	220f      	movs	r2, #15
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	23f0      	movs	r3, #240	; 0xf0
 8002f60:	039b      	lsls	r3, r3, #14
 8002f62:	401a      	ands	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b008      	add	sp, #32
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	00001388 	.word	0x00001388
 8002f84:	efffffff 	.word	0xefffffff
 8002f88:	feffffff 	.word	0xfeffffff
 8002f8c:	ffc27fff 	.word	0xffc27fff

08002f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b3      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d911      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4393      	bics	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	4b55      	ldr	r3, [pc, #340]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e09a      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d015      	beq.n	800300c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d006      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fea:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8002ff0:	21e0      	movs	r1, #224	; 0xe0
 8002ff2:	00c9      	lsls	r1, r1, #3
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	22f0      	movs	r2, #240	; 0xf0
 8002ffe:	4393      	bics	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b44      	ldr	r3, [pc, #272]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	4013      	ands	r3, r2
 8003028:	d114      	bne.n	8003054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06e      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	049b      	lsls	r3, r3, #18
 800303e:	4013      	ands	r3, r2
 8003040:	d108      	bne.n	8003054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e062      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e05b      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7fe ff76 	bl	8001f58 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003070:	e009      	b.n	8003086 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fe ff71 	bl	8001f58 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_RCC_ClockConfig+0x18c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e042      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	220c      	movs	r2, #12
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1ec      	bne.n	8003072 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d211      	bcs.n	80030ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4393      	bics	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x184>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e020      	b.n	800310c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2204      	movs	r2, #4
 80030d0:	4013      	ands	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_RCC_ClockConfig+0x190>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030e8:	f000 f820 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030ec:	0001      	movs	r1, r0
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x188>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	220f      	movs	r2, #15
 80030f6:	4013      	ands	r3, r2
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x194>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	000a      	movs	r2, r1
 80030fe:	40da      	lsrs	r2, r3
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x198>)
 8003102:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003104:	2003      	movs	r0, #3
 8003106:	f7fe fee1 	bl	8001ecc <HAL_InitTick>
  
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40022000 	.word	0x40022000
 8003118:	40021000 	.word	0x40021000
 800311c:	00001388 	.word	0x00001388
 8003120:	fffff8ff 	.word	0xfffff8ff
 8003124:	08003de8 	.word	0x08003de8
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003146:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	220c      	movs	r2, #12
 8003150:	4013      	ands	r3, r2
 8003152:	2b04      	cmp	r3, #4
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x30>
 8003156:	2b08      	cmp	r3, #8
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x36>
 800315a:	e02e      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800315e:	613b      	str	r3, [r7, #16]
      break;
 8003160:	e02e      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	0c9b      	lsrs	r3, r3, #18
 8003166:	220f      	movs	r2, #15
 8003168:	4013      	ands	r3, r2
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	220f      	movs	r2, #15
 8003176:	4013      	ands	r3, r2
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xac>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	401a      	ands	r2, r3
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	025b      	lsls	r3, r3, #9
 800318a:	429a      	cmp	r2, r3
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	480f      	ldr	r0, [pc, #60]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003192:	f7fc ffb9 	bl	8000108 <__udivsi3>
 8003196:	0003      	movs	r3, r0
 8003198:	001a      	movs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4353      	muls	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	480a      	ldr	r0, [pc, #40]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a6:	f7fc ffaf 	bl	8000108 <__udivsi3>
 80031aa:	0003      	movs	r3, r0
 80031ac:	001a      	movs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4353      	muls	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	613b      	str	r3, [r7, #16]
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031bc:	613b      	str	r3, [r7, #16]
      break;
 80031be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031c0:	693b      	ldr	r3, [r7, #16]
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b006      	add	sp, #24
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	40021000 	.word	0x40021000
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	08003df8 	.word	0x08003df8
 80031d8:	08003e08 	.word	0x08003e08

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031f8:	e08e      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2017      	movs	r0, #23
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	055b      	lsls	r3, r3, #21
 800320a:	4013      	ands	r3, r2
 800320c:	d110      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0549      	lsls	r1, r1, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
 800321c:	4b58      	ldr	r3, [pc, #352]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	055b      	lsls	r3, r3, #21
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	183b      	adds	r3, r7, r0
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d11a      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0049      	lsls	r1, r1, #1
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fe fe85 	bl	8001f58 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe fe80 	bl	8001f58 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e087      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	23c0      	movs	r3, #192	; 0xc0
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d034      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	23c0      	movs	r3, #192	; 0xc0
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4013      	ands	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d02c      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0249      	lsls	r1, r1, #9
 80032a8:	430a      	orrs	r2, r1
 80032aa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fe47 	bl	8001f58 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe fe42 	bl	8001f58 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e048      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4a25      	ldr	r2, [pc, #148]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003302:	2317      	movs	r3, #23
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003312:	4920      	ldr	r1, [pc, #128]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003314:	400a      	ands	r2, r1
 8003316:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	2203      	movs	r2, #3
 8003328:	4393      	bics	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003332:	430a      	orrs	r2, r1
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2220      	movs	r2, #32
 800333c:	4013      	ands	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	2210      	movs	r2, #16
 8003346:	4393      	bics	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003350:	430a      	orrs	r2, r1
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	4393      	bics	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003370:	430a      	orrs	r2, r1
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b006      	add	sp, #24
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
 8003388:	fffffcff 	.word	0xfffffcff
 800338c:	fffeffff 	.word	0xfffeffff
 8003390:	00001388 	.word	0x00001388
 8003394:	efffffff 	.word	0xefffffff

08003398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e042      	b.n	8003430 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223d      	movs	r2, #61	; 0x3d
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	; 0x3c
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fe fcc3 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223d      	movs	r2, #61	; 0x3d
 80033ca:	2102      	movs	r1, #2
 80033cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f000 fa3b 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2246      	movs	r2, #70	; 0x46
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223e      	movs	r2, #62	; 0x3e
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2240      	movs	r2, #64	; 0x40
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2242      	movs	r2, #66	; 0x42
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2243      	movs	r2, #67	; 0x43
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2244      	movs	r2, #68	; 0x44
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2245      	movs	r2, #69	; 0x45
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223d      	movs	r2, #61	; 0x3d
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223d      	movs	r2, #61	; 0x3d
 8003444:	5c9b      	ldrb	r3, [r3, r2]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e028      	b.n	80034a2 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	223d      	movs	r2, #61	; 0x3d
 8003454:	2102      	movs	r1, #2
 8003456:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_TIM_Base_Start+0x74>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIM_Base_Start+0x34>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_TIM_Base_Start+0x78>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2207      	movs	r2, #7
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d010      	beq.n	80034a0 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e007      	b.n	80034a0 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2101      	movs	r1, #1
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400

080034b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e042      	b.n	800354c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223d      	movs	r2, #61	; 0x3d
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223c      	movs	r2, #60	; 0x3c
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 f839 	bl	8003554 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	223d      	movs	r2, #61	; 0x3d
 80034e6:	2102      	movs	r1, #2
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	0019      	movs	r1, r3
 80034f4:	0010      	movs	r0, r2
 80034f6:	f000 f9ad 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2246      	movs	r2, #70	; 0x46
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223e      	movs	r2, #62	; 0x3e
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2240      	movs	r2, #64	; 0x40
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2242      	movs	r2, #66	; 0x42
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2243      	movs	r2, #67	; 0x43
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2244      	movs	r2, #68	; 0x44
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2245      	movs	r2, #69	; 0x45
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223d      	movs	r2, #61	; 0x3d
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003570:	2317      	movs	r3, #23
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	223c      	movs	r2, #60	; 0x3c
 800357c:	5c9b      	ldrb	r3, [r3, r2]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_TIM_IC_ConfigChannel+0x22>
 8003582:	2302      	movs	r3, #2
 8003584:	e08c      	b.n	80036a0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	223c      	movs	r2, #60	; 0x3c
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035a4:	f000 f9c2 	bl	800392c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	210c      	movs	r1, #12
 80035b4:	438a      	bics	r2, r1
 80035b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]
 80035ca:	e062      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d11c      	bne.n	800360c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035e2:	f000 fa23 	bl	8003a2c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	492d      	ldr	r1, [pc, #180]	; (80036a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6999      	ldr	r1, [r3, #24]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	021a      	lsls	r2, r3, #8
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	619a      	str	r2, [r3, #24]
 800360a:	e042      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11b      	bne.n	800364a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003622:	f000 fa77 	bl	8003b14 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	210c      	movs	r1, #12
 8003632:	438a      	bics	r2, r1
 8003634:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	61da      	str	r2, [r3, #28]
 8003648:	e023      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d11c      	bne.n	800368a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003660:	f000 fa98 	bl	8003b94 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003670:	400a      	ands	r2, r1
 8003672:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69d9      	ldr	r1, [r3, #28]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	021a      	lsls	r2, r3, #8
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]
 8003688:	e003      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800368a:	2317      	movs	r3, #23
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	223c      	movs	r2, #60	; 0x3c
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

  return status;
 800369a:	2317      	movs	r3, #23
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	fffff3ff 	.word	0xfffff3ff

080036ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	230f      	movs	r3, #15
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223c      	movs	r2, #60	; 0x3c
 80036c2:	5c9b      	ldrb	r3, [r3, r2]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_ConfigClockSource+0x20>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0bc      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x19a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223c      	movs	r2, #60	; 0x3c
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	223d      	movs	r2, #61	; 0x3d
 80036d8:	2102      	movs	r1, #2
 80036da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2277      	movs	r2, #119	; 0x77
 80036e8:	4393      	bics	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	0192      	lsls	r2, r2, #6
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xde>
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	0192      	lsls	r2, r2, #6
 800370c:	4293      	cmp	r3, r2
 800370e:	d900      	bls.n	8003712 <HAL_TIM_ConfigClockSource+0x66>
 8003710:	e088      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0152      	lsls	r2, r2, #5
 8003716:	4293      	cmp	r3, r2
 8003718:	d100      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x70>
 800371a:	e088      	b.n	800382e <HAL_TIM_ConfigClockSource+0x182>
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	0152      	lsls	r2, r2, #5
 8003720:	4293      	cmp	r3, r2
 8003722:	d900      	bls.n	8003726 <HAL_TIM_ConfigClockSource+0x7a>
 8003724:	e07e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 8003726:	2b70      	cmp	r3, #112	; 0x70
 8003728:	d018      	beq.n	800375c <HAL_TIM_ConfigClockSource+0xb0>
 800372a:	d900      	bls.n	800372e <HAL_TIM_ConfigClockSource+0x82>
 800372c:	e07a      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 800372e:	2b60      	cmp	r3, #96	; 0x60
 8003730:	d04f      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x126>
 8003732:	d900      	bls.n	8003736 <HAL_TIM_ConfigClockSource+0x8a>
 8003734:	e076      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 8003736:	2b50      	cmp	r3, #80	; 0x50
 8003738:	d03b      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x106>
 800373a:	d900      	bls.n	800373e <HAL_TIM_ConfigClockSource+0x92>
 800373c:	e072      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d057      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x146>
 8003742:	d900      	bls.n	8003746 <HAL_TIM_ConfigClockSource+0x9a>
 8003744:	e06e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 8003746:	2b30      	cmp	r3, #48	; 0x30
 8003748:	d063      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x166>
 800374a:	d86b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d060      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x166>
 8003750:	d868      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d05d      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x166>
 8003756:	2b10      	cmp	r3, #16
 8003758:	d05b      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x166>
 800375a:	e063      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	f000 fa72 	bl	8003c54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2277      	movs	r2, #119	; 0x77
 800377c:	4313      	orrs	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
      break;
 8003788:	e052      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800379a:	f000 fa5b 	bl	8003c54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	01c9      	lsls	r1, r1, #7
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
      break;
 80037b0:	e03e      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	001a      	movs	r2, r3
 80037c0:	f000 f906 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2150      	movs	r1, #80	; 0x50
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 fa28 	bl	8003c20 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e02e      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	001a      	movs	r2, r3
 80037e0:	f000 f966 	bl	8003ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2160      	movs	r1, #96	; 0x60
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fa18 	bl	8003c20 <TIM_ITRx_SetConfig>
      break;
 80037f0:	e01e      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	001a      	movs	r2, r3
 8003800:	f000 f8e6 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fa08 	bl	8003c20 <TIM_ITRx_SetConfig>
      break;
 8003810:	e00e      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0019      	movs	r1, r3
 800381c:	0010      	movs	r0, r2
 800381e:	f000 f9ff 	bl	8003c20 <TIM_ITRx_SetConfig>
      break;
 8003822:	e005      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003824:	230f      	movs	r3, #15
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800382e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	223d      	movs	r2, #61	; 0x3d
 8003834:	2101      	movs	r1, #1
 8003836:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	223c      	movs	r2, #60	; 0x3c
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

  return status;
 8003840:	230f      	movs	r3, #15
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	ffff00ff 	.word	0xffff00ff

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <TIM_Base_SetConfig+0xc0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0x20>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <TIM_Base_SetConfig+0xc4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2270      	movs	r2, #112	; 0x70
 8003878:	4393      	bics	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <TIM_Base_SetConfig+0xc0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0x5a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a21      	ldr	r2, [pc, #132]	; (8003918 <TIM_Base_SetConfig+0xc4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0x5a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <TIM_Base_SetConfig+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0x5a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <TIM_Base_SetConfig+0xcc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0x5a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <TIM_Base_SetConfig+0xd0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <TIM_Base_SetConfig+0xd4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	4393      	bics	r3, r2
 80038c6:	001a      	movs	r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <TIM_Base_SetConfig+0xc0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <TIM_Base_SetConfig+0xcc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <TIM_Base_SetConfig+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d103      	bne.n	8003906 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	615a      	str	r2, [r3, #20]
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40002000 	.word	0x40002000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	fffffcff 	.word	0xfffffcff

0800392c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	2201      	movs	r2, #1
 8003940:	4393      	bics	r3, r2
 8003942:	001a      	movs	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <TIM_TI1_SetConfig+0x9c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_TI1_SetConfig+0x38>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <TIM_TI1_SetConfig+0xa0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <TIM_TI1_SetConfig+0x3c>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <TIM_TI1_SetConfig+0x3e>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2203      	movs	r2, #3
 8003972:	4393      	bics	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e003      	b.n	8003988 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2201      	movs	r2, #1
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	22f0      	movs	r2, #240	; 0xf0
 800398c:	4393      	bics	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	4013      	ands	r3, r2
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	220a      	movs	r2, #10
 80039a2:	4393      	bics	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	220a      	movs	r2, #10
 80039aa:	4013      	ands	r3, r2
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b006      	add	sp, #24
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400

080039d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4393      	bics	r3, r2
 80039ea:	001a      	movs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	22f0      	movs	r2, #240	; 0xf0
 80039fa:	4393      	bics	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	220a      	movs	r2, #10
 8003a0c:	4393      	bics	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b006      	add	sp, #24
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	4393      	bics	r3, r2
 8003a42:	001a      	movs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <TIM_TI2_SetConfig+0x7c>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <TIM_TI2_SetConfig+0x80>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	22a0      	movs	r2, #160	; 0xa0
 8003a80:	4393      	bics	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	22a0      	movs	r2, #160	; 0xa0
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	621a      	str	r2, [r3, #32]
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b006      	add	sp, #24
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	fffffcff 	.word	0xfffffcff
 8003aac:	ffff0fff 	.word	0xffff0fff

08003ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <TIM_TI2_ConfigInputStage+0x60>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	031b      	lsls	r3, r3, #12
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	22a0      	movs	r2, #160	; 0xa0
 8003aec:	4393      	bics	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b006      	add	sp, #24
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	ffff0fff 	.word	0xffff0fff

08003b14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <TIM_TI3_SetConfig+0x78>)
 8003b28:	401a      	ands	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	4393      	bics	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	22f0      	movs	r2, #240	; 0xf0
 8003b4e:	4393      	bics	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	4013      	ands	r3, r2
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <TIM_TI3_SetConfig+0x7c>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	23a0      	movs	r3, #160	; 0xa0
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4013      	ands	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b006      	add	sp, #24
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	fffffeff 	.word	0xfffffeff
 8003b90:	fffff5ff 	.word	0xfffff5ff

08003b94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <TIM_TI4_SetConfig+0x7c>)
 8003ba8:	401a      	ands	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <TIM_TI4_SetConfig+0x80>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <TIM_TI4_SetConfig+0x84>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	031b      	lsls	r3, r3, #12
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <TIM_TI4_SetConfig+0x88>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	031a      	lsls	r2, r3, #12
 8003bee:	23a0      	movs	r3, #160	; 0xa0
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b006      	add	sp, #24
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	ffffefff 	.word	0xffffefff
 8003c14:	fffffcff 	.word	0xfffffcff
 8003c18:	ffff0fff 	.word	0xffff0fff
 8003c1c:	ffff5fff 	.word	0xffff5fff

08003c20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2270      	movs	r2, #112	; 0x70
 8003c34:	4393      	bics	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	2207      	movs	r2, #7
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <TIM_ETR_SetConfig+0x3c>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	021a      	lsls	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b006      	add	sp, #24
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	ffff00ff 	.word	0xffff00ff

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	223c      	movs	r2, #60	; 0x3c
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e03c      	b.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	223c      	movs	r2, #60	; 0x3c
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	223d      	movs	r2, #61	; 0x3d
 8003cb8:	2102      	movs	r1, #2
 8003cba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2270      	movs	r2, #112	; 0x70
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10c      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	4393      	bics	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	223d      	movs	r2, #61	; 0x3d
 8003d18:	2101      	movs	r1, #1
 8003d1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223c      	movs	r2, #60	; 0x3c
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400

08003d38 <memset>:
 8003d38:	0003      	movs	r3, r0
 8003d3a:	1882      	adds	r2, r0, r2
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <memset+0xa>
 8003d40:	4770      	bx	lr
 8003d42:	7019      	strb	r1, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	e7f9      	b.n	8003d3c <memset+0x4>

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <__libc_init_array+0x38>)
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	2600      	movs	r6, #0
 8003d5a:	f000 f819 	bl	8003d90 <_init>
 8003d5e:	4c0a      	ldr	r4, [pc, #40]	; (8003d88 <__libc_init_array+0x40>)
 8003d60:	4d0a      	ldr	r5, [pc, #40]	; (8003d8c <__libc_init_array+0x44>)
 8003d62:	1b64      	subs	r4, r4, r5
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	00b3      	lsls	r3, r6, #2
 8003d6e:	58eb      	ldr	r3, [r5, r3]
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	00b3      	lsls	r3, r6, #2
 8003d78:	58eb      	ldr	r3, [r5, r3]
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08003e18 	.word	0x08003e18
 8003d84:	08003e18 	.word	0x08003e18
 8003d88:	08003e1c 	.word	0x08003e1c
 8003d8c:	08003e18 	.word	0x08003e18

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
